<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leet-code_322.零钱兑换</title>
    <url>/2020/03/08/leet-code-322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: coins = [1, 2, 5], amount = 11</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 11 = 5 + 5 + 1</span><br><span class="line"></span><br><span class="line">输入: coins = [2], amount = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>很经典的一道动态规划套路题，使用一个 dp 数组，用来记录当前所能兑换的最少硬币，如果不存在，则使用一个数字占位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        Arrays.sort(coins);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>  cost = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coins.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - coins[j] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i-coins[j]] != Integer.MAX_VALUE) &#123;</span><br><span class="line">                        cost = Math.min(cost,dp[i-coins[j]]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] == Integer.MAX_VALUE?-<span class="number">1</span>:dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-零钱兑换"><a href="#leet-code-零钱兑换" class="headerlink" title="leet-code 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">leet-code 零钱兑换</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>leet-code</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-礼物的最大价值</title>
    <url>/2020/03/06/%E5%89%91%E6%8C%87offer-%E7%A4%BC%E7%89%A9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>很简单的动态规划问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.length==<span class="number">0</span> || grid[<span class="number">0</span>].length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i-<span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>]+grid[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                dp[i][j] = grid[i][j] + Math.max(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[grid.length-<span class="number">1</span>][grid[<span class="number">0</span>].length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-礼物的最大价值"><a href="#leet-code-礼物的最大价值" class="headerlink" title="leet-code 礼物的最大价值"></a><a href="https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/" target="_blank" rel="noopener">leet-code 礼物的最大价值</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-把数字翻译成字符串</title>
    <url>/2020/03/06/%E5%89%91%E6%8C%87offer-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 12258</span><br><span class="line">输出: 5</span><br><span class="line">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以使用动态规划来做这道题，使用一个动态数组存储当前位置能表示的字符串的个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">translateNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = String.valueOf(num).toCharArray();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[chars.length+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= chars.length; i++) &#123;</span><br><span class="line">            dp[i] += dp[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> a = (chars[i-<span class="number">2</span>]- <span class="string">'0'</span>) * <span class="number">10</span> + chars[i-<span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">10</span> &amp;&amp; a &lt;= <span class="number">25</span>) &#123;</span><br><span class="line">                dp[i] += dp[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[chars.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-把数字翻译成字符串"><a href="#leet-code-把数字翻译成字符串" class="headerlink" title="leet-code 把数字翻译成字符串"></a><a href="https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/" target="_blank" rel="noopener">leet-code 把数字翻译成字符串</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-把数排成最小的数</title>
    <url>/2020/03/06/%E5%89%91%E6%8C%87offer-%E6%8A%8A%E6%95%B0%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [10,2]</span><br><span class="line">输出: &quot;102&quot;</span><br><span class="line"></span><br><span class="line">输入: [3,30,34,5,9]</span><br><span class="line">输出: &quot;3033459&quot;</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过Compareto来重写比较规则，当 s1+s2&gt;s2+s1 的时候，s2 排在前面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        String[] strs = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            strs[i] = nums[i] + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(strs,(s1,s2)-&gt; (s1+s2).compareTo(s2+s1));</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            res += strs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-把数组排成最小的数"><a href="#leet-code-把数组排成最小的数" class="headerlink" title="leet-code 把数组排成最小的数"></a><a href="https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/" target="_blank" rel="noopener">leet-code 把数组排成最小的数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-1~n整数中1出现的次数</title>
    <url>/2020/03/06/%E5%89%91%E6%8C%87offer-1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。</p>
<p>例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：5</span><br><span class="line"></span><br><span class="line">输入：n = 13</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用递归来解决这道题，分成两种情况，最高位是 1 与不是1 的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        String str = n + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> high = str.charAt(<span class="number">0</span>) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">int</span> pow = (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>,str.length()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> last = n - pow * high;</span><br><span class="line">        <span class="keyword">if</span> (high == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> countDigitOne(pow-<span class="number">1</span>)+countDigitOne(last)+last+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> countDigitOne(pow-<span class="number">1</span>) * high + countDigitOne(last) + pow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-1～n整数中1出现的次数"><a href="#leet-code-1～n整数中1出现的次数" class="headerlink" title="leet-code 1～n整数中1出现的次数"></a><a href="https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/" target="_blank" rel="noopener">leet-code 1～n整数中1出现的次数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA并发</title>
    <url>/2020/03/06/JAVA%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h1 id="1-使用线程的方式"><a href="#1-使用线程的方式" class="headerlink" title="1. 使用线程的方式"></a>1. 使用线程的方式</h1><h2 id="1-1-继承Thread类"><a href="#1-1-继承Thread类" class="headerlink" title="1.1 继承Thread类"></a>1.1 继承Thread类</h2><a id="more"></a>

<p>需要重写父类的 run 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    myThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-实现-Runnable-接口"><a href="#1-2-实现-Runnable-接口" class="headerlink" title="1.2 实现 Runnable 接口"></a>1.2 实现 Runnable 接口</h2><p>实现 Runnable 接口的 run 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</span><br><span class="line">  thread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">123</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-实现-Callable接口"><a href="#1-3-实现-Callable接口" class="headerlink" title="1.3 实现 Callable接口"></a>1.3 实现 Callable接口</h2><p>实现 Callable 接口的 call() 方法，该方法有返回值，能返回一个 FutureTask 对象，可以通过 FutureTask 对象异步的获取结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(myThread);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">    thread.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        futureTask.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">123</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"123"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-使用线程池"><a href="#1-4-使用线程池" class="headerlink" title="1.4 使用线程池"></a>1.4 使用线程池</h2><p>使用线程池来创建线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">  executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-线程的状态"><a href="#2-线程的状态" class="headerlink" title="2. 线程的状态"></a>2. 线程的状态</h1><p>一个线程只能处于一种状态，并且这里的线程状态特指 JAVA 虚拟机的线程状态，不能反映线程在特定操作系统下的状态。</p>
<h2 id="2-1-新建-NEW"><a href="#2-1-新建-NEW" class="headerlink" title="2.1 新建 NEW"></a>2.1 新建 NEW</h2><p>线程被创建后尚未启动</p>
<h2 id="2-2-可运行-RUNNABLE"><a href="#2-2-可运行-RUNNABLE" class="headerlink" title="2.2 可运行 RUNNABLE"></a>2.2 可运行 RUNNABLE</h2><p>正在虚拟机中运行。但是从操作系统层面上来说，他可能处于运行状态，也可能处于等待资源调度状态。所以具体有没有运行，要看操作系统的资源调度。</p>
<h2 id="2-3-阻塞-BLOCKED"><a href="#2-3-阻塞-BLOCKED" class="headerlink" title="2.3 阻塞 BLOCKED"></a>2.3 阻塞 BLOCKED</h2><p>请求获取 monitor lock 然后进入Synchronized 函数或者代码块，但是其它的线程已经占用了该 monitor lock，因此处于阻塞状态。要结束该状态需要其它的线程释放 monitor lock。</p>
<h2 id="2-4-无期限等待-WAITING"><a href="#2-4-无期限等待-WAITING" class="headerlink" title="2.4 无期限等待 WAITING"></a>2.4 无期限等待 WAITING</h2><p>等待其他线程显式地唤醒，阻塞和等待的区别就是，阻塞是被动的，它在等待获取 monitor lock，而等待是主动的，它是调用了 Object.wait() 方法进入该状态的。</p>
<h2 id="2-5-超时等待-TIMED-WAITING"><a href="#2-5-超时等待-TIMED-WAITING" class="headerlink" title="2.5 超时等待 TIMED-WAITING"></a>2.5 超时等待 TIMED-WAITING</h2><p>它也是主动调用了 wait() 等方法，不过添加了一个时间参数，当线程等待超时后，结束等待。</p>
<h2 id="2-6-死亡-TERMINATED"><a href="#2-6-死亡-TERMINATED" class="headerlink" title="2.6 死亡 TERMINATED"></a>2.6 死亡 TERMINATED</h2><p>线程正常执行完了任务从而结束，或者产生异常导致结束。</p>
<h1 id="3-同步互斥"><a href="#3-同步互斥" class="headerlink" title="3. 同步互斥"></a>3. 同步互斥</h1><h2 id="3-1-synchronized-关键字"><a href="#3-1-synchronized-关键字" class="headerlink" title="3.1 synchronized 关键字"></a>3.1 synchronized 关键字</h2><h3 id="3-1-1-使用方式"><a href="#3-1-1-使用方式" class="headerlink" title="3.1.1 使用方式"></a>3.1.1 使用方式</h3><ol>
<li><strong>修饰实例方法</strong>：作用于当前对象实例加锁，进入同步代码前需要获得当前对象实例的锁。</li>
<li><strong>修饰静态方法</strong>：也就是给当前类加锁，会作用于类的所有实例对象，因为静态成员不属于任何一个实例对象，是类成员。</li>
<li><strong>修饰代码块</strong>：指定加锁对象，对给定对象加锁，进入同步代码块前要获得给定对象的锁。</li>
</ol>
<h3 id="3-1-2-synchronized-的底层原理"><a href="#3-1-2-synchronized-的底层原理" class="headerlink" title="3.1.2 synchronized 的底层原理"></a>3.1.2 synchronized 的底层原理</h3><p>因为 synchronized 是一个关键字，因此它的底层原理其实是基于 JVM 层面的。</p>
<h4 id="3-1-2-1-同步代码块的情况"><a href="#3-1-2-1-同步代码块的情况" class="headerlink" title="3.1.2.1 同步代码块的情况"></a>3.1.2.1 同步代码块的情况</h4><p><img src="/2020/03/06/JAVA并发/1.png" alt></p>
<p>由上图可以看出，synchronized 同步代码块的实现是使用的 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中<code>monitorenter</code>指向代码块的开始位置，<code>monitorexit</code> 指向的代码块结束位置。当执行<code>monitorenter</code> 指令时，线程试图获取锁也就是获取 monior（对象的对象头中的锁状态标志） 的持有权。当计数器为0，则可以获取，获取后计数器为1。再执行<code>monitorexit</code> 指令，将计数器设为0后，释放该锁。</p>
<h4 id="3-1-2-2-同步方法的情况"><a href="#3-1-2-2-同步方法的情况" class="headerlink" title="3.1.2.2 同步方法的情况"></a>3.1.2.2 同步方法的情况</h4><p><img src="/2020/03/06/JAVA并发/2.png" alt></p>
<p>同步方法中并没有 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，而是使用的<code>ACC_SYNCHRONIZED</code>标识，该标识表明了该方法是一个同步方法。</p>
<h3 id="3-1-3-synchronized-关键字的优化"><a href="#3-1-3-synchronized-关键字的优化" class="headerlink" title="3.1.3 synchronized 关键字的优化"></a>3.1.3 synchronized 关键字的优化</h3><p>在 Java 早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因。</p>
<p>JDK1.6 对 synchronized 的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。</p>
<h4 id="3-1-3-1-自旋锁"><a href="#3-1-3-1-自旋锁" class="headerlink" title="3.1.3.1 自旋锁"></a>3.1.3.1 自旋锁</h4><p>互斥同步进入阻塞状态的开销很大，应该尽量避免线程进入阻塞状态。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁就是让一个线程在请求共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间能获得锁，就可以避免进入阻塞状态。</p>
<p>自旋锁虽然能避免进入阻塞状态而减少开销，但是他需要不停的循环，从而占用CPU时间，因此只适用于锁定状态很短的场景。</p>
<p>在 JDK 1.6 中，引入了自适应的自旋锁。自旋的次数不再固定了，而是由前一次在同一个锁上的自选次数及锁的拥有者的状态来决定。</p>
<h4 id="3-1-3-2-锁消除"><a href="#3-1-3-2-锁消除" class="headerlink" title="3.1.3.2 锁消除"></a>3.1.3.2 锁消除</h4><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p>
<p>锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当作私有数据对待，也就可以将他们的锁进行消除。</p>
<p>对于一些看起来没有加锁的代码，其实隐式的加了锁，例如字符串拼接。String 是不可变的类，编译器会对 String的拼接自动优化。在 JDK 1.5 之前，会转换为 StringBuffer 对象的连续 append() 操作。</p>
<p>因为 StringBuffer 是方法都有 synchronized 关键字，所以都是同步操作。虚拟机检测到 StringBuffer 对象的动态作用域被限制在拼接方法中，其它线程无法访问到，因此可以进行锁消除。</p>
<h4 id="3-1-3-3-锁粗化"><a href="#3-1-3-3-锁粗化" class="headerlink" title="3.1.3.3 锁粗化"></a>3.1.3.3 锁粗化</h4><p>如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。</p>
<p>例如多个字符串的拼接，就会有 StringBuffer 的多个 append() 操作。如果虚拟机探测到这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展到整个操作序列的外部。对于多次的 append() 操作就会只加锁一次。</p>
<h4 id="3-1-3-4-偏向锁"><a href="#3-1-3-4-偏向锁" class="headerlink" title="3.1.3.4 偏向锁"></a>3.1.3.4 偏向锁</h4><p>JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。</p>
<p>以下是 HotSpot 虚拟机对象头的内存布局，这些数据被称为 Mark Word。其中 tag bits 对应了五个状态，这些状态在右侧的 state 表格中给出。除了 marked for gc 状态，其它四个状态已经在前面介绍过了。</p>
<p><img src="/2020/03/06/JAVA并发/4.png" alt></p>
<p>偏向锁的思想是偏向于第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</p>
<p>当锁对象第一次被线程获得的时候，进入偏向状态，标记为 1 01。同时使用 CAS 操作将线程 ID 记录到对象头中。如果 CAS 操作成功，这个线程以后每次进入这个锁相关的同步块就不需要再进行任何同步操作。</p>
<p>当有另外一个线程去尝试获取这个锁对象时，偏向状态宣告结束，此时撤销偏向后恢复到未锁定状态或者轻量级锁状态。</p>
<p><img src="/2020/03/06/JAVA并发/3.png" alt></p>
<h4 id="3-1-3-5-轻量级锁"><a href="#3-1-3-5-轻量级锁" class="headerlink" title="3.1.3.5 轻量级锁"></a>3.1.3.5 轻量级锁</h4><p>下图左侧是一个线程的虚拟机栈，其中有一部分称为 Lock Record 的区域，这是在轻量级锁运行过程创建的，用于存放锁对象的 Mark Word。而右侧就是一个锁对象，包含了 Mark Word 和其它信息。</p>
<p><img src="/2020/03/06/JAVA并发/5.png" alt></p>
<p>轻量级锁是相对于重量级锁而言的，它使用 CAS 操作来避免重量级锁使用互斥量的开销。对于大部分锁，在整个同步周期内都是不存在竞争的，因此也就不需要都使用互斥量来进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了在改用互斥量来同步。</p>
<p>当尝试获取一个锁对象时，如果锁对象标记为 0 01，说明锁对象处于未锁定状态，此时虚拟机在当前线程的虚拟机栈中创建 Lock Record，然后使用 CAS 操作将对象的 Mark Word 更新为 Lock Record 指针。如果 CAS 操作成功了，那么线程就获取该对象上的锁，并且对象的 Mark Word 的锁标记变为 00，表示该锁对象处于轻量级锁状态。</p>
<p><img src="/2020/03/06/JAVA并发/6.png" alt></p>
<p>如果 CAS 操作失败了，虚拟机首先检测对象的 Mark Word 是否指向当前线程的虚拟机栈，如果是的话说明当前线程已经拥有了锁对象，那么直接进行同步操作，否则说明这个锁对象已经被其它对象占用了。如果有两条以上的线程争抢同一个锁，那么该锁膨胀为重量级锁。</p>
<h2 id="3-2-ReentrantLock"><a href="#3-2-ReentrantLock" class="headerlink" title="3.2 ReentrantLock"></a>3.2 ReentrantLock</h2><h3 id="3-2-1-使用方法"><a href="#3-2-1-使用方法" class="headerlink" title="3.2.1 使用方法"></a>3.2.1 使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"locking"</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"unlocking"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-Reentrantlock-与-synchronized-的区别"><a href="#3-2-2-Reentrantlock-与-synchronized-的区别" class="headerlink" title="3.2.2 Reentrantlock 与 synchronized 的区别"></a>3.2.2 Reentrantlock 与 synchronized 的区别</h3><h4 id="3-2-2-1-实现"><a href="#3-2-2-1-实现" class="headerlink" title="3.2.2.1 实现"></a>3.2.2.1 实现</h4><p>synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。</p>
<h4 id="3-2-2-2-可重入锁"><a href="#3-2-2-2-可重入锁" class="headerlink" title="3.2.2.2 可重入锁"></a>3.2.2.2 可重入锁</h4><p>ReentrantLock 与 synchronized 关键字一样，都是可重入锁。可重入锁就是：自己可以再次获得自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁时，还是可以获取的，如果不可重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都会自增1，当计数器为0时，才释放锁。</p>
<h4 id="3-2-2-3-等待可中断"><a href="#3-2-2-3-等待可中断" class="headerlink" title="3.2.2.3 等待可中断"></a>3.2.2.3 等待可中断</h4><p>ReentrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</p>
<h4 id="3-2-3-4-公平锁与非公平锁"><a href="#3-2-3-4-公平锁与非公平锁" class="headerlink" title="3.2.3.4 公平锁与非公平锁"></a>3.2.3.4 公平锁与非公平锁</h4><p>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。ReentrantLock默认情况是非公平的，可以通过<code>ReentrantLock(boolean fair)</code>构造方法来制定是否是公平的。</p>
<h4 id="3-2-3-5-实现选择性通知"><a href="#3-2-3-5-实现选择性通知" class="headerlink" title="3.2.3.5 实现选择性通知"></a>3.2.3.5 实现选择性通知</h4><p>synchronized关键字与 wait() 和 notify()/notifyAll() 方法相结合可以实现等待/通知机制，ReentrantLock 类当然也可以实现，但是需要借助于 Condition 接口与 newCondition() 方法。可以使用一个 lock 对象创建多个 condition 实例。</p>
<h4 id="3-2-3-6-性能"><a href="#3-2-3-6-性能" class="headerlink" title="3.2.3.6 性能"></a>3.2.3.6 性能</h4><p>在JDK1.6之后，synchornized有了非常大的优化，性能基本已经与reentracklock持平了。</p>
<h1 id="4-非阻塞同步"><a href="#4-非阻塞同步" class="headerlink" title="4. 非阻塞同步"></a>4. 非阻塞同步</h1><p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。</p>
<p>互斥同步属于一种悲观的并发策略，总是悲观的认为数据会被修改，因此无论数据是否被修改，都会进行加锁操作。</p>
<p>而非阻塞同步就是乐观锁的具体表现，总是乐观的认为数据不会被修改，但是在修改数据之前会与期望的数据进行比较，如果相同就执行，如果不同则采取补偿措施（不断地重试，直到成功为止）。</p>
<h2 id="4-1-CAS"><a href="#4-1-CAS" class="headerlink" title="4.1 CAS"></a>4.1 CAS</h2><p>比较并交换（Compare-and-Swap，CAS），CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B</p>
<h2 id="4-2-ABA-问题"><a href="#4-2-ABA-问题" class="headerlink" title="4.2 ABA 问题"></a>4.2 ABA 问题</h2><p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p>
<p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制<strong>变量值的版本</strong>来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p>
<h1 id="5-无同步方案"><a href="#5-无同步方案" class="headerlink" title="5. 无同步方案"></a>5. 无同步方案</h1><p>要保证线程安全，并不是一定要进行同步。如果一个方法本来就不涉及临界资源，那么它也就不需要进行同步操作了。</p>
<h2 id="5-1-栈封闭"><a href="#5-1-栈封闭" class="headerlink" title="5.1 栈封闭"></a>5.1 栈封闭</h2><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p>
<h2 id="5-2-Thread-Local"><a href="#5-2-Thread-Local" class="headerlink" title="5.2 Thread Local"></a>5.2 Thread Local</h2><p>正常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想要实现线程拥有自己专属的本地变量，就需要使用 ThreadLocal 类了。ThreadLocal 类主要解决的就是让每个线程绑定自己的值，可以将 ThreadLocal 类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</p>
<p>如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本</p>
<h3 id="5-2-1ThreadLocal-底层结构"><a href="#5-2-1ThreadLocal-底层结构" class="headerlink" title="5.2.1ThreadLocal 底层结构"></a>5.2.1ThreadLocal 底层结构</h3><p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。</p>
<p><img src="/2020/03/06/JAVA并发/7.png" alt></p>
<h3 id="5-2-2-内存泄漏问题"><a href="#5-2-2-内存泄漏问题" class="headerlink" title="5.2.2 内存泄漏问题"></a>5.2.2 内存泄漏问题</h3><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用,而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。这样一来，<code>ThreadLocalMap</code> 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后 最好手动调用<code>remove()</code>方法。</p>
<h1 id="6-JAVA-内存模型"><a href="#6-JAVA-内存模型" class="headerlink" title="6. JAVA 内存模型"></a>6. JAVA 内存模型</h1><p>Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</p>
<h2 id="6-1-主内存与工作内存"><a href="#6-1-主内存与工作内存" class="headerlink" title="6.1 主内存与工作内存"></a>6.1 主内存与工作内存</h2><p>Java的内存模型实现总是从<strong>主存</strong>（即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存<strong>本地内存</strong>（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成<strong>数据的不一致</strong>。</p>
<p><img src="/2020/03/06/JAVA并发/8.png" alt></p>
<h2 id="6-2-可见性"><a href="#6-2-可见性" class="headerlink" title="6.2 可见性"></a>6.2 可见性</h2><p>可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p>
<p>主要有三种实现可见性的方式：</p>
<ul>
<li>volatile</li>
<li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li>
<li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li>
</ul>
<p>对于一个 i++ 操作，就算使用了 volatile 修饰，也无法解决线程安全问题，因为 volatile 不能保证操作的原子性。</p>
<h2 id="6-3-指令重排"><a href="#6-3-指令重排" class="headerlink" title="6.3 指令重排"></a>6.3 指令重排</h2><p>在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p>
<p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p>
<h1 id="7-AQS"><a href="#7-AQS" class="headerlink" title="7. AQS"></a>7. AQS</h1><p>队里同步器（AbstractQueuedSynchronizer，AQS），是一个用来构建锁和同步器的框架，使用AQS 能简单且高效的构造同步器。</p>
<h2 id="7-1-AQS-原理"><a href="#7-1-AQS-原理" class="headerlink" title="7.1 AQS 原理"></a>7.1 AQS 原理</h2><p>AQS 的核心思想就是，如果被请求的共享资源处于空闲状态，则将当前请求资源的线程设置为有效的工作线程，并将共享资源设置为锁定状态。如果请求的共享资源处于锁定状态，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制在 AQS 中是使用 CLH 队列锁实现的，将获取不到锁的线程加入到队列i中。</p>
<p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p>
<p><img src="/2020/03/06/JAVA并发/9.png" alt></p>
<p>AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;<span class="comment">//共享变量，使用volatile修饰保证线程可见性</span></span><br></pre></td></tr></table></figure>

<p>状态信息通过protected类型的getState，setState，compareAndSetState进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回同步状态的当前值</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 设置同步状态的值</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123; </span><br><span class="line">        state = newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-AQS底层使用了模板方法模式"><a href="#7-2-AQS底层使用了模板方法模式" class="headerlink" title="7.2  AQS底层使用了模板方法模式"></a>7.2  AQS底层使用了模板方法模式</h2><p>同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样：</p>
<ol>
<li>使用者继承AbstractQueuedSynchronizer并重写指定的方法。（这些重写方法很简单，无非是对于共享资源state的获取和释放）</li>
<li>将AQS组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</li>
</ol>
<p>这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用。</p>
<p>AQS使用了模板方法模式，自定义同步器时需要重写下面几个AQS提供的模板方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isHeldExclusively()<span class="comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class="line">tryAcquire(<span class="keyword">int</span>)<span class="comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryRelease(<span class="keyword">int</span>)<span class="comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryAcquireShared(<span class="keyword">int</span>)<span class="comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class="line">tryReleaseShared(<span class="keyword">int</span>)<span class="comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，每个方法都抛出 <code>UnsupportedOperationException</code>。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS类中的其他方法都是final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。</p>
<p>以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p>
<h2 id="7-3-AQS-组件"><a href="#7-3-AQS-组件" class="headerlink" title="7.3 AQS 组件"></a>7.3 AQS 组件</h2><h3 id="7-3-1-CountDownLatch"><a href="#7-3-1-CountDownLatch" class="headerlink" title="7.3.1 CountDownLatch"></a>7.3.1 CountDownLatch</h3><p>用来控制一个或者多个线程等待多个线程。维护了一个计数器 cnt，每次调用 countDown() 方法会让计数器的值减 1，减到 0 的时候，那些因为调用 await() 方法而在等待的线程就会被唤醒。</p>
<h3 id="7-3-2-CyclicBarrier"><a href="#7-3-2-CyclicBarrier" class="headerlink" title="7.3.2 CyclicBarrier"></a>7.3.2 CyclicBarrier</h3><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。</p>
<p>和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。</p>
<p>CyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。</p>
<p>CyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。</p>
<h3 id="7-3-3-Semaphore"><a href="#7-3-3-Semaphore" class="headerlink" title="7.3.3 Semaphore"></a>7.3.3 Semaphore</h3><p>Semaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。</p>
<h3 id="7-3-4-FutureTask"><a href="#7-3-4-FutureTask" class="headerlink" title="7.3.4 FutureTask"></a>7.3.4 FutureTask</h3><p>在介绍 Callable 时我们知道它可以有返回值，返回值通过 Future 进行封装。FutureTask 实现了 RunnableFuture 接口，该接口继承自 Runnable 和 Future 接口，这使得 FutureTask 既可以当做一个任务执行，也可以有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>FutureTask 可用于异步获取执行结果或取消执行任务的场景。当一个计算任务需要执行很长时间，那么就可以用 FutureTask 来封装这个任务，主线程在完成自己的任务之后再去获取结果。</p>
<h3 id="7-3-5-ForkJoin"><a href="#7-3-5-ForkJoin" class="headerlink" title="7.3.5 ForkJoin"></a>7.3.5 ForkJoin</h3><p>主要用于并行计算中，和 MapReduce 原理类似，都是把大的计算任务拆分成多个小任务并行计算。</p>
<p>ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。</p>
<h3 id="7-3-6-BlockingQueue"><a href="#7-3-6-BlockingQueue" class="headerlink" title="7.3.6 BlockingQueue"></a>7.3.6 BlockingQueue</h3><p>java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：</p>
<ul>
<li><strong>FIFO 队列</strong> ：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）</li>
<li><strong>优先级队列</strong> ：PriorityBlockingQueue</li>
</ul>
<p>提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。</p>
<h1 id="8-线程池"><a href="#8-线程池" class="headerlink" title="8. 线程池"></a>8. 线程池</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener">CyC2018/CS-Notes</a></li>
<li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Multithread/JavaConcurrencyAdvancedCommonInterviewQuestions.md" target="_blank" rel="noopener">JavaGuide</a></li>
<li>《Java 并发编程的艺术》</li>
</ul>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-连续子数组的最大和</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p>
<p>要求时间复杂度为O(n)。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用一个一维的dp数组即可解决，该数组用于记录，当前所在位置的最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = nums[i];</span><br><span class="line">            dp[i] += dp[i-<span class="number">1</span>] &gt; <span class="number">0</span> ? dp[i-<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; max) &#123;</span><br><span class="line">                max = dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-连续子数组的最大和"><a href="#leet-code-连续子数组的最大和" class="headerlink" title="leet-code 连续子数组的最大和"></a><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/" target="_blank" rel="noopener">leet-code 连续子数组的最大和</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-数据流的中位数</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2,3,4] 的中位数是 3</span><br><span class="line"></span><br><span class="line">[2,3] 的中位数是 (2 + 3) / 2 = 2.5</span><br><span class="line"></span><br><span class="line">设计一个支持以下两种操作的数据结构：</span><br><span class="line"></span><br><span class="line">void addNum(int num) - 从数据流中添加一个整数到数据结构中。</span><br><span class="line">double findMedian() - 返回目前所有元素的中位数。</span><br><span class="line"></span><br><span class="line">[&quot;MedianFinder&quot;,&quot;addNum&quot;,&quot;addNum&quot;,&quot;findMedian&quot;,&quot;addNum&quot;,&quot;findMedian&quot;]</span><br><span class="line">[[],[1],[2],[],[3],[]]</span><br><span class="line">输出：[null,null,null,1.50000,null,2.00000]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用一个大顶堆和一个小顶堆来记录数据，大顶堆记录中位数左边的数据，小顶堆记录中位数右边的数据。如果个数是偶数，则取两个堆顶的元素除以二；如果是奇数，则取出大顶堆堆顶的元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;Integer&gt; low;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; high;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MedianFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        low = <span class="keyword">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o2-o1);</span><br><span class="line">        high = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        low.offer(num);</span><br><span class="line">        high.offer(low.poll());</span><br><span class="line">        <span class="keyword">if</span> (size % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            low.offer(high.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>) (low.peek() + high.peek()) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> low.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-数据流中的中位数"><a href="#leet-code-数据流中的中位数" class="headerlink" title="leet-code 数据流中的中位数"></a><a href="https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/" target="_blank" rel="noopener">leet-code 数据流中的中位数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-最小的k个数</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：arr = [3,2,1], k = 2</span><br><span class="line">输出：[1,2] 或者 [2,1]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用大顶堆来记录k个数即可，如果数组后面的数小于了堆顶的数，则把堆顶的数抛出，把该数放入大顶堆即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getLeastNumbers(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span> || k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k,(o1,o2)-&gt;o2-o1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            queue.offer(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; queue.peek()) &#123;</span><br><span class="line">                queue.poll();</span><br><span class="line">                queue.offer(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            res[i] = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-最小的k个数"><a href="#leet-code-最小的k个数" class="headerlink" title="leet-code 最小的k个数"></a><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/" target="_blank" rel="noopener">leet-code 最小的k个数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-数组中出现次数超过一半的数字</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == temp) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = nums[i];</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == temp) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt; nums.length / <span class="number">2</span> ? temp : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-数组中出现次数超过一半的数字"><a href="#leet-code-数组中出现次数超过一半的数字" class="headerlink" title="leet-code 数组中出现次数超过一半的数字"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 数组中出现次数超过一半的数字</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-字符串的排列</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个字符串，打印出该字符串中字符的所有排列。</p>
<p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abc&quot;</span><br><span class="line">输出：[&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过dfs遍历所有的情况，并用辅助数组记录状态，防止重复使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> String[] permutation(String s) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[chars.length];</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        dfs(chars,<span class="keyword">new</span> StringBuilder(),used);</span><br><span class="line">        String[] strs = <span class="keyword">new</span> String[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            strs[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[] chars,StringBuilder builder,<span class="keyword">boolean</span>[] used)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (builder.length() == chars.length) &#123;</span><br><span class="line">            res.add(builder.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; chars[i] == chars[i-<span class="number">1</span>] &amp;&amp; !used[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            builder.append(chars[i]);</span><br><span class="line">            dfs(chars,builder,used);</span><br><span class="line">            builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-字符串的排列"><a href="#leet-code-字符串的排列" class="headerlink" title="leet-code 字符串的排列"></a><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/" target="_blank" rel="noopener">leet-code 字符串的排列</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-复杂链表的复制</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p>
<a id="more"></a>

<p><img src="/2020/03/05/剑指offer-复杂链表的复制/1.png" alt></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先复制链表的next节点，在复制链表的random节点，再将链表拆分出来即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">            node.next = cur.next;</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node next = cur.next;</span><br><span class="line">            next.random = cur.random == <span class="keyword">null</span> ? <span class="keyword">null</span> : cur.random.next;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node nHead = head.next;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node next = cur.next;</span><br><span class="line">            cur.next = next.next;</span><br><span class="line">            next.next = next.next == <span class="keyword">null</span> ? <span class="keyword">null</span> : next.next.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-复杂链表的复制"><a href="#leet-code-复杂链表的复制" class="headerlink" title="leet-code 复杂链表的复制"></a><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/" target="_blank" rel="noopener">leet-code 复杂链表的复制</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉树和为某一值的路径</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定如下二叉树，以及目标和 sum = 22，</span><br><span class="line"></span><br><span class="line">              5</span><br><span class="line">             / \</span><br><span class="line">            4   8</span><br><span class="line">           /   / \</span><br><span class="line">          11  13  4</span><br><span class="line">         /  \    / \</span><br><span class="line">        7    2  5   1</span><br><span class="line">返回:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>深度优先遍历二叉树的节点即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int sum) &#123;</span><br><span class="line">        if (root == null) return res;</span><br><span class="line">        helper(root,sum,new ArrayList&lt;&gt;());</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void helper (TreeNode node,int sum,ArrayList&lt;Integer&gt; list) &#123;</span><br><span class="line">        sum -= node.val;</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        if (node.left == null &amp;&amp; node.right == null) &#123;</span><br><span class="line">            if (sum == 0) &#123;</span><br><span class="line">                res.add(new ArrayList&lt;&gt;(list));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (node.left != null) helper(node.left,sum,list);</span><br><span class="line">        if (node.right != null) helper(node.right,sum,list);</span><br><span class="line">        list.remove(list.size() - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉树中和为某一值的路径"><a href="#leet-code-二叉树中和为某一值的路径" class="headerlink" title="leet-code 二叉树中和为某一值的路径"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/" target="_blank" rel="noopener">leet-code 二叉树中和为某一值的路径</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉搜索树的后序遍历</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 <code>true</code>，否则返回 <code>false</code>。假设输入的数组的任意两个数字都互不相同。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考以下这颗二叉搜索树：</span><br><span class="line"></span><br><span class="line">     5</span><br><span class="line">    / \</span><br><span class="line">   2   6</span><br><span class="line">  / \</span><br><span class="line"> 1   3</span><br><span class="line"> </span><br><span class="line">输入: [1,6,3,2,5]</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">输入: [1,3,2,6,5]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为是二叉搜索树的后序遍历序列，所以序列的最后一个值为root 节点，且左子树全部小于节点的值，右子树全部大于节点的值，先找到序列中左子树，然后判断右子树是否全部大于 root 节点，如果大于，则开始判断该二叉搜索树的左右子树是否满足该条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyPostorder</span><span class="params">(<span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = postorder.length;</span><br><span class="line">        <span class="keyword">while</span> ( index &lt; postorder.length &amp;&amp; postorder[index] &lt; postorder[len - <span class="number">1</span>]) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = index;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (postorder[i] &lt; postorder[len-<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyPostorder(Arrays.copyOfRange(postorder,<span class="number">0</span>,index)) &amp;&amp; verifyPostorder(Arrays.copyOfRange(postorder,index,len - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉搜索树的后序遍历序列"><a href="#leet-code-二叉搜索树的后序遍历序列" class="headerlink" title="leet-code 二叉搜索树的后序遍历序列"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/" target="_blank" rel="noopener">leet-code 二叉搜索树的后序遍历序列</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-从上到下打印二叉树</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="从上到下打印二叉树-I"><a href="#从上到下打印二叉树-I" class="headerlink" title="从上到下打印二叉树 I"></a>从上到下打印二叉树 I</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树: [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">   </span><br><span class="line">[3,9,20,15,7]</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过一个队列来实现广度优先遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="从上到下打印二叉树-II"><a href="#从上到下打印二叉树-II" class="headerlink" title="从上到下打印二叉树 II"></a>从上到下打印二叉树 II</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树: [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>也是使用一个队列来存储节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="从上到下打印二叉树-III"><a href="#从上到下打印二叉树-III" class="headerlink" title="从上到下打印二叉树 III"></a>从上到下打印二叉树 III</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树: [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>增加一个 boolean 类型的 flag 用来反转数组即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                Collections.reverse(list);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">            flag = !flag;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-I-从上到下打印二叉树"><a href="#leet-code-I-从上到下打印二叉树" class="headerlink" title="leet-code I. 从上到下打印二叉树"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/" target="_blank" rel="noopener">leet-code I. 从上到下打印二叉树</a></h4></li>
<li><h4 id="leet-code-II-从上到下打印二叉树-II"><a href="#leet-code-II-从上到下打印二叉树-II" class="headerlink" title="leet-code II. 从上到下打印二叉树 II"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">leet-code II. 从上到下打印二叉树 II</a></h4></li>
<li><h4 id="leet-code-III-从上到下打印二叉树-III"><a href="#leet-code-III-从上到下打印二叉树-III" class="headerlink" title="leet-code III. 从上到下打印二叉树 III"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/" target="_blank" rel="noopener">leet-code III. 从上到下打印二叉树 III</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-栈的压入、弹出序列</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class="line">输出：true</span><br><span class="line">解释：我们可以按以下顺序执行：</span><br><span class="line">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class="line">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br><span class="line"></span><br><span class="line">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</span><br><span class="line">输出：false</span><br><span class="line">解释：1 不能在 2 之前弹出。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以通过一个栈来模拟压出弹出的动作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (popped.length == <span class="number">0</span> || pushed.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; pushed.length) &#123;</span><br><span class="line">            stack.push(pushed[i]);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[j])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-栈的压入、弹出序列"><a href="#leet-code-栈的压入、弹出序列" class="headerlink" title="leet-code 栈的压入、弹出序列"></a><a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/" target="_blank" rel="noopener">leet-code 栈的压入、弹出序列</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-包含min函数的栈</title>
    <url>/2020/03/05/%E5%89%91%E6%8C%87offer-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.min();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.min();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过一个辅助栈来存储最小数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line">    Stack&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack.push(x);</span><br><span class="line">        <span class="keyword">if</span> (!minStack.isEmpty()) &#123;</span><br><span class="line">            minStack.push(Math.min(minStack.peek(),x));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-包含min函数的栈"><a href="#leet-code-包含min函数的栈" class="headerlink" title="leet-code 包含min函数的栈"></a><a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/" target="_blank" rel="noopener">leet-code 包含min函数的栈</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/2020/03/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）中，定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
<a id="more"></a>

<p>这算法体现了几个设计原则：</p>
<ul>
<li>把变化的代码从不变的代码中分离出来；</li>
<li>针对接口编程而不是具体类（定义了策略接口）；</li>
<li>多用组合/聚合，少用继承（客户通过组合方式使用策略）。</li>
</ul>
<p>策略模式可以让算法独立于使用它的客户端。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>假设有一群鸭子，里面有野鸭、北京鸭、玩具鸭，但是他们能飞行的能力不同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        PekingDuck pekingDuck = <span class="keyword">new</span> PekingDuck();</span><br><span class="line">        pekingDuck.display();</span><br><span class="line">        pekingDuck.fly();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToyDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> NoFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是玩具鸭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PekingDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PekingDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> BadFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是北京鸭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WildDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WildDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> GoodFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是野鸭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flyBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flyBehavior.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不会飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞行技术一般"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞行技术高超"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-观察者模式</title>
    <url>/2020/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p>
<p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p>
<a id="more"></a>

<p>例如：微信公众号，如果一个用户订阅了某个公众号，那么便会收到公众号发来的消息，那么，公众号就是【被观察者】，而用户就是【观察者】。</p>
<h3 id="观察者模式中的角色"><a href="#观察者模式中的角色" class="headerlink" title="观察者模式中的角色"></a>观察者模式中的角色</h3><ul>
<li>抽象主题角色（Subject）</li>
<li>具体主题角色（ConcreteSubject）</li>
<li>抽象观察者角色（Observer）</li>
<li>具体观察者角色（ConcreteObserver）</li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>例如：有一个气象站，当天气的温度、湿度、气压发生变化的时候，我们就能收到气象站发来的信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        CurrentObserver currentObserver = <span class="keyword">new</span> CurrentObserver();</span><br><span class="line"></span><br><span class="line">        weatherData.registryObserver(currentObserver);</span><br><span class="line"></span><br><span class="line">        weatherData.setData(<span class="number">30</span>,<span class="number">200</span>,<span class="number">150</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体主题角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> t;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> p;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> h;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//保存所有的观察者</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">double</span> t, <span class="keyword">double</span> p, <span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">        <span class="keyword">this</span>.p = p;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">        dataChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observers.contains(observer)) &#123;</span><br><span class="line">            observers.remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(t,p,h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主题接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> t;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> p;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> h;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">double</span> t, <span class="keyword">double</span> p, <span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">        <span class="keyword">this</span>.p = p;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"今天的温度是"</span>+t);</span><br><span class="line">        System.out.println(<span class="string">"今天的气压是"</span>+p);</span><br><span class="line">        System.out.println(<span class="string">"今天的湿度是"</span>+h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">double</span> t, <span class="keyword">double</span> p, <span class="keyword">double</span> h)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-顺时针打印矩阵</title>
    <url>/2020/03/04/%E5%89%91%E6%8C%87offer-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br><span class="line"></span><br><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>只要考虑好边界问题即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] spiralOrder(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> r1 = <span class="number">0</span>,r2 = matrix.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">0</span>,c2 = matrix[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length*matrix[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (r1 &lt;= r2 &amp;&amp; c1 &lt;= c2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = c1; i &lt;= c2; i++) &#123;</span><br><span class="line">                res[index++] = matrix[r1][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r1 + <span class="number">1</span>; i &lt;= r2 ; i++) &#123;</span><br><span class="line">                res[index++] = matrix[i][c2];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r1 &lt; r2) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = c2 - <span class="number">1</span> ; i &gt;= c1 ; i--) &#123;</span><br><span class="line">                    res[index++] = matrix[r2][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c1 &lt; c2) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = r2 - <span class="number">1</span>; i &gt; r1 ; i--) &#123;</span><br><span class="line">                    res[index++] = matrix[i][c1];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            c1++;</span><br><span class="line">            r1++;</span><br><span class="line">            c2--;</span><br><span class="line">            r2--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-顺时针打印矩阵"><a href="#leet-code-顺时针打印矩阵" class="headerlink" title="leet-code 顺时针打印矩阵"></a><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" target="_blank" rel="noopener">leet-code 顺时针打印矩阵</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-对称的二叉树</title>
    <url>/2020/03/04/%E5%89%91%E6%8C%87offer-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br><span class="line">但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line">   \   \</span><br><span class="line">   3    3</span><br><span class="line">   </span><br><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br><span class="line"></span><br><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper1(root.left,root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper1</span><span class="params">(TreeNode node1, TreeNode node2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="keyword">null</span> &amp;&amp; node2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (node2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1.val == node2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> helper1(node1.left,node2.right) &amp;&amp; helper1(node1.right,node2.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-对称的二叉树"><a href="#leet-code-对称的二叉树" class="headerlink" title="leet-code 对称的二叉树"></a><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/" target="_blank" rel="noopener">leet-code 对称的二叉树</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉树的镜像</title>
    <url>/2020/03/04/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如输入：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">镜像输出：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br><span class="line"></span><br><span class="line">输入：root = [4,2,7,1,3,6,9]</span><br><span class="line">输出：[4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mirrorTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        root.left = mirrorTree(root.right);</span><br><span class="line">        root.right = mirrorTree(root.left);    </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉树的镜像"><a href="#leet-code-二叉树的镜像" class="headerlink" title="leet-code 二叉树的镜像"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/" target="_blank" rel="noopener">leet-code 二叉树的镜像</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-树的子结构</title>
    <url>/2020/03/04/%E5%89%91%E6%8C%87offer-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>
<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line">给定的树 A:</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \</span><br><span class="line"> 1   2</span><br><span class="line">给定的树 B：</span><br><span class="line"></span><br><span class="line">   4 </span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line"></span><br><span class="line">输入：A = [1,2,3], B = [3,1]</span><br><span class="line">输出：false</span><br><span class="line"></span><br><span class="line">输入：A = [3,4,5,1,2], B = [4,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过递归不停的来判断树 A 的当前节点是否为树 B 的根节点。如果是，则判断子节点是否相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || B == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(A,B) || isSubStructure(A.left,B) || isSubStructure(A.right,B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode A,TreeNode B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (B == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> A.val == B.val &amp;&amp; helper(A.left,B.left) &amp;&amp; helper(A.right,B.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-树的子结构"><a href="#leet-code-树的子结构" class="headerlink" title="leet-code 树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/" target="_blank" rel="noopener">leet-code 树的子结构</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-合并有序链表</title>
    <url>/2020/03/04/%E5%89%91%E6%8C%87offer-%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以根据归并排序的思路来考虑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-合并两个排序的链表"><a href="#leet-code-合并两个排序的链表" class="headerlink" title="leet-code 合并两个排序的链表"></a><a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/" target="_blank" rel="noopener">leet-code 合并两个排序的链表</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>leet-code_994.腐烂的橘子</title>
    <url>/2020/03/04/leet-code-994-%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/</url>
    <content><![CDATA[<h2 id="leet-code-994-腐烂的橘子"><a href="#leet-code-994-腐烂的橘子" class="headerlink" title="leet-code_994.腐烂的橘子"></a>leet-code_994.腐烂的橘子</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在给定的网格中，每个单元格可以有以下三个值之一：</p>
<ul>
<li>值 0 代表空单元格；</li>
<li>值 1 代表新鲜橘子；</li>
<li>值 2 代表腐烂的橘子。</li>
</ul>
<p>每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</p>
<p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</p>
<a id="more"></a>

<p><img src="/2020/03/04/leet-code-994-腐烂的橘子/1.png" alt></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[[2,1,1],[1,1,0],[0,1,1]]</span><br><span class="line">输出：4</span><br><span class="line"></span><br><span class="line">输入：[[2,1,1],[0,1,1],[1,0,1]]</span><br><span class="line">输出：-1</span><br><span class="line">解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据图的示意，这道题其实可以使用广度优先遍历，先遍历整个数组，将所有值为2的元素，把他们的坐标按照     <code>i * grid[0].length + j</code>的形式存进队列，并统计值为1的元素个数。然后模拟腐烂的橘子感染其它好的橘子。</p>
<p>最后判断好橘子的个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">if</span> (grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> m = grid.length,n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    queue.offer(i*n+j);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            time++;</span><br><span class="line">            <span class="keyword">int</span> siez = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; siez; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = queue.poll();</span><br><span class="line">                <span class="keyword">int</span> x = p / n;</span><br><span class="line">                <span class="keyword">int</span> y = p % n;</span><br><span class="line">                <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x-<span class="number">1</span>][y]==<span class="number">1</span>) &#123;</span><br><span class="line">                    cnt--;</span><br><span class="line">                    grid[x-<span class="number">1</span>][y] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer((x-<span class="number">1</span>)*n+y);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (x + <span class="number">1</span> &lt; m &amp;&amp; grid[x+<span class="number">1</span>][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt--;</span><br><span class="line">                    grid[x+<span class="number">1</span>][y] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer((x+<span class="number">1</span>)*n+y);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y-<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt--;</span><br><span class="line">                    grid[x][y-<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer(x*n+y-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y + <span class="number">1</span> &lt; n &amp;&amp; grid[x][y+<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt--;</span><br><span class="line">                    grid[x][y+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer(x*n+y+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt == <span class="number">0</span>? time:-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><h4 id="leet-code-腐烂的橘子"><a href="#leet-code-腐烂的橘子" class="headerlink" title="leet-code 腐烂的橘子"></a><a href="https://leetcode-cn.com/problems/rotting-oranges/" target="_blank" rel="noopener">leet-code 腐烂的橘子</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>leet-code</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA常用容器</title>
    <url>/2020/03/04/JAVA%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h1><p>JAVA中的容器主要是基于Collection 和 Map 这两个接口，Collection 是存储着对象的集合，Map 是存储键值对的映射表。</p>
<a id="more"></a>

<h2 id="1-1-Collection"><a href="#1-1-Collection" class="headerlink" title="1.1 Collection"></a>1.1 Collection</h2><h3 id="1-1-1-List"><a href="#1-1-1-List" class="headerlink" title="1.1.1 List"></a>1.1.1 List</h3><ul>
<li>ArrayList：底层实现是 Object 数组，支持随机访问。</li>
<li>Vector：底层实现是 Object 数组，但它是线程安全的。</li>
<li>LinkedList：基于双向链表实现（在JDK1.7之前，底层实现是双向循环链表），只能顺序访问，但是可以快速地插入和删除元素。</li>
</ul>
<h3 id="1-1-2-Queue"><a href="#1-1-2-Queue" class="headerlink" title="1.1.2 Queue"></a>1.1.2 Queue</h3><ul>
<li>LinkedList：可以用它来实现双向队列。</li>
<li>PriorityQueue：基于小顶堆结构实现，可以用来实现优先级队列。</li>
</ul>
<h3 id="1-1-3-Set"><a href="#1-1-3-Set" class="headerlink" title="1.1.3 Set"></a>1.1.3 Set</h3><ul>
<li>HashSet：基于HashMap 实现，所有的值都存储在键上，值都为 null，支持快速查找，但是不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>
<li>LinedHashSet：基于 LinedHashMap实现。</li>
<li>TreeSet：基于 TreeMap 实现。</li>
</ul>
<h2 id="1-2-Map"><a href="#1-2-Map" class="headerlink" title="1.2 Map"></a>1.2 Map</h2><ul>
<li>HashMap：底层基于哈希表实现。</li>
<li>HashTable：底层也是基于哈希表，但它是线程安全的。</li>
<li>LinkedHashMap：底层也是使用哈希表实现，但节点是一个双向链表节点，用来维护元素的顺序。</li>
<li>TreeMap：底层使用红黑树实现。</li>
</ul>
<h1 id="2-常用容器的具体介绍"><a href="#2-常用容器的具体介绍" class="headerlink" title="2. 常用容器的具体介绍"></a>2. 常用容器的具体介绍</h1><h2 id="2-1-ArrayList"><a href="#2-1-ArrayList" class="headerlink" title="2.1 ArrayList"></a>2.1 ArrayList</h2><p>因为 ArrayList 的底层是基于数组实现的，所以支持快速随机访问。该类实现了 RandomAccess 接口，标识着它执行快速随机访问。</p>
<p>数组的初始大小为10。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-1-添加"><a href="#2-1-1-添加" class="headerlink" title="2.1.1 添加"></a>2.1.1 添加</h3><p>ArrayList 添加元素的操作很简单，首先使用<code>ensureCapacityInternal()</code>方法来确保容量是足够的，如果足够，则直接在数组最后一个元素的后面添加即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-扩容"><a href="#2-1-2-扩容" class="headerlink" title="2.1.2 扩容"></a>2.1.2 扩容</h3><p>因为添加元素的时候使用 <code>ensureCapacityInternal()</code>方法来确保数组的容量是足够的，如果不够，则使用 <code>grow()</code>方法来进行扩容，新的容量大小为<code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，也就是原来的1.5倍，扩容的时候会使用 <code>Arrays.CopyOf()</code>来把原数组复制到新的数组中。这个操作的代价很高，因此最好在创建的时候就指定大概的容量大小，减少扩容次数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">* number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">    newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-删除元素"><a href="#2-1-3-删除元素" class="headerlink" title="2.1.3 删除元素"></a>2.1.3 删除元素</h3><p>ArrayList 删除元素的代价也特别的高，会使用<code>System.arraycopy()</code>方法来将index+1 后面的元素都复制到 index的位置上，该操作的时间复杂度为 O(N)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Removes the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">* Shifts any subsequent elements to the left (subtracts one from their</span></span><br><span class="line"><span class="comment">* indices).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the element that was removed from the list</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">    numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h2><p>LinkedList 的底层是基于双向链表实现的，因此它有一个静态内部类为节点类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.item = element;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">    <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/04/JAVA常用容器/1.png" alt></p>
<h3 id="2-2-1-与-ArrayList-的比较"><a href="#2-2-1-与-ArrayList-的比较" class="headerlink" title="2.2.1 与 ArrayList 的比较"></a>2.2.1 与 ArrayList 的比较</h3><ul>
<li>ArrayList 支持随机快速访问，而 LinkedList 只能顺序访问。</li>
<li>ArrayList 删除元素的代价很高，需要移动数组，但是 LinkedList 只需修改节点的前后指针即可。</li>
</ul>
<h2 id="2-3-Vector"><a href="#2-3-Vector" class="headerlink" title="2.3 Vector"></a>2.3 Vector</h2><h3 id="2-3-1-Synchronized"><a href="#2-3-1-Synchronized" class="headerlink" title="2.3.1 Synchronized"></a>2.3.1 Synchronized</h3><p>它的实现与 ArrayList 相似，但是使用了 synchronized 对方法进行修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-扩容"><a href="#2-3-2-扩容" class="headerlink" title="2.3.2 扩容"></a>2.3.2 扩容</h3><p>Vector 的构造方法可以传入一个 capacityIncrement 参数，当底层数组需要扩容的时候，使数组的容量增加 capacityIncrement 大小。如果这个参数为0，则扩容的时候，容量增加为原来的2倍。如果不指定数组容量大小，则默认为10。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">    initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">    capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">    newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-与-ArrayList-的比较"><a href="#2-3-3-与-ArrayList-的比较" class="headerlink" title="2.3.3  与 ArrayList 的比较"></a>2.3.3  与 ArrayList 的比较</h3><ul>
<li>因为 Vector 的方法上都使用了 Synchronized 关键字，因此都是线程安全的，但是开销会更大，访问也更慢。</li>
<li>Vector 的扩容默认为原来容量的两倍，ArrayList 则是扩容为原来的 1.5 倍。</li>
</ul>
<h3 id="2-3-4-线程安全的替代方案"><a href="#2-3-4-线程安全的替代方案" class="headerlink" title="2.3.4 线程安全的替代方案"></a>2.3.4 线程安全的替代方案</h3><ol>
<li>使用 Collections.synchronizedList()方法，可以得到一个线程安全的 ArrayList。</li>
<li>使用并发容器 CopyOnWriteArrayList</li>
</ol>
<h2 id="2-4-CopyOnWriteArrayList"><a href="#2-4-CopyOnWriteArrayList" class="headerlink" title="2.4 CopyOnWriteArrayList"></a>2.4 CopyOnWriteArrayList</h2><h3 id="2-4-1-读写分离"><a href="#2-4-1-读写分离" class="headerlink" title="2.4.1 读写分离"></a>2.4.1 读写分离</h3><p>根据这个容器的名字就可以大概看出，它的写操作是在一个复制的数组上进行的，而它的读操作还是在原始的数组上进行，这样就做到了读写分离，互不干扰。</p>
<p>并且它的写操作会加锁，从而也保证了并发写入时，数据不会丢失。当写操作结束后，会用新的数组来代替原始数组。</p>
<p>读操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Object[] elements = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = elements.length;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; len || index &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+</span><br><span class="line">                                          <span class="string">", Size: "</span>+len);</span><br><span class="line">    Object[] newElements;</span><br><span class="line">    <span class="keyword">int</span> numMoved = len - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">      newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      newElements = <span class="keyword">new</span> Object[len + <span class="number">1</span>];</span><br><span class="line">      System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">      System.arraycopy(elements, index, newElements, index + <span class="number">1</span>,</span><br><span class="line">                       numMoved);</span><br><span class="line">    &#125;</span><br><span class="line">    newElements[index] = element;</span><br><span class="line">    setArray(newElements);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Object[] elements = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = elements.length;</span><br><span class="line">    E oldValue = get(elements, index);</span><br><span class="line">    <span class="keyword">int</span> numMoved = len - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">      setArray(Arrays.copyOf(elements, len - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      Object[] newElements = <span class="keyword">new</span> Object[len - <span class="number">1</span>];</span><br><span class="line">      System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">      System.arraycopy(elements, index + <span class="number">1</span>, newElements, index,</span><br><span class="line">                       numMoved);</span><br><span class="line">      setArray(newElements);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-使用场景"><a href="#2-4-2-使用场景" class="headerlink" title="2.4.2 使用场景"></a>2.4.2 使用场景</h3><p>CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。但是它也有一些缺陷：</p>
<ul>
<li>内存占用：因为在写操作的时候会创建一个新的数组，让内存的占用变为2倍，因此写操作过多的时候，会不停创建数组，又删除数组。</li>
<li>数据不一致：当读写一起操作的时候，读操作只能读到原来的数据，并不能实时的读到新数据。</li>
</ul>
<h2 id="2-5-HashMap-JDK1-8"><a href="#2-5-HashMap-JDK1-8" class="headerlink" title="2.5 HashMap(JDK1.8)"></a>2.5 HashMap(JDK1.8)</h2><h3 id="2-5-1-Node"><a href="#2-5-1-Node" class="headerlink" title="2.5.1 Node"></a>2.5.1 Node</h3><p>HashMap 中使用的是一个 Node 类型的数组，Node 存储着键值对。这个结构中包含了4个字段，其中一个字段是 Node 类型的next 指针，HashMap 中散列值相同的元素会形成一个链表，这也是 HashMap 解决 hash 冲突的办法，即拉链法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">  <span class="keyword">final</span> K key;</span><br><span class="line">  V value;</span><br><span class="line">  Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">  Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hash = hash;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">    V oldValue = value;</span><br><span class="line">    value = newValue;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">      Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">      <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">          Objects.equals(value, e.getValue()))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-get操作"><a href="#2-5-2-get操作" class="headerlink" title="2.5.2 get操作"></a>2.5.2 get操作</h3><p>通过 key 得到对应的位置后，可以得到 Node 所在链表头节点的位置，再判断该节点是否为树节点（在JDK1.8当中，当散列表中某一个链表长度超过8的时候，该链表会转换为红黑树这种数据结构），如果不是，则遍历该链表寻找与 key 相对应的 Node，如果找到了则返回该节点的 Value ，没有找到则返回 null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">	Node&lt;K,V&gt; e;</span><br><span class="line">  	<span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements Map.get and related methods</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-3-put操作"><a href="#2-5-3-put操作" class="headerlink" title="2.5.3 put操作"></a>2.5.3 put操作</h3><p>put 操作与 get 操作一样，通过 key 计算出对应的位置，然后查看该位置是否有节点，如果有，则从尾部插入（在 JDK 1.7 中，采用的是头插法，也就是新的节点成为链表头，且新节点的next 指向旧的节点头）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,<span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">	Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">    	n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">    	tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    	Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">        	e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">        	e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">            	<span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                	p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                	treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">        	V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">            	e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    	resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-4-扩容操作"><a href="#2-5-4-扩容操作" class="headerlink" title="2.5.4 扩容操作"></a>2.5.4 扩容操作</h3><p>在 put 操作中有一个关键的方法<code>resize()</code>，就是当数组中链表或者树根节点的个数大于了负载因子<code>threshold</code>时，则会进行扩容操作。每次扩容后，数组的长度为原来的2倍，并会把旧数组中的键值对全部进行位置计算，并放入新的数组中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">  Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">  <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">  <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">  <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">      threshold = Integer.MAX_VALUE;</span><br><span class="line">      <span class="keyword">return</span> oldTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">             oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">      newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">    newCap = oldThr;</span><br><span class="line">  <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">    newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">    newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">              (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">  &#125;</span><br><span class="line">  threshold = newThr;</span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">  Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">  table = newTab;</span><br><span class="line">  <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">      Node&lt;K,V&gt; e;</span><br><span class="line">      <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">          newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">          ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">          Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">          Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">          Node&lt;K,V&gt; next;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            next = e.next;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">              loTail = e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">              hiTail = e;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">          <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">            newTab[j] = loHead;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">            newTab[j + oldCap] = hiHead;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-5-链表转红黑树"><a href="#2-5-5-链表转红黑树" class="headerlink" title="2.5.5 链表转红黑树"></a>2.5.5 链表转红黑树</h3><p>从 JDK 1.8 开始，一个链表的长度大于等于 8 时会将链表转换为红黑树。</p>
<h3 id="2-5-6-与HashTable比较"><a href="#2-5-6-与HashTable比较" class="headerlink" title="2.5.6 与HashTable比较"></a>2.5.6 与HashTable比较</h3><ul>
<li>Hashtable 使用 synchronized 来进行同步，因此是线程安全的，但是HashMao是线程不安全的。</li>
<li>HashMap 可以插入键为 null 的 Node，但是HashTable 不允许键为 null 。</li>
</ul>
<h2 id="2-6-ConcurrentHashMap"><a href="#2-6-ConcurrentHashMap" class="headerlink" title="2.6 ConcurrentHashMap"></a>2.6 ConcurrentHashMap</h2><h3 id="2-6-1-JDK-1-7"><a href="#2-6-1-JDK-1-7" class="headerlink" title="2.6.1 JDK 1.7"></a>2.6.1 JDK 1.7</h3><p><img src="/2020/03/04/JAVA常用容器/2.png" alt></p>
<p>ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。而 Segment 又继承自 ReentrantLock。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-6-1-1-size操作"><a href="#2-6-1-1-size操作" class="headerlink" title="2.6.1.1 size操作"></a>2.6.1.1 size操作</h4><p>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。</p>
<p>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。</p>
<p>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。</p>
<p>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。</p>
<p>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></span><br><span class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="keyword">long</span> sum;         <span class="comment">// sum of modCounts</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0L</span>;   <span class="comment">// previous sum</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// first iteration isn't retry</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 超过尝试次数，则对每个 Segment 加锁</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum = <span class="number">0L</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sum += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.count;</span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 连续两次得到的结果一致，则认为这个结果是正确的</span></span><br><span class="line">            <span class="keyword">if</span> (sum == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-2-JDK-1-8"><a href="#2-6-2-JDK-1-8" class="headerlink" title="2.6.2 JDK 1.8"></a>2.6.2 JDK 1.8</h3><p>JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。</p>
<p>JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</p>
<p>并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。</p>
<p>如图所示：（TreeBin: 红黑二叉树节点 Node: 链表节点）</p>
<p><img src="/2020/03/04/JAVA常用容器/3.png" alt></p>
<h2 id="2-7-LinkedHashMap"><a href="#2-7-LinkedHashMap" class="headerlink" title="2.7 LinkedHashMap"></a>2.7 LinkedHashMap</h2><p>该结构继承自HashMap，因此和 HashMap 一样，具有快速查找的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  Entry&lt;K,V&gt; before, after;</span><br><span class="line">  Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">  	<span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The head (eldest) of the doubly linked list.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The tail (youngest) of the doubly linked list.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">* for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure>

<p>它的内部维护了一个双向链表，用来维护插入顺序或者LRU顺序</p>
<p><code>accessOrder</code>这个属性决定了顺序，默认为 false ，也就是插入顺序，当它为 true 的时候，维护的是 LRU 顺序。</p>
<h3 id="2-7-1-afterNodeAccess"><a href="#2-7-1-afterNodeAccess" class="headerlink" title="2.7.1 afterNodeAccess()"></a>2.7.1 afterNodeAccess()</h3><p>当一个节点被访问时，如果 accessOrder 为 true，则会将该节点移到链表尾部。也就是说指定为 LRU 顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">	LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">    	LinkedHashMap.Entry&lt;K,V&gt; p = (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">        	head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">        	a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">        	head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        	p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-2-afterNodeInsertion"><a href="#2-7-2-afterNodeInsertion" class="headerlink" title="2.7.2 afterNodeInsertion()"></a>2.7.2 afterNodeInsertion()</h3><p>在 put 等操作之后执行，当 removeEldestEntry() 方法返回 true 时会移除最晚的节点，也就是链表首部节点 first。</p>
<p>evict 只有在构建 Map 的时候才为 false，在这里为 true。</p>
<p>removeEldestEntry() 默认为 false，如果需要让它为 true，需要继承 LinkedHashMap 并且覆盖这个方法的实现，这在实现 LRU 的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">	LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">    	K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-命令模式</title>
    <url>/2020/03/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计。</p>
<a id="more"></a>

<p>命名模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</p>
<p>在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求(即命名)，同时命令模式也支持可撤销的操作。</p>
<p>通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：将军（命令发布者）、士兵（命令的具体执行者）、命令(连接将军和士兵)。Invoker是调用者（将军），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象。</p>
<h3 id="命令模式的使用"><a href="#命令模式的使用" class="headerlink" title="命令模式的使用"></a>命令模式的使用</h3><p>将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的execute()方法就可以让接收者工作，而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：”请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用。</p>
<p>可以设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令。</p>
<p>可以实现对请求的撤销和重做。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>假设一个遥控器上有开灯、关灯、和撤销三个按钮，使用命令模式的形式来实现它。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(receiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(receiver);</span><br><span class="line"></span><br><span class="line">        RemoteController controller = <span class="keyword">new</span> RemoteController();</span><br><span class="line">        controller.setCommand(<span class="number">0</span>,lightOnCommand,lightOffCommand);</span><br><span class="line">        controller.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        controller.undoButtonWasPushed();</span><br><span class="line">        controller.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        controller.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line"></span><br><span class="line">    Command undoCommand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给按钮设置需要的命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> no, Command onCommand, Command offCommand)</span> </span>&#123;</span><br><span class="line">        onCommands[no] = onCommand;</span><br><span class="line">        offCommands[no] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        onCommands[no].execute();</span><br><span class="line">        undoCommand = onCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        offCommands[no].execute();</span><br><span class="line">        undoCommand = offCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButtonWasPushed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空命令也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没有用空命令，我们每按下一个按键都要判空，这给我们编码带来一定的麻烦。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合receiver</span></span><br><span class="line">    Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        receiver.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合receiver</span></span><br><span class="line">    Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        receiver.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯打开了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关闭了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-代理模式</title>
    <url>/2020/03/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。</p>
<p>被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。</p>
<a id="more"></a>

<p>代理模式有不同的形式, 主要有三种 静态代理、动态代理 (JDK代理、接口代理)和 Cglib代理 (可以在内存动态的创建对象，而不需要实现接口， 他是属于动态代理的范畴) 。</p>
<h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h3><p>静态代理在使用时,需要定义接口或者父类，被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类。</p>
<h4 id="1-1-优缺点"><a href="#1-1-优缺点" class="headerlink" title="1.1 优缺点"></a>1.1 优缺点</h4><p>优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能进行拓展。</p>
<p>缺点：因为代理对象需要与目标对象实现一样的接口，所有会有很多代理类，一旦接口增加了方法，目标对象和代理类都需要增加方法。</p>
<h4 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TeacherDao对象</span></span><br><span class="line">        TeacherDao teacherDao = <span class="keyword">new</span> TeacherDao();</span><br><span class="line">        <span class="comment">//创建TeacherDaoProxy代理对象</span></span><br><span class="line">        TeacherDaoProxy proxy = <span class="keyword">new</span> TeacherDaoProxy(teacherDao);</span><br><span class="line">        <span class="comment">//将Teacher对象交给代理对象来代理</span></span><br><span class="line">        proxy.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherDaoProxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ITeacherDao target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherDaoProxy</span><span class="params">(ITeacherDao target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始代理"</span>);</span><br><span class="line">        target.teach();</span><br><span class="line">        System.out.println(<span class="string">"结束代理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始上课"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-JDK-动态代理"><a href="#2-JDK-动态代理" class="headerlink" title="2. JDK 动态代理"></a>2. JDK 动态代理</h3><p>不再需要手动的创建代理对象，而是通过代理对象工厂来创建代理对象，目标对象依然要实现接口，否则不能用动态代理。代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象。</p>
<h4 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ITeacherDAO teacherDAO = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line">        ITeacherDAO proxy = (ITeacherDAO) <span class="keyword">new</span> ProxyFactory(teacherDAO).getProxyInstance();</span><br><span class="line"></span><br><span class="line">        proxy.teach();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"开始代理"</span>);</span><br><span class="line">                Object res = method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">"代理结束"</span>);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师授课中....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDAO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Cglib-动态代理"><a href="#3-Cglib-动态代理" class="headerlink" title="3. Cglib 动态代理"></a>3. Cglib 动态代理</h3><p>静态代理和JDK代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候可使用目标对象子类来实现代理-这就是Cglib代理。</p>
<p>Cglib代理也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将Cglib代理归属到动态代理。</p>
<p>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-外观模式</title>
    <url>/2020/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>外观模式（Facade），也叫过程模式：外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<p>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节。</p>
<a id="more"></a>

<p>外观模式的类图：</p>
<p><img src="/2020/03/02/设计模式-外观模式/1.png" alt></p>
<h3 id="外观模式的角色"><a href="#外观模式的角色" class="headerlink" title="外观模式的角色"></a>外观模式的角色</h3><ul>
<li>外观类(Facade): 为调用端提供统一的调用接口, 外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适当子系统对象</li>
<li>调用者(Client): 外观接口的调用者</li>
<li>子系统的集合：指模块或者子系统，处理Facade 对象指派的任务，他是功能的实际提供者</li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>例如家庭影院，要开启一个家庭影院要开启很多的设备，比如投影仪、音响、关闭灯光等等步骤，使用外观模式后，我们只用关心家庭影院的开启，而不用去关心具体的实现步骤。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        </span><br><span class="line">      	facade.ready();</span><br><span class="line">        facade.play();</span><br><span class="line">        facade.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Projector projector;</span><br><span class="line">    <span class="keyword">private</span> Popcorn popcorn;</span><br><span class="line">    <span class="keyword">private</span> DVDPlayer dvdPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.projector = Projector.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.popcorn = Popcorn.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.dvdPlayer = DVDPlayer.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        projector.on();</span><br><span class="line">        popcorn.on();</span><br><span class="line">        dvdPlayer.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        projector.Projector();</span><br><span class="line">        popcorn.pop();</span><br><span class="line">        dvdPlayer.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        projector.off();</span><br><span class="line">        popcorn.off();</span><br><span class="line">        dvdPlayer.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Projector instance = <span class="keyword">new</span> Projector();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Projector</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Projector <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Projector on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Projector off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Projector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Projector is Projector"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Popcorn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Popcorn instance = <span class="keyword">new</span> Popcorn();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Popcorn</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Popcorn <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Popcorn on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Popcorn off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Popcorn pop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DVDPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DVDPlayer instance = <span class="keyword">new</span> DVDPlayer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DVDPlayer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DVDPlayer <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd play"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰者模式</title>
    <url>/2020/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。就增加功能来说，装饰者模式比生成子类更为灵活。</p>
<a id="more"></a>

<p>装饰者模式的类图结构：</p>
<p><img src="/2020/03/02/设计模式-装饰者模式/1.png" alt></p>
<h3 id="装饰者模式中的角色"><a href="#装饰者模式中的角色" class="headerlink" title="装饰者模式中的角色"></a>装饰者模式中的角色</h3><ul>
<li>抽象构件(Component)角色：给出一个抽象接口，以规范准备接收附加责任的对象。</li>
<li>具体构件(Concrete Component)角色：定义一个将要接收附加责任的类。</li>
<li>装饰(Decorator)角色：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。</li>
<li>具体装饰(Concrete Decorator)角色：负责给构件对象“贴上”附加的责任。</li>
</ul>
<h3 id="为什么使用装饰者而不使用继承"><a href="#为什么使用装饰者而不使用继承" class="headerlink" title="为什么使用装饰者而不使用继承"></a>为什么使用装饰者而不使用继承</h3><ol>
<li>装饰者模式可以提供比继承更多的灵活性。装饰者模式允许动态增加或删除一个装饰的功能，继承则需要在此之前就确定好对应的类。</li>
<li>比如模拟一个人穿衣服的例子，穿衣服的顺序是不确定的，也就是说又很多种排列组合的方式，如果使用继承就需要考虑很多的情况并准备很多的类，而使用装饰者模式就可以在使用的时候动态的创建组合不同的行为。</li>
</ol>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>例如：咖啡的种类有很多种，意式咖啡、美式咖啡等等，可以添加的配料也有很多，比如牛奶，巧克力，甚至可以添加多个牛奶和多个巧克力，此时应该怎么怎么计算价格呢？</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Drink order = <span class="keyword">new</span> LongBlack();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line">        System.out.println(<span class="string">"费用"</span>+order.cost());</span><br><span class="line"></span><br><span class="line">        order = <span class="keyword">new</span> Milk(order);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line">        System.out.println(<span class="string">"费用"</span>+order.cost());</span><br><span class="line"></span><br><span class="line">        order = <span class="keyword">new</span> Cholocatee(order);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line">        System.out.println(<span class="string">"费用"</span>+order.cost());</span><br><span class="line"></span><br><span class="line">        order = <span class="keyword">new</span> Cholocatee(order);</span><br><span class="line">        System.out.println(<span class="string">"描述="</span>+order.getDes());</span><br><span class="line">        System.out.println(<span class="string">"费用"</span>+order.cost());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的装饰角色，这里的体现就是牛奶，巧克力等配料</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setDes(<span class="string">"豆浆"</span>);</span><br><span class="line">        setPrice(<span class="number">1.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setDes(<span class="string">"牛奶"</span>);</span><br><span class="line">        setPrice(<span class="number">2.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cholocatee</span> <span class="keyword">extends</span> <span class="title">Decocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cholocatee</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">        setDes(<span class="string">"巧克力"</span>);</span><br><span class="line">        setPrice(<span class="number">3.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decocator</span> <span class="keyword">extends</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drink drink;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decocator</span><span class="params">(Drink drink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.drink = drink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + drink.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes() + <span class="string">" "</span> + <span class="keyword">super</span>.getPrice() + <span class="string">"&amp;&amp;"</span> + drink.getDes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体构件角色，用于接收附加的责任，这里就是代表有很多种类的咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShortBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"shortblack"</span>);</span><br><span class="line">        setPrice(<span class="number">4.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"longblack"</span>);</span><br><span class="line">        setPrice(<span class="number">5.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"意式Espresso"</span>);</span><br><span class="line">        setPrice(<span class="number">6.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个抽象的Drink类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String des;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-反转链表</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用三指针即可完成操作，建议画图并配合代码理解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">         ListNode cur = head;</span><br><span class="line">         ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">         ListNode next = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">             next = cur.next;</span><br><span class="line">             cur.next = pre;</span><br><span class="line">             pre = cur;</span><br><span class="line">             cur = next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-反转链表"><a href="#leet-code-反转链表" class="headerlink" title="leet-code 反转链表"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">leet-code 反转链表</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-链表中倒数第k个节点</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用两个指针即可，寻找倒数第几个节点，就让第一个指针先移动几次，然后两个指针一起移动，当第一个指针为null时，第二个指针指向的节点就是倒数第几个节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-链表中倒数第k个节点"><a href="#leet-code-链表中倒数第k个节点" class="headerlink" title="leet-code 链表中倒数第k个节点"></a><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener">leet-code 链表中倒数第k个节点</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-调整数组顺序使奇数位于偶数前面</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：[1,3,2,4] </span><br><span class="line">注：[3,1,2,4] 也是正确的答案之一。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首尾双指针：在 l &lt; r 的前提下，如果 num[l] 为偶数，nums[r] 为奇数，则两数对换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] exchange(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= r) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[l];</span><br><span class="line">            nums[l] = nums[r];</span><br><span class="line">            nums[r] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为结果不考虑相对位置，因此，可以使用辅助数组外加两个指针来完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] exchange(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                res[r--] = nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res[l++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-调整数组顺序使奇数位于偶数前面"><a href="#leet-code-调整数组顺序使奇数位于偶数前面" class="headerlink" title="leet-code 调整数组顺序使奇数位于偶数前面"></a><a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/" target="_blank" rel="noopener">leet-code 调整数组顺序使奇数位于偶数前面</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-正则表达式匹配</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">s = &quot;aab&quot;</span><br><span class="line">p = &quot;c*a*b&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 &apos;*&apos; 表示零个或多个，这里 &apos;c&apos; 为 0 个, &apos;a&apos; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用回溯，来不停的做匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] pat = p.toCharArray();</span><br><span class="line">        <span class="keyword">return</span> helper(str,<span class="number">0</span>,pat,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> sIndex, <span class="keyword">char</span>[] p, <span class="keyword">int</span> pIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length == sIndex &amp;&amp; p.length == pIndex) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.length != sIndex &amp;&amp; p.length == pIndex) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (pIndex + <span class="number">1</span> &lt; p.length &amp;&amp; p[pIndex+<span class="number">1</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sIndex != s.length &amp;&amp; (s[sIndex] == p[pIndex] || p[pIndex] == <span class="string">'.'</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> helper(s,sIndex,p,pIndex+<span class="number">2</span>) || helper(s,sIndex+<span class="number">1</span>,p,pIndex+<span class="number">2</span>) || helper(s,sIndex+<span class="number">1</span>,p,pIndex);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> helper(s,sIndex,p,pIndex+<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sIndex != s.length &amp;&amp; (s[sIndex] == p[pIndex] || p[pIndex] == <span class="string">'.'</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> helper(s,sIndex+<span class="number">1</span>,p,pIndex+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-正则表达式匹配"><a href="#leet-code-正则表达式匹配" class="headerlink" title="leet-code 正则表达式匹配"></a><a href="https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/" target="_blank" rel="noopener">leet-code 正则表达式匹配</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-删除链表的节点</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: head = [4,5,1,9], val = 5</span><br><span class="line">输出: [4,1,9]</span><br><span class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br><span class="line"></span><br><span class="line">输入: head = [4,5,1,9], val = 1</span><br><span class="line">输出: [4,5,9]</span><br><span class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode nHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        nHead.next = head;</span><br><span class="line">        ListNode cur = nHead;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next.val == val) &#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-删除链表的节点"><a href="#leet-code-删除链表的节点" class="headerlink" title="leet-code 删除链表的节点"></a><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/" target="_blank" rel="noopener">leet-code 删除链表的节点</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-打印从1到最大值的n位数</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84n%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: n = 1</span><br><span class="line">输出: [1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>,n);</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[count-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            res[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-打印从1到最大的n位数"><a href="#leet-code-打印从1到最大的n位数" class="headerlink" title="leet-code 打印从1到最大的n位数"></a><a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/" target="_blank" rel="noopener">leet-code 打印从1到最大的n位数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-数值的整数次方</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 2.00000, 10</span><br><span class="line">输出: 1024.00000</span><br><span class="line"></span><br><span class="line">输入: 2.10000, 3</span><br><span class="line">输出: 9.26100</span><br><span class="line"></span><br><span class="line">输入: 2.00000, -2</span><br><span class="line">输出: 0.25000</span><br><span class="line">解释: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>题很简单，但是要把情况考虑足够</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> count = n &lt; <span class="number">0</span> ? -n : n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            res *= x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">0</span> ? <span class="number">1.0</span>/res : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-数值的整数次方"><a href="#leet-code-数值的整数次方" class="headerlink" title="leet-code 数值的整数次方"></a><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/" target="_blank" rel="noopener">leet-code 数值的整数次方</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二进制中1的个数</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &apos;1&apos;。</span><br><span class="line"></span><br><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接使用JAVA API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.bitCount(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用与运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            n &amp;= n-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二进制中1的个数"><a href="#leet-code-二进制中1的个数" class="headerlink" title="leet-code 二进制中1的个数"></a><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/" target="_blank" rel="noopener">leet-code 二进制中1的个数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-剪绳子</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E5%89%AA%E7%BB%B3%E5%AD%90/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m] 。请问 k[0]<em>k[1]</em>…*k[m] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 = 1 + 1, 1 × 1 = 1</span><br><span class="line"></span><br><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>动态规划：建立一个一维dp数组，数组记录的是当前位置的最大值。</p>
<p>该方法的时间复杂度为 O（n）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            dp[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(<span class="number">2</span>*dp[i-<span class="number">2</span>],<span class="number">3</span>*dp[i-<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数学：根据规律，3是优先级最高的数，2的优先级低于3，当余数为0，那么这个绳子的最大值就是3的倍数，但是当数字的对3取余的余数为1时，最大的为 2 * 2 而不是 1*3，当余数为2时，就是3的倍数再乘2。</p>
<p>该方法的时间复杂度为 O（1）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x = n / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = n % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) Math.pow(<span class="number">3</span>,x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="number">2</span>*<span class="number">2</span>*Math.pow(<span class="number">3</span>,x-<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="number">2</span>*Math.pow(<span class="number">3</span>,x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-剪绳子"><a href="#leet-code-剪绳子" class="headerlink" title="leet-code 剪绳子"></a><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/" target="_blank" rel="noopener">leet-code 剪绳子</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-机器人的运动范围</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：m = 2, n = 3, k = 1</span><br><span class="line">输出：3</span><br><span class="line"></span><br><span class="line">输入：m = 3, n = 1, k = 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>dfs遍历二维数组即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] marked = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        dfs(marked,<span class="number">0</span>,<span class="number">0</span>,k);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] marked, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a = i;</span><br><span class="line">        <span class="keyword">while</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += a % <span class="number">10</span>;</span><br><span class="line">            a /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> b = j;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += b % <span class="number">10</span>;</span><br><span class="line">            b /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; k || i &lt; <span class="number">0</span> || i &gt;= marked.length || j &lt; <span class="number">0</span> || j &gt;= marked[<span class="number">0</span>].length || marked[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        marked[i][j] = <span class="number">1</span>;</span><br><span class="line">        dfs(marked,i+<span class="number">1</span>,j,k);</span><br><span class="line">        dfs(marked,i-<span class="number">1</span>,j,k);</span><br><span class="line">        dfs(marked,i,j+<span class="number">1</span>,k);</span><br><span class="line">        dfs(marked,i,j-<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-机器人的运动范围"><a href="#leet-code-机器人的运动范围" class="headerlink" title="leet-code 机器人的运动范围"></a><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">leet-code 机器人的运动范围</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-重建二叉树</title>
    <url>/2020/03/02/%E5%89%91%E6%8C%87offer-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前序遍历 preorder = [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder = [9,3,15,20,7]</span><br><span class="line">返回如下的二叉树：</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过前序遍历找到二叉树的根节点在中序遍历数组的位置，节点左边为左子树，右边为右子树，然后递归构建即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.length == <span class="number">0</span> || inorder.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == preorder[<span class="number">0</span>]) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.left = buildTree(Arrays.copyOfRange(preorder,<span class="number">1</span>,index+<span class="number">1</span>),Arrays.copyOfRange(inorder,<span class="number">0</span>,index));</span><br><span class="line">        root.right = buildTree(Arrays.copyOfRange(preorder,index+<span class="number">1</span>,preorder.length),Arrays.copyOfRange(inorder,index+<span class="number">1</span>,inorder.length));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-重建二叉树"><a href="#leet-code-重建二叉树" class="headerlink" title="leet-code 重建二叉树"></a><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener">leet-code 重建二叉树</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-桥接模式</title>
    <url>/2020/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。将类与类之间继承的关系，变为抽象类或者接口与接口之间的关联关系，实现了抽象化与实现化的脱耦。</p>
<a id="more"></a>

<ul>
<li>实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统；</li>
<li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成；</li>
<li>桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本；</li>
<li>桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程；</li>
<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性，即需要有这样的应用场景。</li>
</ul>
<h3 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h3><p>JAVA 语言通过 JAVA 虚拟机实现了平台无关性。</p>
<p><img src="/2020/03/02/设计模式-桥接模式/1.png" alt></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>例如：手机的类型可分为翻盖手机和直板，而手机又拥有不同的品牌。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FoldedPhone foldedPhone = <span class="keyword">new</span> FoldedPhone(<span class="keyword">new</span> XiaoMi());</span><br><span class="line">        foldedPhone.open();</span><br><span class="line">        UpRightPhone upRightPhone = <span class="keyword">new</span> UpRightPhone(<span class="keyword">new</span> Vivo());</span><br><span class="line">        upRightPhone.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpRightPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpRightPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">"直板手机开机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">"直板手机关机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">"直板手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoldedPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FoldedPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">"折叠手机开机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">"折叠手机关机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">"折叠手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Brand brand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.opne();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vivo</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vivo手机开机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vivo手机关机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vivo手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机开机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机关机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">opne</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-适配器模式</title>
    <url>/2020/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul>
<li>适配器模式(Adapter Pattern)将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作，其别名为包装器(Wrapper)；</li>
<li>适配器模式属于结构型模式；</li>
<li>主要分为三类：类适配器模式、对象适配器模式、接口适配器模式。</li>
</ul>
<a id="more"></a>

<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>以生活中充电器的例子来讲解适配器，充电器本身相当于适配器，220V交流电相当于被适配者，目的就是将220V的交流电转换为5V的直流电。</p>
<h3 id="1-类适配器模式"><a href="#1-类适配器模式" class="headerlink" title="1. 类适配器模式"></a>1. 类适配器模式</h3><p>主要角色：Adapter类（适配器类）、src类（被适配者）、dst接口（目标）。</p>
<p>Adapter类通过继承 src 类，实现 dst 接口，来完成 src -&gt; dst 的适配。</p>
<h4 id="1-1-代码实现"><a href="#1-1-代码实现" class="headerlink" title="1.1 代码实现"></a>1.1 代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.charing(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Voltag220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">        System.out.println(<span class="string">"电压="</span>+src);</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Voltage5V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltag220V</span> <span class="keyword">implements</span> <span class="title">Voltage5V</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = output220V();</span><br><span class="line">        <span class="keyword">int</span> dst = src / <span class="number">44</span>;</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charing</span><span class="params">(Voltage5V voltage5V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (voltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"电压5V，可以充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-对象适配器模式"><a href="#2-对象适配器模式" class="headerlink" title="2. 对象适配器模式"></a>2. 对象适配器模式</h3><p>基本思路和类的适配器模式相同，只是将Adapter类作修改，不是继承src类，而是持有src类的实例，以解决兼容性的问题。 即：持有 src类，实现 dst 类接口，完成src-&gt;dst的适配</p>
<h4 id="2-1-代码实现："><a href="#2-1-代码实现：" class="headerlink" title="2.1 代码实现："></a>2.1 代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.charing(<span class="keyword">new</span> ObjectVoltageAdapter(<span class="keyword">new</span> Voltag220V()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectVoltageAdapter</span> <span class="keyword">implements</span> <span class="title">Voltage5V</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Voltag220V voltag220V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectVoltageAdapter</span><span class="params">(Voltag220V voltag220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.voltag220V = voltag220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dst = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != voltag220V) &#123;</span><br><span class="line">            <span class="keyword">int</span> src = voltag220V.output220V();</span><br><span class="line">            System.out.println(<span class="string">"使用对象适配器进行适配"</span>);</span><br><span class="line">            dst = src / <span class="number">44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Voltag220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">        System.out.println(<span class="string">"电压="</span>+src);</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Voltage5V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-接口适配器模式"><a href="#3-接口适配器模式" class="headerlink" title="3. 接口适配器模式"></a>3. 接口适配器模式</h3><p>接口适配器模式又称为缺省适配器模式。当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。适用于一个接口不想使用其所有的方法的情况。</p>
<h4 id="3-1-代码实现"><a href="#3-1-代码实现" class="headerlink" title="3.1 代码实现"></a>3.1 代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractAdapter adapter = <span class="keyword">new</span> AbstractAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"实现了m1方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        adapter.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAdapter</span> <span class="keyword">implements</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-从尾到头打印链表</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以利用栈的特性存储链表的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[stack.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-从尾到头打印链表"><a href="#leet-code-从尾到头打印链表" class="headerlink" title="leet-code 从尾到头打印链表"></a><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">leet-code 从尾到头打印链表</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-替换空格</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p> 直接使用JAVA API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.replaceAll(<span class="string">" "</span>,<span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用StringBuilder完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">                builder.append(<span class="string">"%20"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                builder.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-替换空格"><a href="#leet-code-替换空格" class="headerlink" title="leet-code 替换空格"></a><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" target="_blank" rel="noopener">leet-code 替换空格</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-矩阵中的路径</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p>
<a id="more"></a>

<p>[[“a”,”b”,”c”,”e”],<br>[“s”,”f”,”c”,”s”],<br>[“a”,”d”,”e”,”e”]]</p>
<p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br><span class="line"></span><br><span class="line">输入：board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word = &quot;abcd&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用dfs遍历字符串即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board.length==<span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span> || word.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span>  <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (helper(board,i,j,word,<span class="number">0</span>,marked)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">char</span>[][] board,<span class="keyword">int</span> i , <span class="keyword">int</span> j,String word,<span class="keyword">int</span> len,<span class="keyword">boolean</span>[][] marked)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len == word.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= board.length || j &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || board[i][j] != word.charAt(len)  || marked[i][j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        marked[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (helper(board,i+<span class="number">1</span>,j,word,len+<span class="number">1</span>,marked)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (helper(board,i-<span class="number">1</span>,j,word,len+<span class="number">1</span>,marked)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (helper(board,i,j+<span class="number">1</span>,word,len+<span class="number">1</span>,marked)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (helper(board,i,j-<span class="number">1</span>,word,len+<span class="number">1</span>,marked)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        marked[i][j] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-矩阵中的路径"><a href="#leet-code-矩阵中的路径" class="headerlink" title="leet-code 矩阵中的路径"></a><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/" target="_blank" rel="noopener">leet-code 矩阵中的路径</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-旋转数组的最小数字</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[3,4,5,1,2]</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">输入：[2,2,2,0,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为是从有序数组旋转而来，还是可以使用二分查找的方法，并于右侧的数据比较（与左侧的数据比较时条件复杂）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (numbers[mid] &gt; numbers[right]) &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid] == numbers[right]) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> numbers[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-旋转数组的最小数字"><a href="#leet-code-旋转数组的最小数字" class="headerlink" title="leet-code 旋转数组的最小数字"></a><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 旋转数组的最小数字</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-青蛙跳台阶</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>该问题与斐波那契数列一个思路。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> temp = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp % <span class="number">1000000007</span>;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-青蛙跳台阶问题"><a href="#leet-code-青蛙跳台阶问题" class="headerlink" title="leet-code 青蛙跳台阶问题"></a><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/" target="_blank" rel="noopener">leet-code 青蛙跳台阶问题</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二维数组中的查找</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现有矩阵 matrix 如下：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line">给定 target = 5，返回 true。</span><br><span class="line"></span><br><span class="line">给定 target = 20，返回 false。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>从二维数组的左下角开始查找，当 <code>matrix[i][j] &lt; target</code> 时，j++ ；当 <code>matrix[i][j] &gt; target</code> 则 i– ；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean findNumberIn2DArray(int[][] matrix, int target) &#123;</span><br><span class="line">        if (matrix.length == 0 || matrix[0].length == 0 || target &lt; matrix[0][0] || target &gt; matrix[matrix.length-1][matrix[0].length-1]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int i = matrix.length - 1;</span><br><span class="line">        int j = 0;</span><br><span class="line">        while (i &gt;= 0 &amp;&amp; j &lt; matrix[0].length) &#123;</span><br><span class="line">            if (matrix[i][j] == target) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;else if (matrix[i][j] &lt; target) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二维数组中的查找"><a href="#leet-code-二维数组中的查找" class="headerlink" title="leet-code 二维数组中的查找"></a><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/" target="_blank" rel="noopener">leet-code 二维数组中的查找</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-数组中重复的数字</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以使用位图的思想来解决，不过需要使用O(N)的空间复杂度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[nums[i]]) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                flag[nums[i]] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-数组中重复的数字"><a href="#leet-code-数组中重复的数字" class="headerlink" title="leet-code 数组中重复的数字"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 数组中重复的数字</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-斐波那契数列</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p>
<a id="more"></a>

<p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">输入：n = 5</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>非递归版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> a = <span class="number">1</span>,b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> temp = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp % <span class="number">1000000007</span>;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      	<span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      	<span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-斐波那契数列"><a href="#leet-code-斐波那契数列" class="headerlink" title="leet-code 斐波那契数列"></a><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/" target="_blank" rel="noopener">leet-code 斐波那契数列</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-用两个栈实现队列</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出：[null,null,3,-1]</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出：[null,null,3,-1]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于栈先进后出的特性，使用两个栈即可完成队列的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack1;</span><br><span class="line">    Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stack2.isEmpty()) <span class="keyword">return</span> stack2.pop();</span><br><span class="line">        <span class="keyword">if</span> (stack1.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">            stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-用两个栈实现队列"><a href="#leet-code-用两个栈实现队列" class="headerlink" title="leet-code 用两个栈实现队列"></a><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/" target="_blank" rel="noopener">leet-code 用两个栈实现队列</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>leet-code_5.最长回文子串</title>
    <url>/2020/03/01/leet-code-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。你可以假设 <code>s</code> 的最大长度为 1000。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以使用动态规划来解决此题，当 <code>s.charAt(i) == s.charAt(j)</code>时，如果 <code>i-1 与 j+1</code>位置也是回文子串，则 <code>i和j</code>位置的字符串必定也是回文子串，或者 <code>i-j &lt;= 2</code>那字符串也必定是回文子串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span> ; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(j) &amp;&amp; ( i - j &lt;= <span class="number">2</span> || dp[i-<span class="number">1</span>][j+<span class="number">1</span>]) ) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][j] &amp;&amp; (i-j+<span class="number">1</span>) &gt; res.length()) &#123;</span><br><span class="line">                        res = s.substring(j,i+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-最长回文子串"><a href="#leet-code-最长回文子串" class="headerlink" title="leet-code 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">leet-code 最长回文子串</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>leet-code</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉树的最近公共祖先</title>
    <url>/2020/03/01/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<a id="more"></a>

<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="/2020/03/01/剑指offer-二叉树的最近公共祖先/1.png" alt></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br><span class="line"></span><br><span class="line">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果root是null，则说明我们已经找到最底了，返回null表示没找到<br>如果root与p相等或者与q相等，则返回root<br>如果左子树没找到，递归函数返回null，证明p和q同在root的右侧，那么最终的公共祖先就是右子树找到的结点<br>如果右子树没找到，递归函数返回null，证明p和q同在root的左侧，那么最终的公共祖先就是左子树找到的结点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root == p || root == q) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        <span class="keyword">return</span> left == <span class="keyword">null</span>?right:right==<span class="keyword">null</span>?left:root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉树的最近公共祖先"><a href="#leet-code-二叉树的最近公共祖先" class="headerlink" title="leet-code 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">leet-code 二叉树的最近公共祖先</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉搜索树的最近公共祖先</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<a id="more"></a>

<p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>
<p><img src="/2020/02/29/剑指offer-二叉搜索树的最近公共祖先/1.png" alt></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于二叉搜索树的性质，当节点的值小于 q 节点的值，大于 p 节点的值，即这个节点是两个节点的公共祖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉搜索树的最近公共祖先"><a href="#leet-code-二叉搜索树的最近公共祖先" class="headerlink" title="leet-code 二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">leet-code 二叉搜索树的最近公共祖先</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-构建乘积数组</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，其中 B 中的元素 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]。不能使用除法。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: [120,60,40,30,24]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先从左开始遍历整个数组，创建一个当前数的左边数乘积；再从右开始遍历，创建一个当前数的右边数乘积；最后左边数乘积与右边数乘积相乘即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] constructArr(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        left[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        right[a.length - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length ; i++) &#123;</span><br><span class="line">            left[i] = left[i-<span class="number">1</span>] * a[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">2</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            right[i] = right[i+<span class="number">1</span>] * a[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res =<span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            res[i] = left[i] * right[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-构建乘积数组"><a href="#leet-code-构建乘积数组" class="headerlink" title="leet-code 构建乘积数组"></a><a href="https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/" target="_blank" rel="noopener">leet-code 构建乘积数组</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-不用加减乘除做加法</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p>
<!--moore-->

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: a = 1, b = 1</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>计算 a + b 等价于计算 <code>（a ^ b）+ ((a &amp; b)) &lt;&lt; 1</code>，其中 <code>((a &amp; b)) &lt;&lt; 1</code> 表示进位。因此令 a 等于 <code>((a &amp; b)) &lt;&lt; 1</code> ， 令 b 等于 <code>（a ^ b）</code>，直到 a 变为 0 ，返回 b。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a ^ b;</span><br><span class="line">            a = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-不用加减乘除做加法"><a href="#leet-code-不用加减乘除做加法" class="headerlink" title="leet-code 不用加减乘除做加法"></a><a href="https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/" target="_blank" rel="noopener">leet-code 不用加减乘除做加法</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-圆圈中最后剩下的数字</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>
<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: n = 5, m = 3</span><br><span class="line">输出: 3</span><br><span class="line"></span><br><span class="line">输入: n = 10, m = 17</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个问题是一个约瑟夫环问题，我们可以根据题目的要求使用双向链表来模拟实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (list.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        Integer pre = list.pollFirst();</span><br><span class="line">        <span class="keyword">if</span> (i != m - <span class="number">1</span>) &#123;</span><br><span class="line">        list.add(pre);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用递归方式来解决：圆圈长度为 n 的解可以看出长度是 n-1 的解再加上报数的长度 m ，因为是圆圈，所以要取余 n。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (lastRemaining(n-<span class="number">1</span>,m)+m) % n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-圆圈中最后剩下的数字"><a href="#leet-code-圆圈中最后剩下的数字" class="headerlink" title="leet-code 圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 圆圈中最后剩下的数字</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-扑克牌中的顺子</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: True</span><br><span class="line"></span><br><span class="line">输入: [0,0,1,2,5]</span><br><span class="line">输出: True</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先将数组排序，遍历数组做三件事，计算0的个数，判断是否是数字相等，如果相等直接返回 false，如果数组不想等，用 count 去抵押两数间的差值，最后判断 count 是否大于0 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStraight</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i+<span class="number">1</span>] == nums[i]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            count -= nums[i+<span class="number">1</span>] - nums[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-扑克牌中的顺子"><a href="#leet-code-扑克牌中的顺子" class="headerlink" title="leet-code 扑克牌中的顺子"></a><a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/" target="_blank" rel="noopener">leet-code 扑克牌中的顺子</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-队列的最大值</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的时间复杂度都是O(1)。若队列为空，pop_front 和 max_value 需要返回 -1。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">[&quot;MaxQueue&quot;,&quot;push_back&quot;,&quot;push_back&quot;,&quot;max_value&quot;,&quot;pop_front&quot;,&quot;max_value&quot;]</span><br><span class="line">[[],[1],[2],[],[],[]]</span><br><span class="line">输出: [null,null,null,2,1,2]</span><br><span class="line"></span><br><span class="line">输入: </span><br><span class="line">[&quot;MaxQueue&quot;,&quot;pop_front&quot;,&quot;max_value&quot;]</span><br><span class="line">[[],[],[]]</span><br><span class="line">输出: [null,-1,-1]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>定义两个队列，一个队列用于存放值，另一个队列存放 最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; queue;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; maxQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        maxQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max_value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxQueue.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        queue.offer(value);</span><br><span class="line">        <span class="keyword">while</span> (maxQueue.size() &gt; <span class="number">0</span> &amp;&amp; maxQueue.peekLast() &lt; value) &#123;</span><br><span class="line">            maxQueue.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        maxQueue.offer(value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop_front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (maxQueue.peekFirst() == res) maxQueue.poll();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-队列的最大值"><a href="#leet-code-队列的最大值" class="headerlink" title="leet-code 队列的最大值"></a><a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">leet-code 队列的最大值</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-滑动窗口的最大值</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</span><br><span class="line">输出: [3,3,5,5,6,7] </span><br><span class="line">解释: </span><br><span class="line"></span><br><span class="line">  滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过维护一个 k 大小的大顶堆来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;((o1,o2) -&gt; o2 - o1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            heap.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(heap.peek());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = k + i; j &lt; nums.length; i++,j++) &#123;</span><br><span class="line">            heap.remove(nums[i]);</span><br><span class="line">            heap.add(nums[j]);</span><br><span class="line">            res.add(heap.peek());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            temp[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-滑动窗口的最大值"><a href="#leet-code-滑动窗口的最大值" class="headerlink" title="leet-code 滑动窗口的最大值"></a><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">leet-code 滑动窗口的最大值</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-和为s的连续正数序列</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>
<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target = 9</span><br><span class="line">输出：[[2,3,4],[4,5]]</span><br><span class="line"></span><br><span class="line">输入：target = 15</span><br><span class="line">输出：[[1,2,3,4,5],[4,5,6],[7,8]]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用快慢双指针来完成，当 ((l + r) * (r - l + 1)) / 2 &lt; target 则 r++；当((l + r) * (r - l + 1)) / 2 &gt; target 则 l++；当((l + r) * (r - l + 1)) / 2 == target 则将其加入结果中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] findContinuousSequence(<span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = ((l + r) * (r - l + <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[r-l+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">                    tmp[index++] = i;</span><br><span class="line">                &#125;</span><br><span class="line">                temp.add(tmp);</span><br><span class="line">                r++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[temp.size()][];</span><br><span class="line">        <span class="keyword">return</span> temp.toArray(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/" target="_blank" rel="noopener">leet-code 和为s的连续正数序列</a></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-和为s的两个数字</title>
    <url>/2020/02/29/%E5%89%91%E6%8C%87offer-%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[2,7] 或者 [7,2]</span><br><span class="line"></span><br><span class="line">输入：nums = [10,26,30,31,47,60], target = 40</span><br><span class="line">输出：[10,30] 或者 [30,10]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为数组是有序的，因此可以通过一头一尾的双指针来完成查找，当 nums[l] + num[r] &lt; target ，则 l 指针右移，当 nums[l] + num[r] &gt; target，则 r 指针左移。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[l] + nums[r]) == target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((nums[l] + nums[r]) &lt; target) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        res[<span class="number">0</span>] = nums[l];</span><br><span class="line">        res[<span class="number">1</span>] = nums[r];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-和为s的两个数字"><a href="#leet-code-和为s的两个数字" class="headerlink" title="leet-code 和为s的两个数字"></a><a href="https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 和为s的两个数字</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-模板方法模式</title>
    <url>/2020/02/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>模板方法模式（Template Method Pattern），又叫模板模式(Template Pattern)，在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p>
<a id="more"></a>

<h3 id="模板方法模式的角色"><a href="#模板方法模式的角色" class="headerlink" title="模板方法模式的角色"></a>模板方法模式的角色</h3><ul>
<li>AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现其它的抽象方法；</li>
<li>ConcreteClass 具体实现类，实现抽象方法, 以完成算法中特点子类的步骤。</li>
</ul>
<h3 id="模板方法模式中的方法"><a href="#模板方法模式中的方法" class="headerlink" title="模板方法模式中的方法"></a>模板方法模式中的方法</h3><ul>
<li><strong>抽象方法</strong>：一个抽象方法由抽象类声明、由其具体子类实现。</li>
<li><strong>具体方法</strong>：一个具体方法由一个抽象类或具体类声明并实现。</li>
<li><strong>钩子方法</strong>：一个钩子方法由一个抽象类或具体类声明并实现，而其子类可能会加以扩展。通常在父类中给出的实现是一个空实现，并以该空实现作为方法的默认实现，当然钩子方法也可以提供一个非空的默认实现</li>
</ul>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//具体方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//办理具体的业务，这个方法交给子类去重写</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//模板方法，把基本操作组合到一起，子类一般不能重写</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.takeNumber();</span><br><span class="line">    <span class="keyword">this</span>.transact();</span><br><span class="line">    <span class="keyword">this</span>.evaluate();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类实现抽象方法的具体实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我要取款"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManageMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我要理财"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-抽象工厂模式</title>
    <url>/2020/02/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>工厂方法模式中，其实我们有一个潜在意识的意识。那就是我们生产的都是同一类产品。抽象工厂模式是工厂方法的仅一步深化，在这个模式中的工厂类不单单可以创建一种产品，而是可以创建一组产品。具体图示：</p>
<a id="more"></a>

<p><img src="/2020/02/28/设计模式-抽象工厂模式/1.png" alt></p>
<h3 id="抽象工厂模式里的角色"><a href="#抽象工厂模式里的角色" class="headerlink" title="抽象工厂模式里的角色"></a>抽象工厂模式里的角色</h3><ol>
<li>抽象工厂（Abstract Factory）角色 ：是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口。</li>
<li>具体工厂类（Concrete Factory）角色 ：这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象。</li>
<li>抽象产品（Abstract Product）角色 ：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li>
<li>具体产品（Concrete Product）角色 ：抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于工厂模式中的工厂只创建单一产品，我后面也会详解介绍到。</li>
</ol>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AbstractFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Factory01 factory01;</span><br><span class="line">        Gun gun;</span><br><span class="line">        Bullet bullet;</span><br><span class="line"></span><br><span class="line">        factory01 = new Ak_Factory();</span><br><span class="line">        bullet = factory01.produceBullet();</span><br><span class="line">        bullet.load();</span><br><span class="line">        gun = factory01.produceGun();</span><br><span class="line">        gun.shooting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生产AK及其子弹的工厂</span><br><span class="line">class Ak_Factory implements Factory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Gun produceGun() &#123;</span><br><span class="line">        return new AK();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Bullet produceBullet() &#123;</span><br><span class="line">        return new AK_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生产M4A1及其子弹的工厂</span><br><span class="line">class M4A1_Factory implements Factory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Gun produceGun() &#123;</span><br><span class="line">        return new M4A1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Bullet produceBullet() &#123;</span><br><span class="line">        return new M4A1_Bullet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建工厂接口</span><br><span class="line">interface Factory &#123;</span><br><span class="line">    public Gun produceGun();</span><br><span class="line">    public Bullet produceBullet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//AK类</span><br><span class="line">class AK extends Gun &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void shooting() &#123;</span><br><span class="line">        System.out.println(&quot;shooting by AK&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//M4A1</span><br><span class="line">class M4A1 extends Gun &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void shooting() &#123;</span><br><span class="line">        System.out.println(&quot;shooting by M4A1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//AK子弹类</span><br><span class="line">class AK_Bullet extends Bullet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void load() &#123;</span><br><span class="line">        System.out.println(&quot;load AK_Bullet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//M4A1子弹类</span><br><span class="line">class M4A1_Bullet extends Bullet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void load() &#123;</span><br><span class="line">        System.out.println(&quot;load M4A1_Bullet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//枪</span><br><span class="line">abstract class Gun &#123;</span><br><span class="line">    public abstract void shooting();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子弹</span><br><span class="line">abstract class Bullet&#123;</span><br><span class="line">    public abstract void load();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-工厂方法模式</title>
    <url>/2020/02/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法模式是简单工厂的仅一步深化， 在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说每个对象都有一个与之对应的工厂。</p>
<a id="more"></a>

<h3 id="工厂方法模式中的角色"><a href="#工厂方法模式中的角色" class="headerlink" title="工厂方法模式中的角色"></a>工厂方法模式中的角色</h3><ol>
<li>抽象工厂(Abstract Factory)角色：是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口。</li>
<li>具体工厂(Concrete Factory)角色 ：这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象。</li>
<li>抽象产品(Abstract Product)角色 ：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li>
<li>具体产品(Concrete Product)角色 ：这个角色实现了抽象产品角色所定义的接口。某具体产品有专门的具体工厂创建，它们之间往往一一对应</li>
</ol>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethod</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory circleFactory = <span class="keyword">new</span> CircleFactory();</span><br><span class="line">        Shape circle = circleFactory.getShape();</span><br><span class="line">        circle.draw();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆形工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//长方形工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectangleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正方形工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长方形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Draw Rectangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正方形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Draw Square"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Draw Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图形</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-简单工厂模式</title>
    <url>/2020/02/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p>
<a id="more"></a>

<p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p>
<h3 id="简单工厂模式的角色"><a href="#简单工厂模式的角色" class="headerlink" title="简单工厂模式的角色"></a>简单工厂模式的角色</h3><ol>
<li>工厂(Factory)角色 :简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品(Product)角色 :简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。</li>
</ol>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape circle = SimpleFactory.getShape(<span class="string">"Circle"</span>);</span><br><span class="line">      circle.draw();</span><br><span class="line">      Shape rectangle = SimpleFactory.getShape(<span class="string">"Rectangle"</span>);</span><br><span class="line">      rectangle.draw();</span><br><span class="line">      Shape square = SimpleFactory.getShape(<span class="string">"Square"</span>);</span><br><span class="line">      square.draw();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//静态方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (shapeType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"Circle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"Rectangle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (shapeType.equalsIgnoreCase(<span class="string">"Square"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长方形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Draw Rectangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正方形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Draw Square"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Draw Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图形</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>leet-code_146.LRU缓存机制</title>
    <url>/2020/02/28/leet-code-146-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p>
<a id="more"></a>

<p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // 返回  1</span><br><span class="line">cache.put(3, 3);    // 该操作会使得密钥 2 作废</span><br><span class="line">cache.get(2);       // 返回 -1 (未找到)</span><br><span class="line">cache.put(4, 4);    // 该操作会使得密钥 1 作废</span><br><span class="line">cache.get(1);       // 返回 -1 (未找到)</span><br><span class="line">cache.get(3);       // 返回  3</span><br><span class="line">cache.get(4);       // 返回  4</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>在 JAVA 中可以使用 LinkedHashMap 来实现 LRU 缓存机制，它的底层数据结构是 哈希表 + 双向链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer,Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> DoubleList cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cap = cap;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cache = <span class="keyword">new</span> DoubleList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> val = map.get(key).val;</span><br><span class="line">        put(key,val);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(key,val);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            cache.remove(map.get(key));</span><br><span class="line">            cache.addFirst(node);</span><br><span class="line">            map.put(key,node);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cap == cache.size) &#123;</span><br><span class="line">                Node last = cache.removeLast();</span><br><span class="line">                map.remove(last.key);</span><br><span class="line">            &#125;</span><br><span class="line">            cache.addFirst(node);</span><br><span class="line">            map.put(key,node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> Node tail;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tail.prev == head) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node last = tail.prev;</span><br><span class="line">        remove(last);</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Node节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line">    <span class="keyword">public</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-LRU缓存机制"><a href="#leet-code-LRU缓存机制" class="headerlink" title="leet-code LRU缓存机制"></a><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">leet-code LRU缓存机制</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>leet-code</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-数组中数字出现的次数</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [4,1,4,6]</span><br><span class="line">输出：[1,6] 或 [6,1]</span><br><span class="line"></span><br><span class="line">入：nums = [1,2,10,4,1,4,3,3]</span><br><span class="line">输出：[2,10] 或 [10,2]</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以使用HashSet来过滤数据，不过这样不满足空间复杂度为O(1)，因此可以使用异或运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumbers(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            temp ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//得到 temp 最后一位为 1 的数，</span></span><br><span class="line">        <span class="keyword">int</span> lastOne = temp &amp; -temp;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] &amp; lastOne) == <span class="number">0</span>) &#123; <span class="comment">//分组将两个不同的数分到不同组</span></span><br><span class="line">                a ^= nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                b ^= nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        res[<span class="number">0</span>] = a;</span><br><span class="line">        res[<span class="number">1</span>] = b;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-数组中数字出现的次数"><a href="#leet-code-数组中数字出现的次数" class="headerlink" title="leet-code 数组中数字出现的次数"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/" target="_blank" rel="noopener">leet-code 数组中数字出现的次数</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-平衡二叉树</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回 true 。</span><br><span class="line"></span><br><span class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   2</span><br><span class="line">    / \</span><br><span class="line">   3   3</span><br><span class="line">  / \</span><br><span class="line"> 4   4</span><br><span class="line">返回 false 。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    boolean isBalanced = true;</span><br><span class="line">    public boolean isBalanced(TreeNode root) &#123;</span><br><span class="line">        length(root);</span><br><span class="line">        return isBalanced;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int length(TreeNode root) &#123;</span><br><span class="line">        if (root == null || !isBalanced ) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int left = length(root.left);</span><br><span class="line">        int right = length(root.right);</span><br><span class="line">        if (Math.abs(left - right) &gt; 1) &#123;</span><br><span class="line">            isBalanced = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return 1+Math.max(left,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-平衡二叉树"><a href="#leet-code-平衡二叉树" class="headerlink" title="leet-code 平衡二叉树"></a><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/" target="_blank" rel="noopener">leet-code 平衡二叉树</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉树的深度</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]，</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回它的最大深度 3 。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>通过DFS得到每条路径的长度，再比较得出最大结果即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        dfs(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode node,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (length &gt; res)&#123;</span><br><span class="line">                res = length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        dfs(node.left,length);</span><br><span class="line">        dfs(node.right,length);</span><br><span class="line">        length--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉树的深度"><a href="#leet-code-二叉树的深度" class="headerlink" title="leet-code 二叉树的深度"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/" target="_blank" rel="noopener">leet-code 二叉树的深度</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-二叉搜索树的第k大节点</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一棵二叉搜索树，请找出其中第k大的节点。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root = [3,1,4,null,2], k = 1</span><br><span class="line">   3</span><br><span class="line">  / \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 4</span><br><span class="line"></span><br><span class="line">输入: root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">       5</span><br><span class="line">      / \</span><br><span class="line">     3   6</span><br><span class="line">    / \</span><br><span class="line">   2   4</span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>根据二叉搜索树中序遍历的性质可以解决，注意题目，因为是第 k 大，因此顺序与中序遍历相反</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthLargest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        inorder(root,k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode node, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(node.right,k);</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (cnt == k) &#123;</span><br><span class="line">            res = node.val;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(node.left,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-二叉搜索树的第k大节点"><a href="#leet-code-二叉搜索树的第k大节点" class="headerlink" title="leet-code 二叉搜索树的第k大节点"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/" target="_blank" rel="noopener">leet-code 二叉搜索树的第k大节点</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-0～n-1中缺失的数字</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-0%EF%BD%9En-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,3]</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: [0,1,2,3,4,5,6,7,9]</span><br><span class="line">输出: 8</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>二分查找，如果 nums[mid] == mid 则说明左边是完整的，去右边查找，否则去左边查找。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] != mid) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-0～n-1中缺失的数字"><a href="#leet-code-0～n-1中缺失的数字" class="headerlink" title="leet-code 0～n-1中缺失的数字"></a><a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 0～n-1中缺失的数字</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-在排序数组中查找数字</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>统计一个数字在排序数组中出现的次数。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用二分查找统计次数即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || nums[<span class="number">0</span>] &gt; target || nums[nums.length - <span class="number">1</span>] &lt; target) <span class="keyword">return</span> cnt;</span><br><span class="line">        BinSearch(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>,target);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BinSearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                BinSearch(nums, left, mid - <span class="number">1</span>, target);</span><br><span class="line">                BinSearch(nums, mid + <span class="number">1</span>, right, target);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                BinSearch(nums, mid + <span class="number">1</span>, right, target);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BinSearch(nums, left, mid - <span class="number">1</span>, target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-在排序数组中查找数字-I"><a href="#leet-code-在排序数组中查找数字-I" class="headerlink" title="leet-code 在排序数组中查找数字 I"></a><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/" target="_blank" rel="noopener">leet-code 在排序数组中查找数字 I</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-两个链表的第一个公共节点</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个链表，找出它们的第一个公共节点。</p>
<a id="more"></a>

<p>示例：</p>
<p><img src="/2020/02/28/剑指offer-两个链表的第一个公共节点/1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line"></span><br><span class="line">输出：Reference of the node with value = 8</span><br><span class="line"></span><br><span class="line">输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用指针 cur1 指向 headA，指针 cur2 指向 headB，一起往后遍历，当 cur1 为空时，让cur1 指向 headB，当 cur2 为空时，让 cur2 指向 headA，当两个指针指向同一个节点时，则该节点为交叉节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode cur1 = headA;</span><br><span class="line">        ListNode cur2 = headB;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next == <span class="keyword">null</span>?headB:cur1.next;</span><br><span class="line">            cur2 = cur2.next == <span class="keyword">null</span>?headA:cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-两个链表的第一个公共节点"><a href="#leet-code-两个链表的第一个公共节点" class="headerlink" title="leet-code 两个链表的第一个公共节点"></a><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/" target="_blank" rel="noopener">leet-code 两个链表的第一个公共节点</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-数组中的逆序对</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,5,6,4]</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用归并排序，在归并排序的时候记录下逆序对的个数，在排序归并阶段， 左右两边的数组都是各自有序的，因此，当左边的数组元素 left 大于右边的数组元素 right，则左边数组 left ~ mid 之间的数字必定都大于右边的这个数字 right 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        mergeSort(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>,temp);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr,left,mid,temp);</span><br><span class="line">            mergeSort(arr,mid+<span class="number">1</span>,right,temp);</span><br><span class="line">            helper(arr,left,mid,right,temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = left;</span><br><span class="line">        <span class="keyword">int</span> r = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[l] &lt;= arr[r]) &#123;</span><br><span class="line">                temp[index++] = arr[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[index++] = arr[r++];</span><br><span class="line">                <span class="comment">// 当 arr[l] &gt; arr[r] 时，arr[l] ~ arr[mid] 的元素必定都大于 arr[r] </span></span><br><span class="line">                count += (mid - l + <span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= mid) temp[index++] = arr[l++];</span><br><span class="line">        <span class="keyword">while</span> (r &lt;= right) temp[index++] = arr[r++];</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> templeft = left;</span><br><span class="line">        <span class="keyword">while</span> (templeft &lt;= right) arr[templeft++] = temp[index++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-数组中的逆序对"><a href="#leet-code-数组中的逆序对" class="headerlink" title="leet-code 数组中的逆序对"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">leet-code 数组中的逆序对</a></h4></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-第一个只出现一次的字符</title>
    <url>/2020/02/28/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s = &quot;abaccdeff&quot;</span><br><span class="line">返回 &quot;b&quot;</span><br><span class="line"></span><br><span class="line">s = &quot;&quot; </span><br><span class="line">返回 &quot; &quot;</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>遍历一次字符串，并使用一个整型数组记录字符出现的次数，再遍历一次字符串，当数组中字符的次数为1是返回该字符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    counts[s.charAt(i)]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (counts[s.charAt(i)] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> s.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><h4 id="leet-code-第一个只出现一次的字符"><a href="#leet-code-第一个只出现一次的字符" class="headerlink" title="leet-code 第一个只出现一次的字符"></a><a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/" target="_blank" rel="noopener">leet-code 第一个只出现一次的字符</a></h4><p>​</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/2020/02/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>采取一定的方法，保证在整个系统中，对于某个类只能存在一个对象实例。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>使用一个私有构造函数、一个私有静态变量以及一个共有静态方法来实现。私有构造函数保证了不能通过构造函数来创建实例，只能通过共有静态方法来返回唯一的静态私有对象。</p>
<a id="more"></a>

<h3 id="1-懒汉式-线程不安全"><a href="#1-懒汉式-线程不安全" class="headerlink" title="1. 懒汉式-线程不安全"></a>1. 懒汉式-线程不安全</h3><p>在多线程环境下，可能会有多个线程同时进入 <strong>if (instance == null)</strong>，并且此时 instance 为 null，那么就会有多个线程执行 <strong>instance = new Singleton();</strong>，导致对象多次被实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-饿汉式-线程安全"><a href="#2-饿汉式-线程安全" class="headerlink" title="2. 饿汉式-线程安全"></a>2. 饿汉式-线程安全</h3><p>由于对象已经提前实例化，因此多线程环境下不会产生线程安全问题，但是这种情况下也丢失了延迟实例化带来的节约资源的好处。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-懒汉式-线程安全"><a href="#3-懒汉式-线程安全" class="headerlink" title="3. 懒汉式-线程安全"></a>3. 懒汉式-线程安全</h3><p>只需要在 getInstance() 方法上加锁，就能避免多次实例化 intance，但是这个方法会造成线程的阻塞，会有性能问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">  private static Singleton instance;</span><br><span class="line">  </span><br><span class="line">  private Singleton() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  public synchronized static Singleton getInstance() &#123;</span><br><span class="line">    if (instance == null) &#123;</span><br><span class="line">      instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-双重检查锁-线程安全"><a href="#4-双重检查锁-线程安全" class="headerlink" title="4. 双重检查锁-线程安全"></a>4. 双重检查锁-线程安全</h3><p>使用两个 if 语句的原因：第一个 if 语句用于 instance 已经被实例化后的加锁操作，第二个 if 语句进行了加锁，因此只能由一个线程进入，避免当 instance == null 时两个线程同时执行实例化操作。</p>
<p>使用 volatile 的原因：<strong>instance = new Singleton();</strong> 这段代码代码其实是分为三个步骤：</p>
<ol>
<li>为 instance 分配内存空间</li>
<li>初始化 instance</li>
<li>将 instance 指向分配的内存地址</li>
</ol>
<p>但是由于 JVM 具有指令重排的特性，因此操作可能会变为 1-&gt;3-&gt;2。指令重排在单线程情况下不会出问题，但是多线程情况下，如果线程1执行了 1和3，然后线程2调用 getInstance 后发现对象不为空，因此返回 instance，但此时的 instance 还未被初始化，使用 volatile 关键字后，可以禁止 JVM 的指令重排。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-静态内部类-线程安全"><a href="#5-静态内部类-线程安全" class="headerlink" title="5. 静态内部类-线程安全"></a>5. 静态内部类-线程安全</h3><p>当 Sinleton 类被加载时，静态内部类 SingletonHolder 并没有被加载进内存。只有当调用 getInstance() 方法从而触发 SingletonHolder.INSTANCE 时 SingletonHolder 才会被加载，此时初始化实例 INSTANCE ，并且 JVM 确保 INSTANCE 只会被实例化一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-枚举-线程安全"><a href="#6-枚举-线程安全" class="headerlink" title="6. 枚举-线程安全"></a>6. 枚举-线程安全</h3><p>该种实现方法实现简洁，自动支持序列化机制，可以防止反射攻击。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">  INSTANCE；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer-丑数</title>
    <url>/2020/02/27/%E5%89%91%E6%8C%87offer-%E4%B8%91%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。例如 6、8 都是丑数，但 14 不是，因为它包含因子 7。习惯上我们把 1 当做是第一个丑数。求按从小到大的顺序的第 N 个丑数。</p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: n = 10</span><br><span class="line">输出: 12</span><br><span class="line">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></pre></td></tr></table></figure>

<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">6</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="number">0</span>, k3 = <span class="number">0</span>, k5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> next2 = dp[k2] * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> next3 = dp[k3] * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> next5 = dp[k5] * <span class="number">5</span>;</span><br><span class="line">    dp[i] = Math.min(next2,Math.min(next3,next5));</span><br><span class="line">    <span class="keyword">if</span> (dp[i] == next2) k2++;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] == next3) k3++;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] == next5) k5++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://leetcode-cn.com/problems/chou-shu-lcof/" target="_blank" rel="noopener">leet-code</a></li>
<li><a href="https://www.nowcoder.com/practice/6aa9e04fc3794f68acf8778237ba065b?tpId=13&tqId=11186&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">nowcoder</a></li>
</ul>
]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket</title>
    <url>/2020/02/27/Socket/</url>
    <content><![CDATA[<h1 id="1-I-O-模型"><a href="#1-I-O-模型" class="headerlink" title="1. I/O 模型"></a>1. I/O 模型</h1><h2 id="1-1-阻塞式-I-O"><a href="#1-1-阻塞式-I-O" class="headerlink" title="1.1 阻塞式 I/O"></a>1.1 阻塞式 I/O</h2><p>​    应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区才返回。在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着操作系统都被阻塞。因为其它的应用进程还可以执行，所有不消耗CPU时间，这种模型的CPU利用率较高。下图中的 recvfrom() 函数可以被看做为系统调用。</p>
<a id="more"></a>

<p><img src="/2020/02/27/Socket/1.png" alt></p>
<h2 id="1-2-非阻塞式-I-O"><a href="#1-2-非阻塞式-I-O" class="headerlink" title="1.2 非阻塞式 I/O"></a>1.2 非阻塞式 I/O</h2><p>​    应用进程执行系统调用后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式也称为轮询。由于要不停地执行系统调用，因此这种 I/O 模型的 CPU 利用率不高。</p>
<p><img src="/2020/02/27/Socket/2.png" alt></p>
<h2 id="1-3-I-O-复用"><a href="#1-3-I-O-复用" class="headerlink" title="1.3 I/O 复用"></a>1.3 I/O 复用</h2><p>​    使用select 或 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再执行系统调用把数据从内核中复制出来。它可以让单个进程拥有处理多个 I/O 事件的能力，又被称为事件驱动 I/O。假如一个 WEB 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程或多线程，I/O 复用不需要进程线程创建和切换的开销。</p>
<p><img src="/2020/02/27/Socket/3.png" alt></p>
<h2 id="1-4-信号驱动-I-O"><a href="#1-4-信号驱动-I-O" class="headerlink" title="1.4 信号驱动 I/O"></a>1.4 信号驱动 I/O</h2><p>​    应用进程执行系统调用，内核立即返回，应用进程可以继续执行，也就是说在数据等待阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送一个信号，应用进程收到信号后，再执行系统调用，将数据从内核复制到应用进程中。</p>
<p><img src="/2020/02/27/Socket/4.png" alt></p>
<h2 id="1-5-异步-I-O"><a href="#1-5-异步-I-O" class="headerlink" title="1.5 异步 I/O"></a>1.5 异步 I/O</h2><p>​    应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作执行完毕后向应用进程发送信号。异步 I/O 与信号驱动 I/O 的区别就在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 是通知应用进程可以开始 I/O。</p>
<p><img src="/2020/02/27/Socket/5.png" alt></p>
<h1 id="2-I-O-多路复用"><a href="#2-I-O-多路复用" class="headerlink" title="2. I/O 多路复用"></a>2. I/O 多路复用</h1><p>​    select/poll/epoll 都是 I/O 多路复用的具体实现。</p>
<h2 id="2-1-select"><a href="#2-1-select" class="headerlink" title="2.1 select"></a>2.1 select</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>select 允许应用程序监视一组文件描述符，等待一个或多个文件描述符成为就绪状态，从而完成 I/O 操作。</p>
<ul>
<li>fd_set 使用1024大小的位图来实现，有三种类型的描述符分别是读、写、异常的描述符集合；</li>
<li>timeout 为超时参数，调用 select 会一直阻塞，直到有描述符的事件到达或等待的事件超过 timeout；</li>
<li>缺点：<ul>
<li>由于位图的限制，只能监听少量的文件描述符；</li>
<li>当文件描述符的事件完成后，会重置 bitmap ，因此不能复用；</li>
<li>用户态与内核态切换所带来的开销，需要先从用户进程复制数据到内核，当内核数据准备完成后，又从内核中复制数据到用户进程。</li>
<li>只能通知文件描述符的置位，无法确定位置，因此需要通过遍历来查找。</li>
</ul>
</li>
</ul>
<h2 id="2-2-poll"><a href="#2-2-poll" class="headerlink" title="2.2 poll"></a>2.2 poll</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">               <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">               <span class="keyword">short</span> events;     <span class="comment">/* requested events */</span></span><br><span class="line">               <span class="keyword">short</span> revents;    <span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>poll 的功能与 select 相似，但是 poll 中的文件描述符是使用的 pollfd 类型的数组。</p>
<p>比较：</p>
<ul>
<li>select 会修改 bitmap 中的描述符，poll 修改的是 pollfd 结构中的 revents，revents 一开始是0，当有数据来的时候，会变为 POLLIN；</li>
<li>select 会受到大小的限制，默认不超过1024，而 poll 没有数量的限制；</li>
<li>select 中的描述符不可重用，但是 poll 中的可以重用；</li>
<li>select 与 poll 的速度都比较慢，每次需要通过遍历数组来得知那些文件描述符发生了变化，且每次调用都会将数据从用户进程复制到内核，再将数据从内核复制到用户进程。</li>
</ul>
<h2 id="2-3-epoll"><a href="#2-3-epoll" class="headerlink" title="2.3 epoll"></a>2.3 epoll</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​    epoll_ctl用于向内核注册新的描述符。已经注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数，内核会将I/O准备好的描述符添加到一个链表中管理，进程调用epoll_wait便可以得到事件完成的描述符链表，解决了以O（n）复杂度来遍历文件描述符的问题。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的复制只有一次。</p>
<h3 id="2-3-1-工作模式"><a href="#2-3-1-工作模式" class="headerlink" title="2.3.1 工作模式"></a>2.3.1 工作模式</h3><ul>
<li>LT模式：当epoll_wait()检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用epoll__wait()会再次通知进程</li>
<li>ET模式：通知之后进程必须立即处理事件，下次再调用epoll_wait()时不会再得到事件到达的通知。很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener">Linux IO 模式及 select、poll、epoll 详解</a></li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2020/02/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="1-基本特征"><a href="#1-基本特征" class="headerlink" title="1. 基本特征"></a>1. 基本特征</h1><h2 id="1-1-并发"><a href="#1-1-并发" class="headerlink" title="1.1 并发"></a>1.1 并发</h2><p>​    并发是指宏观上在一段时间内运行多个程序（但单位时间内，并不是都在一起执行），而并行是值同一时刻能运行多个程序。并行需要硬件支持，例如多喝处理器或分布式系统；并发则是操作系统通过引入进程和线程来完成的。</p>
<a id="more"></a>

<h2 id="1-2-共享"><a href="#1-2-共享" class="headerlink" title="1.2 共享"></a>1.2 共享</h2><p>​    共享是指系统中的资源可以被多个并发进程共同使用，通常由两种共享方式：互斥共享和同时共享。互斥共享的资源又被称为临界资源，例如打印机，在同一时刻只允许一个进程访问。</p>
<h2 id="1-3-虚拟"><a href="#1-3-虚拟" class="headerlink" title="1.3 虚拟"></a>1.3 虚拟</h2><p>​    虚拟技术把一个物理实体转换为多个逻辑实体，主要有两种虚拟技术：时分复用技术和空分复用技术。</p>
<ul>
<li>时分复用技术：多个进程可以在同一个处理器上并发地执行，每个进程轮流使用处理器，每次只执行一个时间片。</li>
<li>空分复用技术：虚拟内存，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用一个没有在物理内存的页时，使用页面置换算法，将需要的页置换到内存中。</li>
</ul>
<h2 id="1-4-随机"><a href="#1-4-随机" class="headerlink" title="1.4 随机"></a>1.4 随机</h2><p>​    操作系统必须随时对以不可预测的次序发生的事件进程响应并处理，例如：</p>
<ul>
<li>进程的运行速度不可预知：多个进程并发地执行，无法预知每个进程运行的快慢。</li>
<li>难以重现系统在某个时刻的状态。</li>
</ul>
<h1 id="2-内核态与用户态"><a href="#2-内核态与用户态" class="headerlink" title="2. 内核态与用户态"></a>2. 内核态与用户态</h1><h2 id="2-1-内核态"><a href="#2-1-内核态" class="headerlink" title="2.1 内核态"></a>2.1 内核态</h2><p>​    当进程执行系统调用而进入内核代码中执行时，则称该进程处于内核态，CPU可以访问所有的数据，包括硬盘、网卡等。</p>
<h2 id="2-2-用户态"><a href="#2-2-用户态" class="headerlink" title="2.2 用户态"></a>2.2 用户态</h2><p>​    当进程执行用户自己的代码时，则称该进程处于用户态，用户态只能受限的访问内存，不被允许访问硬盘、网卡等设备的数据。</p>
<h2 id="2-3-用户态与内核态的切换"><a href="#2-3-用户态与内核态的切换" class="headerlink" title="2.3 用户态与内核态的切换"></a>2.3 用户态与内核态的切换</h2><p>​    用户态切换到内核态只有三种方式：系统调用、外部设备的中断、异常处理，而内核态切换到用户态设置程序状态字PSW，修改其使用权限。</p>
<h3 id="2-3-1-系统调用"><a href="#2-3-1-系统调用" class="headerlink" title="2.3.1 系统调用"></a>2.3.1 系统调用</h3><p>​    系统调用也是中断的一种，如果一个进程在用户态需要使用内核态的功能，例如从磁盘中读取数据，就进行系统调用从而进入内核态，由操作系统来代为完成。</p>
<h3 id="2-3-2-外部设备的中断"><a href="#2-3-2-外部设备的中断" class="headerlink" title="2.3.2 外部设备的中断"></a>2.3.2 外部设备的中断</h3><p>​    由CPU执行指令以外的事件引起，例如 I/O完成中断、控制台中断、时钟中断等。</p>
<h3 id="2-3-3-异常处理"><a href="#2-3-3-异常处理" class="headerlink" title="2.3.3 异常处理"></a>2.3.3 异常处理</h3><p>​    当CPU正在执行运行在用户态的进程时，突然发生某些不可预知的异常事件，这时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，异常事件并非都是不好的，例如：缺页异常。</p>
<h1 id="3-进程管理"><a href="#3-进程管理" class="headerlink" title="3. 进程管理"></a>3. 进程管理</h1><h2 id="3-1-进程与线程"><a href="#3-1-进程与线程" class="headerlink" title="3.1 进程与线程"></a>3.1 进程与线程</h2><h3 id="3-1-1-进程"><a href="#3-1-1-进程" class="headerlink" title="3.1.1 进程"></a>3.1.1 进程</h3><p>​    进程是资源分配的基本单位。进程控制块（Process Control Block，PCB）描述了进程的基本信息和运行状态，所谓的创建进程和撤销进程，其实就是对进程控制块的操作。</p>
<h3 id="3-1-2-线程"><a href="#3-1-2-线程" class="headerlink" title="3.1.2 线程"></a>3.1.2 线程</h3><p>​    线程是独立调用的基本单位。一个进程中可以拥有多个线程，这些线程共享这个进程的系统资源。</p>
<h3 id="3-1-3-进程与线程的区别"><a href="#3-1-3-进程与线程的区别" class="headerlink" title="3.1.3 进程与线程的区别"></a>3.1.3 进程与线程的区别</h3><h4 id="3-1-3-1-资源"><a href="#3-1-3-1-资源" class="headerlink" title="3.1.3.1 资源"></a>3.1.3.1 资源</h4><p>​    进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</p>
<h4 id="3-1-3-2-调度"><a href="#3-1-3-2-调度" class="headerlink" title="3.1.3.2 调度"></a>3.1.3.2 调度</h4><p>​    线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程的切换，从一个进程中的线程切换到另一个进程中的线程会引起进程的切换。</p>
<h4 id="3-1-3-3-系统开销"><a href="#3-1-3-3-系统开销" class="headerlink" title="3.1.3.3 系统开销"></a>3.1.3.3 系统开销</h4><p>​    由于创建和撤销进程，系统都要为其分配或回收资源，所付出的开销远大于线程的开销。当进程进行切换的时候，涉及到当前执行进程CPU环境的保存以及新调度进程CPU环境的设置，而线程切换只需要保存和设置少量得的寄存器内容，开销很小。</p>
<h2 id="3-2-进程状态的切换"><a href="#3-2-进程状态的切换" class="headerlink" title="3.2 进程状态的切换"></a>3.2 进程状态的切换</h2><p>​    进程分为以下的状态：就绪状态、运行状态、阻塞状态。只有就绪状态和运行状态可以相互转换，其它的都是单向转换，就绪状态的进程通过调度算法获得CPU时间，转换为运行态；而运行态的进程在将CPU分配的时间片用完后，转换为就绪态。阻塞态是运行态由于缺少需要的资源转换而来的，但是该资源不包括CPU时间。</p>
<h3 id="3-3-进程调度算法"><a href="#3-3-进程调度算法" class="headerlink" title="3.3 进程调度算法"></a>3.3 进程调度算法</h3><p>​    不同环境的调度算法目标不同。</p>
<h3 id="3-3-1-批处理系统"><a href="#3-3-1-批处理系统" class="headerlink" title="3.3.1 批处理系统"></a>3.3.1 批处理系统</h3><p>​    批处理系统中没有太多的用户操作，因此该系统的调度算法目标是保证吞吐量和周转时间。</p>
<ol>
<li>先来先服务：非抢占式的调度算法，按照请求的顺序进行调度。该算法不利于短作业。</li>
<li>短作业优先：非抢占式的调度算法，按预估运行时间最短的顺序进行调度，但是该算法不利于长作业，会产生饥饿现象。</li>
<li>最短剩余时间优先：短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。当一个新的作业到达时，将其余运行时间与当前进程的剩余时间做比较。如果新的作业需要的时间更少，则挂起当前进程，运行新的进程，否则新的进程等待。</li>
</ol>
<h3 id="3-3-2-交互式系统"><a href="#3-3-2-交互式系统" class="headerlink" title="3.3.2 交互式系统"></a>3.3.2 交互式系统</h3><p>​    交互式系统中有大量的用户，因此要保证的是快速地进行响应。</p>
<ol>
<li>时间片轮转：将所有的就绪进程按照先来先服务的规则排成一个队列，每个调度时，将CPU时间分配给队首进程。</li>
<li>优先级调度：为每个进程分配一个优先级，按照优先级进行调度。</li>
<li>多级反馈队列：设置多个就绪队列，第一级队列优先级最高。给不同就绪队列中的进程分配长度不同的时间片，第一级队列时间片最小；随着队列优先级的降低，时间片增大。当一个新创建进程就绪后，进入第一级队列，进程用完时间片后，进入下一级就绪队列。由于阻塞而等待的线程进入相应的等待度低了，一旦等待的事件发生，该进程回到原来一级就绪队列。</li>
</ol>
<h2 id="3-4-进程同步"><a href="#3-4-进程同步" class="headerlink" title="3.4 进程同步"></a>3.4 进程同步</h2><h3 id="3-4-1-临界区"><a href="#3-4-1-临界区" class="headerlink" title="3.4.1 临界区"></a>3.4.1 临界区</h3><p>​    对临界资源访进行访问的那段代码称为临界区。</p>
<h3 id="3-4-2-同步"><a href="#3-4-2-同步" class="headerlink" title="3.4.2 同步"></a>3.4.2 同步</h3><p>​    多个进程中发生的事件存在某种时序关系，需要相互合作，共同完成一项任务。例如：一个进程运行到某一个点，要求另一个进程为它提供消息，在未获得消息之前，该进程进入阻塞态。</p>
<h3 id="3-4-3-互斥"><a href="#3-4-3-互斥" class="headerlink" title="3.4.3 互斥"></a>3.4.3 互斥</h3><p>​    多个进程在同一时刻只有一个进程能访问临界区。</p>
<h3 id="3-4-4-信号量"><a href="#3-4-4-信号量" class="headerlink" title="3.4.4 信号量"></a>3.4.4 信号量</h3><p>​    信号量是一个整型变量，可以对其执行down和up操作，也就是常说的 p 和 v 操作。</p>
<ul>
<li>down：如果信号量大道与 0 ，执行 - 1 操作；如果信号量等于 0 ，进程睡眠，等待信号量大于0；</li>
<li>up：对信号量执行 +1 操作。</li>
</ul>
<h3 id="3-4-5-管程"><a href="#3-4-5-管程" class="headerlink" title="3.4.5 管程"></a>3.4.5 管程</h3><p>​    由于使用信号量机制实现的生产者消费者问题，需要对代码做很多控制，而管程就是把控制的代码独立出来。在一个时刻，只能由一个进程使用管程。</p>
<h2 id="3-5-进程通信"><a href="#3-5-进程通信" class="headerlink" title="3.5 进程通信"></a>3.5 进程通信</h2><h3 id="3-5-1-管道"><a href="#3-5-1-管道" class="headerlink" title="3.5.1 管道"></a>3.5.1 管道</h3><p>​    管道是通过调用pipe函数创建的，但是他有两个限制：</p>
<ol>
<li>只支持半双工通信</li>
<li>只能在父子进程或者兄弟进程中使用</li>
</ol>
<h3 id="3-5-2-FIFO"><a href="#3-5-2-FIFO" class="headerlink" title="3.5.2 FIFO"></a>3.5.2 FIFO</h3><p>​    又称为命名管道，去除了只能在父子进程间使用的限制。</p>
<h3 id="3-5-3-消息队列"><a href="#3-5-3-消息队列" class="headerlink" title="3.5.3 消息队列"></a>3.5.3 消息队列</h3><p>​    消息队列是由消息组成的链表，存放在内核中，并由消息队列标识符标识。</p>
<h3 id="3-5-4-信号量"><a href="#3-5-4-信号量" class="headerlink" title="3.5.4 信号量"></a>3.5.4 信号量</h3><p>​    它是一个计数器，用于为多个进程提供对共享数据对象的访问。</p>
<h3 id="3-5-5-共享内存"><a href="#3-5-5-共享内存" class="headerlink" title="3.5.5 共享内存"></a>3.5.5 共享内存</h3><p>​    允许多个进程共享一块给定的内存。这块共享内存由一个进程创建，但是多个进程都可以访问。</p>
<h3 id="3-5-6-套接字"><a href="#3-5-6-套接字" class="headerlink" title="3.5.6 套接字"></a>3.5.6 套接字</h3><p>​    它用于不通过机器间的进程通信。</p>
<h1 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4. 内存管理"></a>4. 内存管理</h1><h2 id="4-1-虚拟内存"><a href="#4-1-虚拟内存" class="headerlink" title="4.1 虚拟内存"></a>4.1 虚拟内存</h2><p>​    虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。当进程运行时，先将其一部分装入内存，另一部分留在磁盘，当要执行的指令或访问的数据不在内存时，由操作系统自动完成将其从磁盘调度到内存的工作。</p>
<p><img src="/2020/02/26/操作系统/1.png" alt></p>
<h2 id="4-2-系统地址映射"><a href="#4-2-系统地址映射" class="headerlink" title="4.2 系统地址映射"></a>4.2 系统地址映射</h2><h3 id="4-2-1-页式（虚拟内存采用的技术）"><a href="#4-2-1-页式（虚拟内存采用的技术）" class="headerlink" title="4.2.1 页式（虚拟内存采用的技术）"></a>4.2.1 页式（虚拟内存采用的技术）</h3><p>​    用户进程地址空间被划分为大小相等的部分，称为页或者页面，从0开始编号。内存空间按同样大小划分为等大小的区域，称为页框，从0开始编号。一个虚拟地址分为两部分，一部分是页号，另一部分是内存中的偏移量，例如在一个32位的系统中，逻辑地址是32位，前20位是页号，后12位是偏移量。内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。</p>
<h3 id="4-2-2-段式"><a href="#4-2-2-段式" class="headerlink" title="4.2.2 段式"></a>4.2.2 段式</h3><p>​    按程序自身的逻辑划分为若干个程序段，每个程序段都有一个段名。内存空间也被换分为若干个不相同的区域，称为物理段。每个进程中都有一个段表，段表记录了每个程序段的段号，段首地址和段长度之间的关系。</p>
<h3 id="4-2-3-段页式"><a href="#4-2-3-段页式" class="headerlink" title="4.2.3 段页式"></a>4.2.3 段页式</h3><p>​    程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。</p>
<h3 id="4-3-页面置换算法"><a href="#4-3-页面置换算法" class="headerlink" title="4.3 页面置换算法"></a>4.3 页面置换算法</h3><p>​    在程序运行过程当中，如果要访问的页面不在内存中，就会发生缺页异常，操作系统从而将该页调入内存中，如果此时内存中已经无空闲空间，就必须从内存中调出一个页面到磁盘对换区中，用来腾出空间。页面置换算法的主要目标是使页面置换频率最低。</p>
<h3 id="4-3-1-最佳-OPT"><a href="#4-3-1-最佳-OPT" class="headerlink" title="4.3.1 最佳 OPT"></a>4.3.1 最佳 OPT</h3><p>​    该算法所换出来的页面将是最长时间内不再被访问的，通常可以保证最低的缺页率，不过这只是一种理论上的算法。</p>
<h3 id="4-3-2-先进先出-FIFO"><a href="#4-3-2-先进先出-FIFO" class="headerlink" title="4.3.2 先进先出 FIFO"></a>4.3.2 先进先出 FIFO</h3><p>​    选择换出的页面是最先进入的页面。</p>
<h3 id="4-3-3-第二次机会算法"><a href="#4-3-3-第二次机会算法" class="headerlink" title="4.3.3 第二次机会算法"></a>4.3.3 第二次机会算法</h3><p>​    为了避免先进先出算法可能把经常使用的页面换出，做了一个修改，设置一个访问位。当算法选择某一个页面时，检查其访问位，如果是0，则置换该页；如果是1，则给第二次机会，将访问位置0。</p>
<h3 id="4-3-4-最近未使用-NRU"><a href="#4-3-4-最近未使用-NRU" class="headerlink" title="4.3.4 最近未使用 NRU"></a>4.3.4 最近未使用 NRU</h3><p>​    选择出在最近一段时间内未使用过的一页并置换。</p>
<h3 id="4-3-5-最近最少使用-LRU"><a href="#4-3-5-最近最少使用-LRU" class="headerlink" title="4.3.5 最近最少使用 LRU"></a>4.3.5 最近最少使用 LRU</h3><p>​    选择出最后一次访问时间距离当前时间最长的一页并置换。</p>
<h1 id="5-磁盘管理"><a href="#5-磁盘管理" class="headerlink" title="5. 磁盘管理"></a>5. 磁盘管理</h1><h2 id="5-1-磁盘结构"><a href="#5-1-磁盘结构" class="headerlink" title="5.1 磁盘结构"></a>5.1 磁盘结构</h2><ul>
<li>盘面（Platter）：一个磁盘有多个盘面。</li>
<li>磁道（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道。</li>
<li>扇区（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理存储单元。</li>
<li>磁头（Head）：与盘面非常接近，能将盘面上的磁场转换为电信号（读操作）或将电信号转换为盘面的磁场（写操作）。</li>
<li>制动手臂（Actuator arm）：用于在磁道之间移动磁头。</li>
<li>主轴（Spindle）：使整个盘面转动。</li>
</ul>
<p><img src="/2020/02/26/操作系统/2.png" alt></p>
<h2 id="5-2-磁盘调度算法"><a href="#5-2-磁盘调度算法" class="headerlink" title="5.2 磁盘调度算法"></a>5.2 磁盘调度算法</h2><h3 id="5-2-1-先来先服务"><a href="#5-2-1-先来先服务" class="headerlink" title="5.2.1 先来先服务"></a>5.2.1 先来先服务</h3><p>​    按照磁盘的请求顺序进行调度。</p>
<h3 id="5-2-2-最短寻道时间优先"><a href="#5-2-2-最短寻道时间优先" class="headerlink" title="5.2.2 最短寻道时间优先"></a>5.2.2 最短寻道时间优先</h3><p>​    优先调度与当前磁头所在磁道距离最近的磁道。</p>
<h3 id="5-2-3-电梯算法"><a href="#5-2-3-电梯算法" class="headerlink" title="5.2.3 电梯算法"></a>5.2.3 电梯算法</h3><p>​    当设备不访问请求时，磁头不动；当有访问请求时，磁头按一个方向移动，在移动的过程中对遇到的访问请求进行服务，然后判断该方向上是否还有访问请求，如果有则继续扫描；否则改变方向，并为经过的访问请求服务。</p>
<p><img src="/2020/02/26/操作系统/3.png" alt></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2020/02/24/HTTP/</url>
    <content><![CDATA[<h1 id="1-URI-与-URL"><a href="#1-URI-与-URL" class="headerlink" title="1. URI 与 URL"></a>1. URI 与 URL</h1><ul>
<li>URI：统一资源标识符：标识某一互联网的资源</li>
<li>URL：统一资源定位符：表示互联网资源所在的地址</li>
</ul>
<a id="more"></a>

<h1 id="2-HTTP-方法"><a href="#2-HTTP-方法" class="headerlink" title="2. HTTP 方法"></a>2. HTTP 方法</h1><p>​    客户端发送的请求报文第一行为请求行，包含了方法字段。</p>
<ul>
<li>GET：获取资源。GET 方法用来请求访问已被URI识别的资源。指定的资源经服务端解析后返回响应内容</li>
<li>POST：传输实体主体。POST 方法主要用来传输数据。</li>
<li>HEAD：获取报文首部。和GET方法类似，但是不返回报文实体主体部分。主要用于确认URL的有效性以及资源更新的日期时间等。</li>
<li>PUT；传输文件。</li>
<li>PATCH：对资源进行部分修改。PUT 方法也可以用于修改资源，但是只能完全替代，而PATCH 运行部分修改。</li>
<li>DELETE：删除文件。</li>
</ul>
<h1 id="3-HTTP-状态码"><a href="#3-HTTP-状态码" class="headerlink" title="3. HTTP 状态码"></a>3. HTTP 状态码</h1><h2 id="3-1-1XX-表示正在对请求进行处理"><a href="#3-1-1XX-表示正在对请求进行处理" class="headerlink" title="3.1 1XX 表示正在对请求进行处理"></a>3.1 1XX 表示正在对请求进行处理</h2><ul>
<li>100：表明到目前为止都很正常，客户端可以继续发送请求或忽略这个响应。</li>
</ul>
<h2 id="3-2-2XX-表示请求被成功处理"><a href="#3-2-2XX-表示请求被成功处理" class="headerlink" title="3.2 2XX 表示请求被成功处理"></a>3.2 2XX 表示请求被成功处理</h2><ul>
<li>200：客户端发来的请求被正常处理了。</li>
<li>204：请求处理成功了，但是没有资源可以返回。</li>
<li>206：客户端进行了范围请求，服务器成功执行了这部分的请求。</li>
</ul>
<h2 id="3-3-3XX-重定向"><a href="#3-3-3XX-重定向" class="headerlink" title="3.3 3XX 重定向"></a>3.3 3XX 重定向</h2><ul>
<li>301：永久性重定向，请求的资源已经被分配新的URI，用户以后也应该使用新的URI。</li>
<li>302：临时性重定向，请求的资源已经被分配新的URI，希望用户本次能使用该URI来访问，但是该资源的URI后面可能还会变化。</li>
</ul>
<h2 id="3-4-4XX-客户端错误"><a href="#3-4-4XX-客户端错误" class="headerlink" title="3.4 4XX 客户端错误"></a>3.4 4XX 客户端错误</h2><ul>
<li>400：请求报文中存在语法错误，服务器无法识别。</li>
<li>403：客户端请求的资源被服务器拒绝了。</li>
<li>404：请求的资源不存在。</li>
</ul>
<h2 id="3-5-5XX-服务器错误"><a href="#3-5-5XX-服务器错误" class="headerlink" title="3.5 5XX 服务器错误"></a>3.5 5XX 服务器错误</h2><ul>
<li>500：服务器内部发生错误。</li>
<li>502：常出现于nginx服务器中，由于 FastCGI 缓冲区过小、php-fpm 的进程数设置过少、php 执行超时等。</li>
<li>503：服务器由于正在停机维护或者暂时处于超负载，无法处理请求。</li>
<li>504：网关超时，当服务器作为网关或代理，没有及时从上有服务器收到请求。</li>
</ul>
<h1 id="4-Cookie-与-Session"><a href="#4-Cookie-与-Session" class="headerlink" title="4. Cookie 与 Session"></a>4. Cookie 与 Session</h1><h2 id="4-1-Cookie"><a href="#4-1-Cookie" class="headerlink" title="4.1 Cookie"></a>4.1 Cookie</h2><p>​    HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能处理大量的数据。HTTP/1.1 引入 Cookie 来保存状态信息。</p>
<p>​    Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一个浏览器。由于之后每次请求都会需要携带 cookie 数据，因此会带来额外的性能开销。</p>
<h3 id="4-1-1-用途"><a href="#4-1-1-用途" class="headerlink" title="4.1.1 用途"></a>4.1.1 用途</h3><ol>
<li>会话状态管理（如用户登录状态、购物车等信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
</ol>
<h3 id="4-1-2-创建过程"><a href="#4-1-2-创建过程" class="headerlink" title="4.1.2 创建过程"></a>4.1.2 创建过程</h3><p>​    服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内保存到浏览器中。</p>
<p>​    客户端之后对同一服务器发送请求时，会从浏览器取出 Cookie 信息并通过 Cookie 请求首部字段发送给服务器。</p>
<h3 id="4-1-3-Secure"><a href="#4-1-3-Secure" class="headerlink" title="4.1.3 Secure"></a>4.1.3 Secure</h3><p>​    标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p>
<h2 id="4-2-Session"><a href="#4-2-Session" class="headerlink" title="4.2 Session"></a>4.2 Session</h2><p>​    Session 用于记录用户在服务器上的状态，可以存储在服务端上的文件、数据库或内存中，也可以将 Session 存储在 Redis 这种内存型数据库中。</p>
<p>​    使用 Session 维护用户登录状态的过程如下：</p>
<ul>
<li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li>
<li>服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 key 称为 Session ID;</li>
<li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie值存入浏览器中；</li>
<li>客户端之后对同一服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Rediis 中取出用户信息，继续之前的业务操作。</li>
</ul>
<h2 id="4-3-Cookie-与-Session-选择"><a href="#4-3-Cookie-与-Session-选择" class="headerlink" title="4.3 Cookie 与 Session 选择"></a>4.3 Cookie 与 Session 选择</h2><ul>
<li>Cookie 只能存储 ASCII 码字符串，而 Session 可以存储任何类型的数据，因此在考虑数据复杂性时首选可以 Session；</li>
<li>Cookie 存储在浏览器中，而 Session 存储在服务器中</li>
<li>不建议将所有的用户信息都存储在 Session 中，开销会非常大。</li>
</ul>
<h1 id="5-HTTP-1-0-和-HTTP-1-1-的区别"><a href="#5-HTTP-1-0-和-HTTP-1-1-的区别" class="headerlink" title="5. HTTP 1.0 和 HTTP 1.1 的区别"></a>5. HTTP 1.0 和 HTTP 1.1 的区别</h1><ol>
<li>长连接：在HTTP 1.0中，默认使用的是短链接，也就是说每次请求都会建立一次连接，请求次数过多的话会造成开销较大，可以用一个长连接来发多个请求。在 HTTP 1.1中，默认使用长连接。且长连接方式分为流水线和非流水线方式。<ol>
<li>流水线方式：客户端在收到 HTTP 响应报文之前，可以接着发送请求报文；</li>
<li>非流水线方式：客户端在收到前一个响应之后才能发送下一个请求。</li>
</ol>
</li>
<li>错误状态响应码：在HTTP 1.1 之中，新增了24个错误状态响应码。</li>
<li>支持同时打开多个TCP连接。</li>
</ol>
<h1 id="6-HTTPS"><a href="#6-HTTPS" class="headerlink" title="6. HTTPS"></a>6. HTTPS</h1><p>​    HTTP 有以下安全问题：</p>
<ul>
<li>使用明文进行通信，内容可能被窃听；</li>
<li>无法验证通信方的身份，通信方的身份有可能是被伪装的；</li>
<li>无法证明报文的完整性，报文有可能遭篡改</li>
</ul>
<p>​        HTTP 并不是新协议，而是让 HTTP 建立在 SSL 与 TLS 协议之上，通过 SSL 之后，HTTPS 具有了加密、认证、和完整性保护。</p>
<h2 id="6-1-加密"><a href="#6-1-加密" class="headerlink" title="6.1 加密"></a>6.1 加密</h2><h3 id="6-1-1-对称密钥加密"><a href="#6-1-1-对称密钥加密" class="headerlink" title="6.1.1 对称密钥加密"></a>6.1.1 对称密钥加密</h3><p>​    对称密钥加密，加密和解密使用的是同一个密钥。</p>
<ul>
<li>优点：运算速度快；</li>
<li>缺点：无法安全的将密钥传输给通信方。</li>
</ul>
<p><img src="/2020/02/24/HTTP/1.png" alt></p>
<h3 id="6-1-2-非对称密钥加密"><a href="#6-1-2-非对称密钥加密" class="headerlink" title="6.1.2 非对称密钥加密"></a>6.1.2 非对称密钥加密</h3><p>​    非对称密钥加密，又称公开密钥加密，加密和解密使用不同的密钥。公开密钥所有人都可以获得，通信方获得接收方的公开密钥后，就可以使用公开密钥加密，接收方收到通信内容后，使用私有密钥解密。</p>
<ul>
<li>优点：可以更安全地将公开密钥传输给通信方；</li>
<li>缺点：运算速度慢。</li>
</ul>
<p><img src="/2020/02/24/HTTP/2.png" alt></p>
<h3 id="6-1-3-HTTPS采用的加密方式"><a href="#6-1-3-HTTPS采用的加密方式" class="headerlink" title="6.1.3 HTTPS采用的加密方式"></a>6.1.3 HTTPS采用的加密方式</h3><p>​    HTTPS采用混合的加密机制：</p>
<ol>
<li>使用非堆成加秘的方式，传输对称密钥加密方式所需要的 Secret Key，从而保证了安全性；</li>
<li>获取到 Secret Key 后，再使用对称加密方式进行通信，从而保证效率。</li>
</ol>
<h2 id="6-2-证书"><a href="#6-2-证书" class="headerlink" title="6.2 证书"></a>6.2 证书</h2><p>​    通过使用证书来对通信方进行认证。数字认证机构是客户端与服务端双方都可信赖的第三方机构。</p>
<p>​    服务器的运营人员向数字认证机构提出公开密钥的申请，认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书中。进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥后，先使用数字签名认证，如果验证通过，就可以开始通信了。</p>
<p><img src="/2020/02/24/HTTP/3.png" alt></p>
<h2 id="6-3-完整性保护"><a href="#6-3-完整性保护" class="headerlink" title="6.3 完整性保护"></a>6.3 完整性保护</h2><p>​    HTTPS 的报文摘要之所以安全，是因为它结合了加密和认证这两个操作。因为加密之后的报文，遭到篡改之后很难重新计算报文摘要，因为无法轻易获取明文。</p>
<h2 id="6-4-HTTPS-的握手过程"><a href="#6-4-HTTPS-的握手过程" class="headerlink" title="6.4 HTTPS 的握手过程"></a>6.4 HTTPS 的握手过程</h2><p><img src="/2020/02/24/HTTP/4.png" alt></p>
<ol>
<li>客户端发送一个 Client Hello 报文，里面包含了一个随机数 Random1、客户端支持的 SSL 版本以及支持的加密组件列表；</li>
<li>服务端收到后，会发送一个 Server Hello 报文，其中包含了另一个随机数 Random2、后续会使用的 SSL 版本以及加密组件；</li>
<li>服务端再发送一个 Certificate 报文，其中包含了绑定了公开密钥的证书；</li>
<li>服务端发送一个 Server Hello Done 报文，表示第一次握手结束；</li>
<li>客户端生成一个随机数 Random3，并使用公开密钥加密为 Pre-Master key，发送一个 Client Key Change 报文，服务端通过私有密钥解密，获得随机数3，此时客户端和服务端都有了 Random1+Random2+Random3,然后两边再根据相同的算法就可以生成一份共享密钥，后面的报文都会使用该密钥来加密；</li>
<li>客户端发送一个 Change Cipher Spec 报文，此时这个报文已经使用共享密钥加密；</li>
<li>客户端再发送一个 Finished 报文，该报文包含连接至今的所有报文的校验值，如果服务端能用协商好的密钥解密，则证明密钥是一致的；</li>
<li>服务端也发送一个 Change Cipher Spec 报文；</li>
<li>服务端再发送一个 Server Finished 报文，如果客户端能用协商好的密钥解密，则证明密钥是一致的；</li>
</ol>
<h1 id="7-浏览器中输入URL地址—-gt-显示主页的过程"><a href="#7-浏览器中输入URL地址—-gt-显示主页的过程" class="headerlink" title="7. 浏览器中输入URL地址—-&gt;显示主页的过程"></a>7. 浏览器中输入URL地址—-&gt;显示主页的过程</h1><ol>
<li>浏览器查找域名的IP地址（DNS协议）</li>
<li>TCP连接（TCP协议、IP协议、OPSF协议、ARP协议）</li>
<li>浏览器向WEB服务器发送一个HTTP请求（HTTP协议）</li>
<li>服务器处理请求并返回HTTP响应报文</li>
<li>浏览器解析并渲染页面</li>
</ol>
<h1 id="8-补充知识：DNS"><a href="#8-补充知识：DNS" class="headerlink" title="8. 补充知识：DNS"></a>8. 补充知识：DNS</h1><p>DNS（Domain Name System，域名系统），因特网上作为域名与 IP 地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住 IP 地址。通过主机名，最终得到该主机名对应的 IP 地址的过程叫做域名解析。</p>
<p>##8.1 域名解析的过程</p>
<ol>
<li>请求一旦发起，如果chrome浏览器，先在浏览器找之前有没有缓存过的域名所对应的 IP 地址，如果有的话，直接跳过域名解析，若是没有，则会寻找硬盘中的 hosts 文件，看看有没有，有的话，直接找到 hosts 文件里面的 IP。</li>
<li>如果本地的 hosts 文件没能得到对应的 IP 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器，本地 DNS 服务器一般都是由网络接入商提供，比如中国电信、中国移动等等。</li>
<li>DNS 请求到达本地 DNS 服务器后，本地 DNS 服务器会首先查询它的缓存记录，如果缓存记录中有此条记录，就可以直接返回结果，此过程是以递归的方式进行查询。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查阅。</li>
<li>本地 DNS 服务器机型向域服务器发出请求。假如，请求的是 .com 域服务器。 .com 域服务器收到i请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。</li>
<li>最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和 IP 地址的对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个映射关系保存在缓存中，以便下次查询时，可以直接返回结果。</li>
</ol>
<p><img src="/2020/02/24/HTTP/5.png" alt></p>
<h2 id="8-2-查询方式"><a href="#8-2-查询方式" class="headerlink" title="8.2 查询方式"></a>8.2 查询方式</h2><p>当局部 DNS 服务器自己不能回答客户端的 DNS 查询时，它就需要向其它 DNS 服务器进行查询。此时的方法有两种。</p>
<h3 id="8-2-1-递归解析"><a href="#8-2-1-递归解析" class="headerlink" title="8.2.1 递归解析"></a>8.2.1 递归解析</h3><p>局部 DNS 服务器自己负责向其它 DNS 服务器进行查询，一般是先向该域名的根域名服务器查询，再由根域名服务器一级级向下查询，最后得到的查询结果返回给局部 DNS 服务器，再由局部 DNS 服务器返回给客户端。</p>
<h3 id="8-2-2-迭代解析"><a href="#8-2-2-迭代解析" class="headerlink" title="8.2.2 迭代解析"></a>8.2.2 迭代解析</h3><p>局部 DNS 服务器不是自己向其它 DNS 服务器进行查询，而是把能解析该域名的其它 DNS 服务器的 IP 地址返回给客户端程序，客户端 DNS 程序再继续向这些 DNS 服务器进行查询，直到得到查询结果位为止。也就是说，迭代解析只是帮你寻找相关的服务器而已，而不会帮你去查。</p>
<h2 id="8-3-DNS-负载均衡"><a href="#8-3-DNS-负载均衡" class="headerlink" title="8.3 DNS 负载均衡"></a>8.3 DNS 负载均衡</h2><p>它的原理就是在 DNS 服务器中为同一个主机名配置多个 IP 地址，在应答 DNS 查询的时候，DNS 服务器对每个查询将以 DNS 文件中主机记录的 IP 地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP与UDP</title>
    <url>/2020/02/24/TCP%E4%B8%8EUDP/</url>
    <content><![CDATA[<h1 id="1-TCP-与-UDP-的特点"><a href="#1-TCP-与-UDP-的特点" class="headerlink" title="1. TCP 与 UDP 的特点"></a>1. TCP 与 UDP 的特点</h1><ul>
<li>传输控制协议（Transmission Control Protocol，TCP）是面向连接的，提供可靠交付，有流量控制、拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条TCP连接只能是点对点的（一对一）。</li>
<li>用户数据报协议（User Datagram Protocol，UDP）是无连接的，不保证传输的可靠，没有拥塞控制，面向报文（应用层传下来的数据不会被拆分，只是添加UDP首部）（，支持一对一、一对多、多对一和多对多的通信</li>
</ul>
<a id="more"></a>

<h1 id="2-TCP-与-UDP-的首部格式"><a href="#2-TCP-与-UDP-的首部格式" class="headerlink" title="2. TCP 与 UDP 的首部格式"></a>2. TCP 与 UDP 的首部格式</h1><h2 id="2-1-TCP-首部格式"><a href="#2-1-TCP-首部格式" class="headerlink" title="2.1 TCP 首部格式"></a>2.1 TCP 首部格式</h2><p><img src="/2020/02/24/TCP与UDP/1.png" alt></p>
<ul>
<li>序号：用于对字节流进行编号，例如序号为301，表示第一个字节的编号为301，如果携带的数据长度为100，则下一个字节的编号为401。</li>
<li>确认号：表示期望收到的下一个报文段的序号，例如服务端收到客户端发来的一个报文段，编号为301，数据的长度为100字节，那么确认号就是401。</li>
<li>数据偏移：指的是数据部分距离报文段起始处的偏移量，实际上指的就是首部长度。</li>
<li>确认ACK：当ACK=1时，确认号字段有效。TCP规定，在连接建立后，所有传送的报文段都必须把ACK置1。</li>
<li>同步SYN：在建立连接的时候用来同步序号。当SYN=1，ACK=0时，表示这时一个连接请求报文段。如对方同意建立连接，则响应报文中SYN=1，ACK=1。</li>
<li>终止FIN：用来释放一个连接，当FIN=1时，表示此报文段的发送方的数据已发送完毕，并要求释放连接</li>
<li>窗口：滑动窗口的大小</li>
</ul>
<h2 id="2-2-UDP-首部格式"><a href="#2-2-UDP-首部格式" class="headerlink" title="2.2 UDP 首部格式"></a>2.2 UDP 首部格式</h2><p><img src="/2020/02/24/TCP与UDP/2.png" alt></p>
<p>​    首部字段只有8个字节，包括源端口号、目标端口号、长度、校验和，12字节的伪首部时为了计算校验和临时添加的。</p>
<h1 id="3-TCP-的三次握手"><a href="#3-TCP-的三次握手" class="headerlink" title="3. TCP 的三次握手"></a>3. TCP 的三次握手</h1><p><img src="/2020/02/24/TCP与UDP/3.png" alt></p>
<p>​    假设A是客户端，B是服务端：</p>
<ul>
<li>首先B处于LISTEN状态，等待客户端的连接请求。</li>
<li>A向B发送连接请求报文，SYN=1，ACK=0，初始的序号seq = x</li>
<li>B收到连接请求报文后，如果同意建立连接，则向A发送连接确认报文，SYN=1，ACK=1，ack=x+1，同时也选择一个初始的序号 seq = y 。</li>
<li>A收到B的连接确认请求后，再向B发出确认，ACK=1，seq = x+1，ack=y+1。</li>
</ul>
<h2 id="3-1-三次握手的原因"><a href="#3-1-三次握手的原因" class="headerlink" title="3.1 三次握手的原因"></a>3.1 三次握手的原因</h2><p>​    第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>
<p>​    客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务端发挥的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接，但是这个滞留的连接请求最终还是会到达服务器，如果不进行三次握手，服务器就会打开两个连接。有了第三次握手，客户端就会忽略服务器之后发送的那个滞留连接请求的连接确认，不进行第三次握手，就不会再次打开连接。</p>
<ul>
<li>第一次握手：客户端什么都不能确认；服务端确认了：对方发送正常，自己接收正常</li>
<li>第二次握手：客户端确认了：自己发送、接收正常，对方发送、接收正常；服务端确认了：对方发送正常，自己接收正常</li>
<li>第三次握手：客户端确认了：自己发送、接收正常，对方发送、接收正常；服务端确认了：对方发送，接收正常，自己发送、接收正常</li>
</ul>
<h1 id="4-TCP-的四次挥手"><a href="#4-TCP-的四次挥手" class="headerlink" title="4. TCP 的四次挥手"></a>4. TCP 的四次挥手</h1><p><img src="/2020/02/24/TCP与UDP/4.png" alt></p>
<p>​    还是假设A是客户端，B是服务端：</p>
<ul>
<li>A发送连接释放报文，FIN=1。</li>
<li>B收到之后发出确认，此时TCP处于半关闭状态，B能向A发送数据，但是A不能向B发送。</li>
<li>当B不需要连接时，发送连接释放报文FIN=1。</li>
<li>A收到后发出确认，进入TIME-WAIT状态，等待 2MSL（最大报文存活时间）后释放连接</li>
<li>B收到A的确认后释放连接</li>
</ul>
<h2 id="4-1-四次挥手的原因"><a href="#4-1-四次挥手的原因" class="headerlink" title="4.1 四次挥手的原因"></a>4.1 四次挥手的原因</h2><p>​    客户端发送了FIN连接释放报文后，服务器收到了这个报文，就进入了CLOSE-WAIT状态。这个状态就是为了让服务端发送还未发送完毕的数据，发送完毕后，服务端发挥FIN连接释放报文。</p>
<h2 id="4-2-TIME-WAIT-的原因"><a href="#4-2-TIME-WAIT-的原因" class="headerlink" title="4.2 TIME-WAIT 的原因"></a>4.2 TIME-WAIT 的原因</h2><ul>
<li>确保最后一个确认报文能够到达，如果B没有收到A的确认报文，那么就会重新发送连接释放请求报文，A等待一段时间就是为了处理这种情况的发生</li>
<li>等待一段时间是为了让本链接持续时间内所产生的所有报文从网络中消失，使得下一个新的连接不会出现旧的连接请求报文</li>
</ul>
<h1 id="5-TCP-可靠传输"><a href="#5-TCP-可靠传输" class="headerlink" title="5. TCP 可靠传输"></a>5. TCP 可靠传输</h1><p>​    TCP使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p>
<h1 id="6-TCP-滑动窗口"><a href="#6-TCP-滑动窗口" class="headerlink" title="6. TCP 滑动窗口"></a>6. TCP 滑动窗口</h1><p>​    滑动窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p>
<p>​    如果发送窗口左边的字节已经发送并且收到了确认，那么就将滑动窗口向右滑动一定距离，直到左边的第一个字节不是已发送并且已确认的状态。</p>
<p><img src="/2020/02/24/TCP与UDP/5.png" alt></p>
<h1 id="7-TCP-流量控制"><a href="#7-TCP-流量控制" class="headerlink" title="7. TCP 流量控制"></a>7. TCP 流量控制</h1><p>​    流量控制是为了控制发送方的发送速率，保证接收方来得及接收。接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。</p>
<h1 id="8-TCP-拥塞控制"><a href="#8-TCP-拥塞控制" class="headerlink" title="8. TCP 拥塞控制"></a>8. TCP 拥塞控制</h1><p>​    如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络的拥塞程度变高。TCP 通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p>
<p>​    发送方需要维护一个叫做拥塞窗口的状态变量，拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p>
<h2 id="8-1-慢开始与拥塞避免"><a href="#8-1-慢开始与拥塞避免" class="headerlink" title="8.1 慢开始与拥塞避免"></a>8.1 慢开始与拥塞避免</h2><p>​    发送的最初执行慢开始，令 cwnd = 1，发送方只能发送一个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能发送的报文段数量为：2、4、8…</p>
<p>​    慢开始每个轮次都会将 cwnd 加倍，这样会让 cwnd 的增长速度非常快，从而使得发送方发送的速度增长过快，导致拥塞的可能性更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加一。</p>
<p>​    如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始</p>
<h2 id="8-2-快重传与快恢复"><a href="#8-2-快重传与快恢复" class="headerlink" title="8.2 快重传与快恢复"></a>8.2 快重传与快恢复</h2><p>​    在接收方，要求每次接收到报文段都应该对最后一个收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到M4，应该发送 M2 的确认。</p>
<p>​    在发送方，如果收到三个重复确认，那么可以直到下一个把文段丢失，此时执行快重传，立即重传下一个报文段。例如收到3个 M2，则 M3丢失，立即重传 M3。</p>
<p><img src="/2020/02/24/TCP与UDP/6.png" alt></p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA虚拟机</title>
    <url>/2020/02/20/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><h2 id="1-运行时数据区"><a href="#1-运行时数据区" class="headerlink" title="1. 运行时数据区"></a>1. 运行时数据区</h2><p>JDK1.8之前：</p>
<p><img src="/2020/02/20/Java虚拟机/1.png" alt></p>
<a id="more"></a>

<p>JDK1.8之后：</p>
<p><img src="/2020/02/20/Java虚拟机/2.png" alt></p>
<h3 id="1-1-程序计数器"><a href="#1-1-程序计数器" class="headerlink" title="1.1 程序计数器"></a>1.1 程序计数器</h3><p>​    程序计数器是一块较小的内存空间，是线程私有的，每一个线程都有一个程序计数器。它主要有两个作用：</p>
<ol>
<li>字节码解释器通过改变程序计数器来依次读取指令，实现代码的流程控制，如：选择、循环、异常处理等（如果是本地方法，则计数器为空）；</li>
<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，方便上下文切换后能找到上次运行的地方；</li>
</ol>
<h3 id="1-2-虚拟机栈"><a href="#1-2-虚拟机栈" class="headerlink" title="1.2 虚拟机栈"></a>1.2 虚拟机栈</h3><p>​    每个java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。一个方法的调用与执行完成，对应者一个栈帧在虚拟机栈中的入栈和出栈过程。</p>
<p><img src="/2020/02/20/Java虚拟机/3.png" alt></p>
<p>​    该区域可能会出现以下两种异常：</p>
<ol>
<li>若java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过了当前虚拟机栈的最大深度时，就会抛出StackOverFlowError；</li>
<li>若虚拟机栈的大小允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展，就会抛出OutOfMemoryError；</li>
</ol>
<h3 id="1-3-本地方法栈"><a href="#1-3-本地方法栈" class="headerlink" title="1.3 本地方法栈"></a>1.3 本地方法栈</h3><p>​    本地方法栈与虚拟机栈类似，不过它是为本地方法服务的，本地方法一般使用其它语言编写的，它也会出现StackOverFlowError和OutOfMemoryError。</p>
<h3 id="1-4-堆"><a href="#1-4-堆" class="headerlink" title="1.4 堆"></a>1.4 堆</h3><p>​    所有的对象都在这里分配内存，是垃圾收集的主要区域。现在的垃圾收集器基本都采用的分代收集算法，主要是根据不同类型的对象采用不同的垃圾回收算法，堆可以分为两块区域：</p>
<ol>
<li>新生代</li>
<li>老年代</li>
</ol>
<p>再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。进一步划分的目的是更好地回收内存，或者更快地分配内存。</p>
<p><img src="/2020/02/20/Java虚拟机/4.png" alt></p>
<p>堆不需要连续内存，并且可以动态增加内存，如果增加失败就抛出OutOfMemoryError。</p>
<h3 id="1-5-方法区"><a href="#1-5-方法区" class="headerlink" title="1.5 方法区"></a>1.5 方法区</h3><p>​    用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。和堆一样，不需要连续的内存，可以动态扩展，扩展失败也是抛出OutOfMemoryError。</p>
<p>​    对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载。</p>
<p>​    在JDK1.8之后，原来方法区的数据被分到了对和元空间中，类的元信息存储在元空间，静态变量和常量池在堆空间中。</p>
<h3 id="1-6-运行时常量池"><a href="#1-6-运行时常量池" class="headerlink" title="1.6 运行时常量池"></a>1.6 运行时常量池</h3><p>​    运行时常量池是方法区的一部分，Class文件中的常量池（编译器生成的字面量和符号引用）会在类被加载后存放到这个区域。</p>
<h3 id="1-7-直接内存"><a href="#1-7-直接内存" class="headerlink" title="1.7 直接内存"></a>1.7 直接内存</h3><p>​    在JDK1.4中引入了NIO类，它可以使用Native函数直接分配堆外内存，然后通过DirectByteBuffer对象，作为这块内存的引用进行操。</p>
<h2 id="2-HotSpot-虚拟机对象探秘"><a href="#2-HotSpot-虚拟机对象探秘" class="headerlink" title="2. HotSpot 虚拟机对象探秘"></a>2. HotSpot 虚拟机对象探秘</h2><h3 id="2-1-对象的创建"><a href="#2-1-对象的创建" class="headerlink" title="2.1 对象的创建"></a>2.1 对象的创建</h3><p><img src="/2020/02/20/Java虚拟机/5.png" alt></p>
<h4 id="2-1-1-类加载检查"><a href="#2-1-1-类加载检查" class="headerlink" title="2.1.1 类加载检查"></a>2.1.1 类加载检查</h4><p>​    虚拟机遇到一条new指令时，首先会去检查这个指令的参数能否在常量池中定位到这个类的符号引用，并检查这个符号引用代表的类是否已被加载、解析和初始化过，如果没有，会先执行类加载过程。</p>
<h4 id="2-1-2-分配内存"><a href="#2-1-2-分配内存" class="headerlink" title="2.1.2 分配内存"></a>2.1.2 分配内存</h4><p>​    类加载检查通过之后，接下来虚拟机将会对新生对象分配内存。对象所需的内存大小在类加载完毕后便可以确定，为对象分配内存空间实际上就是从堆内存中划分出一块内存出来。</p>
<p>​    分配的方式有指针碰撞和空闲列表两种方法，选择哪种方式是由java堆是否规整决定，而java堆是否规整是由所采用的垃圾收集器来决定的。</p>
<h4 id="2-1-3-初始化零值"><a href="#2-1-3-初始化零值" class="headerlink" title="2.1.3 初始化零值"></a>2.1.3 初始化零值</h4><p>​    内存分配完以后，虚拟机需要将分配的内存空间都初始化为零值，保证了实例字段，可以不赋初值就使用。</p>
<h4 id="2-1-4-设置对象头"><a href="#2-1-4-设置对象头" class="headerlink" title="2.1.4 设置对象头"></a>2.1.4 设置对象头</h4><p>​    接着，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的哈希码，GC分代年龄、锁状态标志等等。</p>
<h4 id="2-1-5-执行init方法"><a href="#2-1-5-执行init方法" class="headerlink" title="2.1.5 执行init方法"></a>2.1.5 执行init方法</h4><p>​    把对象按照程序员的意愿进行初始化。</p>
<h3 id="2-2-对象的访问定位"><a href="#2-2-对象的访问定位" class="headerlink" title="2.2 对象的访问定位"></a>2.2 对象的访问定位</h3><p>​    java程序主要通过栈上的reference数据来操作堆上的具体对象，主流的访问方式有两种：</p>
<ol>
<li>使用句柄：如果使用句柄的话，那么java堆中就会划分出一块内存作为句柄池，而reference存储的就是对象的句柄地址，而句柄中包含了对象实例数据和对象类型数据各自的地址信息。</li>
</ol>
<p><img src="/2020/02/20/Java虚拟机/6.png" alt></p>
<ol start="2">
<li>直接指针：如果使用直接指针，那么reference存储的就直接是对象实例的地址信息。</li>
</ol>
<p><img src="/2020/02/20/Java虚拟机/7.png" alt></p>
<p>​    两种对象访问方式各有优点：使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动的时候，只会改变句柄池中的实例数据指针，而reference本身不需要修改。使用直接指针的好处就是速度快，节省了一次指针定位的时间消耗。</p>
<h2 id="3-垃圾收集"><a href="#3-垃圾收集" class="headerlink" title="3. 垃圾收集"></a>3. 垃圾收集</h2><p>​    垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈都属于线程私有，只存在于线程的生命周期中，因此这三个区域不需要进行垃圾回收。</p>
<h3 id="3-1-判断一个对象是否可被回收"><a href="#3-1-判断一个对象是否可被回收" class="headerlink" title="3.1 判断一个对象是否可被回收"></a>3.1 判断一个对象是否可被回收</h3><h4 id="3-1-1-引用计数法"><a href="#3-1-1-引用计数法" class="headerlink" title="3.1.1 引用计数法"></a>3.1.1 引用计数法</h4><p>​    为对象添加一个计数器，当对象增加一个引用时加1，引用失效时计数器减1。计数器为0是对象被回收。但是会出现一个相互引用的问题，导致无法被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test a = <span class="keyword">new</span> Test();</span><br><span class="line">        Test b = <span class="keyword">new</span> Test();</span><br><span class="line">        a.instance = b;</span><br><span class="line">        b.instance = a;</span><br><span class="line">        a = <span class="keyword">null</span>;</span><br><span class="line">        b = <span class="keyword">null</span>;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    上面的代码中，a和b引用的对象实例互相有了对象的引引用，而当a和b的引用去掉时，由于2个对象还存在相互之间的引用，因此无法被回收。</p>
<h4 id="3-1-2-可达性分析算法"><a href="#3-1-2-可达性分析算法" class="headerlink" title="3.1.2 可达性分析算法"></a>3.1.2 可达性分析算法</h4><p>​    以GC Roots为起始点进行搜素，可达的对象都是存活的，不可达的对象被回收。java虚拟机中就使用的该算法，GC Roots一般为以下4中的对象</p>
<ul>
<li>虚拟机栈中局部变量表中引用的对象</li>
<li>本地方法栈中JNI引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
</ul>
<p><img src="/2020/02/20/Java虚拟机/8.png" alt></p>
<h4 id="3-1-3-方法区的回收"><a href="#3-1-3-方法区的回收" class="headerlink" title="3.1.3 方法区的回收"></a>3.1.3 方法区的回收</h4><p>​    因为方法区中对象的回收率比新生代低了很多，因此在方法区上进行回收性价比不高，主要是堆常量的回收以及类的卸载。</p>
<p>​    类的卸载条件很多，需要满足以下三个条件，且满足了也不一定会被回收：</p>
<ol>
<li>该类所有的实例已经被回收；</li>
<li>该类的 ClassLoader 已经被回收；</li>
<li>该类对应的 Class 对象没有在任何地方被引用。</li>
</ol>
<h3 id="3-2-引用的类型"><a href="#3-2-引用的类型" class="headerlink" title="3.2 引用的类型"></a>3.2 引用的类型</h3><h4 id="3-2-1-强引用"><a href="#3-2-1-强引用" class="headerlink" title="3.2.1 强引用"></a>3.2.1 强引用</h4><p>被强引用关联的对象不会被回收。使用 new 一个新对象的方法来创建强引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-软引用"><a href="#3-2-2-软引用" class="headerlink" title="3.2.2 软引用"></a>3.2.2 软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收。使用SoftReference类创建软引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-3-弱引用"><a href="#3-2-3-弱引用" class="headerlink" title="3.2.3 弱引用"></a>3.2.3 弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能活到下一次垃圾回收之前，使用WeakReference类来创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-4-虚引用"><a href="#3-2-4-虚引用" class="headerlink" title="3.2.4 虚引用"></a>3.2.4 虚引用</h4><p>一个对象是否有虚引用，不会对其生存时间造成影响，唯一的作用就是通过一个即将被回收的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj, <span class="keyword">null</span>);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-垃圾回收算法"><a href="#3-3-垃圾回收算法" class="headerlink" title="3.3 垃圾回收算法"></a>3.3 垃圾回收算法</h3><h4 id="3-3-1-标记清除"><a href="#3-3-1-标记清除" class="headerlink" title="3.3.1 标记清除"></a>3.3.1 标记清除</h4><p><img src="/2020/02/20/Java虚拟机/9.png" alt></p>
<p>​    在标记阶段，程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。</p>
<p>​    在清除阶段，会进行对象的回收并取消标志位，另外，还会判断回收后的分块与前一个空闲块是否连续，如连续，则合并这两个。但是该算法有两个缺点：</p>
<ol>
<li>标记和清除的效率不高；</li>
<li>会产生大量的不连续的内存碎片，导致无法给大对象分配内存。</li>
</ol>
<h4 id="3-3-2-标记整理"><a href="#3-3-2-标记整理" class="headerlink" title="3.3.2 标记整理"></a>3.3.2 标记整理</h4><p><img src="/2020/02/20/Java虚拟机/10.png" alt></p>
<p>​    该算法会让所有存货的对象向一段移动，然后直接清理掉端边界以外的内存。</p>
<ul>
<li>优点：不会产生内存碎片</li>
<li>缺点：需要移动大量的对象，效率低。</li>
</ul>
<h4 id="3-3-3-复制"><a href="#3-3-3-复制" class="headerlink" title="3.3.3 复制"></a>3.3.3 复制</h4><p><img src="/2020/02/20/Java虚拟机/11.png" alt></p>
<p>​    它可以将内存分为大小相同的两块，每次只使用其中一块，当这一块内存用完了，就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p>
<p>​    现在的商业虚拟机都使用这种算法来回收新生代，但并不是划分为等大小的两块，而是一块较大的Eden空间和两块Survivor空间，每次使用Eden和一块Survivor。在回收时，将Eden和Survivor中还存活的对象全部复制到另一块Survivor上，最后清理使用过的Survivor和Eden。</p>
<h4 id="3-3-4-分代收集"><a href="#3-3-4-分代收集" class="headerlink" title="3.3.4 分代收集"></a>3.3.4 分代收集</h4><p>​     在新生代中使用复制算法，在老年代中使用标记清除或标记整理算法。</p>
<h3 id="3-4-垃圾收集器"><a href="#3-4-垃圾收集器" class="headerlink" title="3.4 垃圾收集器"></a>3.4 垃圾收集器</h3><p><img src="/2020/02/20/Java虚拟机/12.png" alt></p>
<p>​    以上是 HotSpot 虚拟机中的7个垃圾收集器，连线表示垃圾收集器可配合使用</p>
<h4 id="3-4-1-Serial-收集器"><a href="#3-4-1-Serial-收集器" class="headerlink" title="3.4.1 Serial 收集器"></a>3.4.1 Serial 收集器</h4><p>​    它是单线程的收集器，只会使用一个线程进行垃圾收集工作。优点就是简单高效，在单个 CPU 情况下，由于没有线程交互的开销，因此有最高的单线程收集效率。但是有一个缺点，就是进行垃圾回收的时候，会暂停所有的用户线程。</p>
<p><img src="/2020/02/20/Java虚拟机/13.png" alt></p>
<h4 id="3-4-2-ParNew-收集器"><a href="#3-4-2-ParNew-收集器" class="headerlink" title="3.4.2 ParNew 收集器"></a>3.4.2 ParNew 收集器</h4><p>​    它是 Serial 收集器的多线程版本，除了 Serial 收集器，只有它能与 CMS 收集器配合。</p>
<p><img src="/2020/02/20/Java虚拟机/14.png" alt></p>
<h4 id="3-4-3-Parallel-Scavange-收集器"><a href="#3-4-3-Parallel-Scavange-收集器" class="headerlink" title="3.4.3 Parallel Scavange 收集器"></a>3.4.3 Parallel Scavange 收集器</h4><p>​    它与 ParNew 收集器一样，都是多线程收集器。其它收集器的目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标时达到一个可控的吞吐量。这里的吞吐量指的是 CPU 运行用户程序时间占总时间（CPU 运行用户程序时间+垃圾回收时间）的比值。</p>
<p>​    停顿时间越短就越适合与用户交互的程序，而高吞吐量则可以高效率的利用CPU时间，进行完成运算任务，适合在后台运算。</p>
<p><img src="/2020/02/20/Java虚拟机/15.png" alt></p>
<h4 id="3-4-4-Serial-Old-收集器"><a href="#3-4-4-Serial-Old-收集器" class="headerlink" title="3.4.4 Serial Old 收集器"></a>3.4.4 Serial Old 收集器</h4><p>​    它是 Serial 收集器的老年代版本，如果用在Server场景下，它适合作为CMS收集器的后备预案，在CMS发生 Concurrent Mode Failure 时使用。它使用的是标记整理算法</p>
<h4 id="3-4-5-Parallel-Old-收集器"><a href="#3-4-5-Parallel-Old-收集器" class="headerlink" title="3.4.5 Parallel Old 收集器"></a>3.4.5 Parallel Old 收集器</h4><p>​    它是 Parallel 收集器的老年代版本。</p>
<h4 id="3-4-6-CMS-收集器"><a href="#3-4-6-CMS-收集器" class="headerlink" title="3.4.6 CMS 收集器"></a>3.4.6 CMS 收集器</h4><p>​    CMS（Concurrent Mark Sweep）收集器，使用的是标记清除算法。它分为以下四个流程：</p>
<ol>
<li><p>初始标记：仅仅只是标记以下  GC Roots 能直接关联的对象，速度很快，需要停顿；</p>
</li>
<li><p>并发标记：进行 GC Roots Tracing 的过程，寻找所有可达的对象，时间最长，不需要停顿；</p>
</li>
<li><p>重新标记：为了修正并发标记期间因用户程序继续运行而导致标识产生变动的那一部分对象，不需要停顿；</p>
</li>
<li><p>并发清除：不需要停顿；</p>
<p>​但是 CMS 收集器具有以下缺点：</p>
</li>
<li><p>吞吐量低：较低的停顿时间是以牺牲吞吐量为代价的，导致CPU利用率不高；</p>
</li>
<li><p>无法处理浮动垃圾，可能出现 Concurrent Mode Failure ：并发清除期间，由于用户程序继续运行从而产生的垃圾，这部分垃圾只能等到下一次 GC 的时候才能清除。由于浮动垃圾的存在，因此需要预留一部分内存，不能像其它收集器那样，等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，那么就会出现 Concurrent Mode Failure，这时虚拟机就会启用 Serial Old 收集器来代替 CMS。</p>
</li>
<li><p>垃圾回收算法产生的内存碎片：由于算法的原因，往往导致因为空间有剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次 Full GC。</p>
</li>
</ol>
<h4 id="3-4-7-G1-收集器"><a href="#3-4-7-G1-收集器" class="headerlink" title="3.4.7 G1 收集器"></a>3.4.7 G1 收集器</h4><p>​    G1 收集器是一款面向服务端应用的收集器，在多 CPU 和大内存的场景下有很好的性能，且 G1 可以直接对新生代和老年代一起回收。</p>
<p>​    G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不在物理隔离。通过记录每个 Region 垃圾回收时间以及回收所获得的空间，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region，通过该结构，在做可达性分析的时候可以避免全堆扫描。</p>
<p>​    如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致划分为以下几个步骤。</p>
<ul>
<li><p>初始标记：需要停顿</p>
</li>
<li><p>并发标记：不需要停顿</p>
</li>
<li><p>最终标记：为了修正并发标记期间由于程序继续运作而导致标识产生变动的那一部分，虚拟机会把这段时间对象的变化记录在 Remembered Set logs 里面，最终标记阶段需要把 logs 的数据合并到 Remembered Set 中，这段时间需要暂停线程</p>
</li>
<li><p>筛选回收：根据回收价值来排序，并根据用户所期望的GC 时间来制定回收计划。该阶段可以和用户程序并发进行，但是停顿用户线程后收集效率将大幅度提高。</p>
<p>​G1 收集器的特点：</p>
</li>
<li><p>空间整合，整体上看来是基于标记整理算法，但从局部上来看，是基于复制算法，因此不会产生空间碎片</p>
</li>
<li><p>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不会超过N秒。</p>
</li>
</ul>
<h2 id="4-内存分配与回收策略"><a href="#4-内存分配与回收策略" class="headerlink" title="4.内存分配与回收策略"></a>4.内存分配与回收策略</h2><h3 id="4-1-Minor-GC-与-Full-GC"><a href="#4-1-Minor-GC-与-Full-GC" class="headerlink" title="4.1 Minor GC 与 Full GC"></a>4.1 Minor GC 与 Full GC</h3><ul>
<li>Minor GC ：回收新生代，因为新生代对象存活的时间很短，因此 Minor GC 会频繁的执行，且速度也很快。</li>
<li>Full GC ：回收老年代和新生代，老年代对象存活时间很长，因此 Full GC 很少执行，且执行速度比 Minor GC慢很多。</li>
</ul>
<h3 id="4-2-内存分配策略"><a href="#4-2-内存分配策略" class="headerlink" title="4.2 内存分配策略"></a>4.2 内存分配策略</h3><h4 id="4-2-1-对象优先分配在Eden"><a href="#4-2-1-对象优先分配在Eden" class="headerlink" title="4.2.1 对象优先分配在Eden"></a>4.2.1 对象优先分配在Eden</h4><p>​    大多数情况下，对象都是在新生代的Eden区域分配，当 Eden 区域不够时，发器 Minor GC。</p>
<h4 id="4-2-2-大对象直接进入老年代"><a href="#4-2-2-大对象直接进入老年代" class="headerlink" title="4.2.2 大对象直接进入老年代"></a>4.2.2 大对象直接进入老年代</h4><p>​    大对象指的是需要连续内存空间的对象，最典型的就是很长的字符串和数组。</p>
<h4 id="4-2-3-长期存活的进入老年代"><a href="#4-2-3-长期存活的进入老年代" class="headerlink" title="4.2.3 长期存活的进入老年代"></a>4.2.3 长期存活的进入老年代</h4><p>​    为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，就移动到 Survivor 中，年龄增加1，增加到一定年龄就会进入老年代</p>
<h4 id="4-2-4-动态对象年龄判断"><a href="#4-2-4-动态对象年龄判断" class="headerlink" title="4.2.4 动态对象年龄判断"></a>4.2.4 动态对象年龄判断</h4><p>​    虚拟机并不是永远要求对象的年龄必须到达设置的值才能进入老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，则年龄大于或等于该年龄的对象直接进入老年代。</p>
<h4 id="4-2-5-空间分配担保"><a href="#4-2-5-空间分配担保" class="headerlink" title="4.2.5 空间分配担保"></a>4.2.5 空间分配担保</h4><p>​    在发生 Minor GC 之前，虚拟机会先检查老年代最大可用连续空间是否大于新生代所有对象总空间，如果条件成立，那么 Minor GC 是安全的。如果不成立，则会查看 HandlePromotionFailure 的值是否允许担保，如果允许，那么就会继续检查老年代最大可用连续空间是否大于历代晋升到老年代对象的平均大小，如果大于，将尝试进行 Minor GC，如果小于或者不允许担保，则直接触发 Full GC。</p>
<h3 id="4-3-Full-GC-触发条件"><a href="#4-3-Full-GC-触发条件" class="headerlink" title="4.3 Full GC 触发条件"></a>4.3 Full GC 触发条件</h3><h4 id="4-3-1-调用-System-gc"><a href="#4-3-1-调用-System-gc" class="headerlink" title="4.3.1 调用 System.gc()"></a>4.3.1 调用 System.gc()</h4><p>​    只是建议老年代去执行一次 Full GC，但不一定会执行。</p>
<h4 id="4-3-2-老年代空间不足"><a href="#4-3-2-老年代空间不足" class="headerlink" title="4.3.2 老年代空间不足"></a>4.3.2 老年代空间不足</h4><h4 id="4-3-3-空间分配担保失败"><a href="#4-3-3-空间分配担保失败" class="headerlink" title="4.3.3 空间分配担保失败"></a>4.3.3 空间分配担保失败</h4><p>​    使用复制算法的 Minor GC 需要老年代的内存空间作为担保，如果担保失败就会进行一次 Full GC。</p>
<h4 id="4-3-4-JDK-1-7及以前的永久代空间不足"><a href="#4-3-4-JDK-1-7及以前的永久代空间不足" class="headerlink" title="4.3.4 JDK 1.7及以前的永久代空间不足"></a>4.3.4 JDK 1.7及以前的永久代空间不足</h4><h4 id="4-3-5-Concurrent-Mode-Failure"><a href="#4-3-5-Concurrent-Mode-Failure" class="headerlink" title="4.3.5 Concurrent Mode Failure"></a>4.3.5 Concurrent Mode Failure</h4><p>​    在 CMS GC的过程中，浮动垃圾过多，导致出现 Concurrent Mode Failure，并触发 Full GC。</p>
<h2 id="5-类加载机制"><a href="#5-类加载机制" class="headerlink" title="5. 类加载机制"></a>5. 类加载机制</h2><p>​    类是在运行期间第一次使用时动态加载的，而不是一次性加载所有的类。如果一次性加载所有的类，会占用过多的内存。</p>
<h3 id="5-1-类的生命周期"><a href="#5-1-类的生命周期" class="headerlink" title="5.1 类的生命周期"></a>5.1 类的生命周期</h3><p><img src="/2020/02/20/Java虚拟机/17.png" alt></p>
<p>包括以下7个阶段：</p>
<ol>
<li>加载</li>
<li>验证</li>
<li>准备</li>
<li>解析</li>
<li>初始化</li>
<li>使用</li>
<li>卸载</li>
</ol>
<h3 id="5-2-类的加载过程"><a href="#5-2-类的加载过程" class="headerlink" title="5.2 类的加载过程"></a>5.2 类的加载过程</h3><p>​    该过程包含了加载、验证、准备、解析、初始化这五个阶段。</p>
<h4 id="5-2-1-加载"><a href="#5-2-1-加载" class="headerlink" title="5.2.1 加载"></a>5.2.1 加载</h4><p>​    加载过程完成了以下三件事：</p>
<ol>
<li>通过类的完全限定名称获取定义该类的二进制字节流；</li>
<li>将该字节流表示的静态存结构转换为方法区的运行时存储结构；</li>
<li>在内存中生成一个代表该类的Class对象；</li>
</ol>
<h4 id="5-2-2-验证"><a href="#5-2-2-验证" class="headerlink" title="5.2.2 验证"></a>5.2.2 验证</h4><pre><code>确保Class文件的字节流中包含的信息符合当前虚拟机的要求。</code></pre><h4 id="5-2-3-准备"><a href="#5-2-3-准备" class="headerlink" title="5.2.3 准备"></a>5.2.3 准备</h4><p>​    为被static修饰的类变量分配内存并设置初始值，使用的是方法区的内存。如果类变量被final修饰，则直接初始化为定义的值。</p>
<h4 id="5-2-4-解析"><a href="#5-2-4-解析" class="headerlink" title="5.2.4 解析"></a>5.2.4 解析</h4><p>​    将常量池的符号引用替换为直接引用的过程。</p>
<h4 id="5-2-5-初始化"><a href="#5-2-5-初始化" class="headerlink" title="5.2.5 初始化"></a>5.2.5 初始化</h4><p>​    执行类中定义的java程序代码，根据程序的定义为静态变量赋值。</p>
<h3 id="5-3-类初始化的时机"><a href="#5-3-类初始化的时机" class="headerlink" title="5.3 类初始化的时机"></a>5.3 类初始化的时机</h3><ul>
<li>遇到 new、getstatic、setstatic、invokestatic 这四条字节码指令的时候。</li>
<li>被java反射包的方法对类进行反射调用的时候。</li>
<li>初始化一个类的时候，如果其父类还没有初始化。</li>
<li>虚拟机启动的时候，指定了一个要执行的主类（main方法所在的类）。</li>
<li>当使用JDK 1.7 的动态语言支持时。</li>
</ul>
<h3 id="5-4-类加载器"><a href="#5-4-类加载器" class="headerlink" title="5.4 类加载器"></a>5.4 类加载器</h3><p>​    两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。</p>
<h4 id="5-4-1-类加载器分类"><a href="#5-4-1-类加载器分类" class="headerlink" title="5.4.1 类加载器分类"></a>5.4.1 类加载器分类</h4><ul>
<li>启动类加载器：使用C++实现，是虚拟机自身的一部分，无法被Java程序直接引用。用户在编写自定义类加载器的时候，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</li>
<li>扩展类加载器：负责将系统变量指定路径中的所有类库加载到内存中。</li>
<li>应用程序加载器：它负责加载用户类路径上所指定的类库，如果应用程序中没有自定义过类加载器，则使用该类加载器。</li>
</ul>
<h4 id="5-4-2-双亲委派模型"><a href="#5-4-2-双亲委派模型" class="headerlink" title="5.4.2 双亲委派模型"></a>5.4.2 双亲委派模型</h4><p>​    应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自定义的类加载器。</p>
<p><img src="/2020/02/20/Java虚拟机/18.png" alt></p>
<ol>
<li>一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时，才尝试自己加载。</li>
<li>使得java类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.</li>
<li><a href="https://cyc2018.github.io/CS-Notes/#/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA" target="_blank" rel="noopener">CyC2018 CS-Notes</a></li>
<li><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">JavaGuide</a></li>
</ul>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的持久化功能实现</title>
    <url>/2020/02/19/Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Redis的持久化功能实现"><a href="#Redis的持久化功能实现" class="headerlink" title="Redis的持久化功能实现"></a>Redis的持久化功能实现</h1><h2 id="1-RDB持久化"><a href="#1-RDB持久化" class="headerlink" title="1. RDB持久化"></a>1. RDB持久化</h2><p>​    因为Redis是内存数据库，它将自己的数据库状态存储在内存中，所以如果不想办法将存储在内存中的数据库状态保存到磁盘，那么服务器进程退出时，数据也将丢失。为了解决这个问题，Redis提供了RDB持久化功能。</p>
<a id="more"></a>

<h3 id="1-1-RDB文件的创建与载入"><a href="#1-1-RDB文件的创建与载入" class="headerlink" title="1.1 RDB文件的创建与载入"></a>1.1 RDB文件的创建与载入</h3><p>​    有两个命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。    </p>
<ol>
<li><p>SAVE命令：SAVE命令会阻塞服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求；</p>
</li>
<li><p>BGSAVE命令：当使用BGSAVE命令时，服务器会派生出一个子进程来创建RDB文件夹，主进程继续处理命令请求。在BGSAVE执行期间，客户端发送的SAVE命令和BGSAVE命令会被拒绝，防止出现竞争条件。另外：BGREWRITEAOF也不能和BGSAVE同时执行</p>
<ol>
<li>如果BGSAVE正在执行，那么客户端发送的BGREWRITEAOF命令会被延迟到BGSAVE命令执行完毕以后；</li>
<li>如果BGREWRITEAOF正在执行，那么BGSAVE命令会被服务器拒绝；</li>
</ol>
</li>
<li><p>服务器在载入RDB文件期间，会一直处于阻塞状态。</p>
</li>
</ol>
<h3 id="1-2-自动间隔保存"><a href="#1-2-自动间隔保存" class="headerlink" title="1.2 自动间隔保存"></a>1.2 自动间隔保存</h3><h4 id="1-2-1-设置保存条件"><a href="#1-2-1-设置保存条件" class="headerlink" title="1.2.1 设置保存条件"></a>1.2.1 设置保存条件</h4><p>​    Redis允许用户通过设置服务器配置的save选项，让服务器每隔一段时间就执行一次BGSAVE。用户可以通过save选项设置多个条件，只要满足其中一个，就会执行BGSAVE</p>
<p>​    举个例子，如果我们向服务器提供以下配置：<br>​    save 900 1<br>​    save 300 10<br>​    save 60 10000<br>​    那么只要满足下面台条件中的任意一个，BGSAVE就会被执行：</p>
<ul>
<li>服务器在900秒内，对数据库进行了至少一次修改</li>
<li>服务器在300秒内，对数据库进行了至少10次修改</li>
<li>服务器在10秒内，对数据库进行了至少10000次修改</li>
</ul>
<p>save选项的配置会记录在redisServer的saveparams数组中，saveparam中有两个属性，一个是秒数，一个是修改数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">//记录了保存条件的数组</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> *<span class="title">saveparams</span>;</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Struct saveparam &#123;</span><br><span class="line">	<span class="comment">//秒数</span></span><br><span class="line">  	<span class="keyword">time_t</span> seconds</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//修改数</span></span><br><span class="line">    <span class="keyword">int</span> changes;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如，上面举例的三个条件，在服务器状态中会是下图的样子：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/1.png" alt></p>
<h4 id="1-2-2-dirty计数器和lastsave属性"><a href="#1-2-2-dirty计数器和lastsave属性" class="headerlink" title="1.2.2 dirty计数器和lastsave属性"></a>1.2.2 dirty计数器和lastsave属性</h4><ul>
<li>dirty计数器记录了距离上一次成功执行SAVE命令或者BGSAVE命令，服务器对数据库执行了多少次修改</li>
<li>lastsave属性是一个UNIX时间戳，记录了服务器上一次成功执行SAVE命令或者BGSAVE命令的时间</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//修改计数器</span></span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> dirty;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//上一次执行保存的时间</span></span><br><span class="line">  <span class="keyword">time_t</span> lastsave;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-检查保存条件是否满足"><a href="#1-2-3-检查保存条件是否满足" class="headerlink" title="1.2.3 检查保存条件是否满足"></a>1.2.3 检查保存条件是否满足</h4><p>​    Redis的服务器周期性函数serverCorn函数，默认每隔100毫秒就会执行一次，它的其中一项工作就是检查save选项所设置的保存条件是否满足，如果满足就执行BGSAVE命令。</p>
<h3 id="1-3-RDB文件的结构"><a href="#1-3-RDB文件的结构" class="headerlink" title="1.3 RDB文件的结构"></a>1.3 RDB文件的结构</h3><p>​    下图展示了一个完整的RDB文件所包含的各个部分：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/2.png" alt></p>
<ul>
<li>REDIS：该部分的长度位5字节，保存了REDIS五个字符，用于表示该文件是RDB文件</li>
<li>db_version：记录了RDB文件的版本号</li>
<li>database：包含了0个或任意多个数据库，如果数据库中没有数据，该部分也为空。</li>
<li>EOF：是一个常量整数377，标志着RDB文件正文的结束</li>
<li>check_num：校验和，保证文件的完整性</li>
</ul>
<h4 id="1-3-1-database部分"><a href="#1-3-1-database部分" class="headerlink" title="1.3.1 database部分"></a>1.3.1 database部分</h4><p>​    一个RDB文件的database部分可以保存任意多个非空数据库。例如，如果服务器的0号数据库和3号数据库非空，那么RDB文件的示例如下：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/3.png" alt></p>
<p>​    每个非空数据库在RDB文件中又可以分为以下三个部分SELECTDB、db_number、key_value_pairs</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/4.png" alt></p>
<ul>
<li>SELECTDB：长度为1字节，当读入程序遇到这个值的时候，他就知道接下来将要读入的是一个数据库号码</li>
<li>db_number：保存的是数据库的号码</li>
<li>key_value_pairs：保存了数据库中的所有键值数据，如果键值对带有过期时间，那么过期时间也会和键值对保存在一起</li>
</ul>
<h4 id="1-3-2-key-value-pairs部分"><a href="#1-3-2-key-value-pairs部分" class="headerlink" title="1.3.2 key_value_pairs部分"></a>1.3.2 key_value_pairs部分</h4><p>​    带有过期时间的键值对在RDB中的结构如下（如果没有过期时间，则没有EXPIRETIME_MS和ms部分）：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/5.png" alt></p>
<ul>
<li>EXPIRETIME_MS：表示接下来将要读入一个过期时间；</li>
<li>ms：记录着一个以毫秒为单位的UNIX时间戳；</li>
<li>TYPE：记录了value的类型；</li>
<li>key：键值对的键，总是一个字符串对象</li>
<li>value：键值对的值，类型由TYPE决定</li>
</ul>
<h4 id="1-3-3-value的编码"><a href="#1-3-3-value的编码" class="headerlink" title="1.3.3 value的编码"></a>1.3.3 value的编码</h4><h5 id="1-3-3-1-字符串对象"><a href="#1-3-3-1-字符串对象" class="headerlink" title="1.3.3.1 字符串对象"></a>1.3.3.1 字符串对象</h5><p>​    如果TYPE的值为REDIS_RDB_TYPE_STRING，那么value保存的就是一个字符串对象，字符串对象的编码可以是REDIS_ENCODING_INT或者REDIS_ENCODING_RAW。如果是前者，则保存的是长度不超过32的整数。举个列子，如果字符串对象中保存的是可以用8位来保存的整数123，那么结构如下：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/6.png" alt></p>
<p>​    如果编码为后者，且开启了RDB文件压缩功能，那么分为下面两种情况：</p>
<ul>
<li>如果字符串的长度小于等于20字节，那么会直接原样保存：</li>
</ul>
<p><img src="/2020/02/19/Redis的持久化功能实现/7.png" alt></p>
<ul>
<li>如果字符串的长度大于20字节，那么将会压缩保存：<ul>
<li>REDIS_RDB_ENC_LZF：表示字符串已经被LZF算法压缩过；</li>
<li>compressed_len：表示压缩后的长度；</li>
<li>origin_len：表示原来的长度；</li>
<li>compressed_string：表示被压缩后的字符串；</li>
</ul>
</li>
</ul>
<p><img src="/2020/02/19/Redis的持久化功能实现/8.png" alt></p>
<h5 id="1-3-3-2-列表对象"><a href="#1-3-3-2-列表对象" class="headerlink" title="1.3.3.2 列表对象"></a>1.3.3.2 列表对象</h5><p>​    如果TYPE的值是REDIS_RDB_TYPE_LIST，那么value保存的就是一个列表对象，结构如下图所示：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/9.png" alt></p>
<ul>
<li>list_length：表示列表的长度，保存了多少项</li>
<li>item：保存的元素</li>
</ul>
<h5 id="1-3-3-3-集合对象"><a href="#1-3-3-3-集合对象" class="headerlink" title="1.3.3.3 集合对象"></a>1.3.3.3 集合对象</h5><p>​    如果TYPE的值是REDIS_RDB_TYPE_SET，那么value保存的就是一个集合对象，结构如图所示：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/10.png" alt></p>
<ul>
<li>set_size：集合的大小</li>
<li>elem：保存的元素</li>
</ul>
<h5 id="1-3-3-4-哈希对象"><a href="#1-3-3-4-哈希对象" class="headerlink" title="1.3.3.4 哈希对象"></a>1.3.3.4 哈希对象</h5><p>​    如果TYPE的值是REDIS_RDB_TYPE_HASH，那么value保存的值就是哈希对象，结果如图所示：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/11.png" alt></p>
<ul>
<li>hash_size：哈希表的大小；</li>
<li>key_value_pair：代表一个键值对，里面保存了一个key和一个value，key在前，value在后；</li>
</ul>
<h5 id="1-3-3-5-有序集合对象"><a href="#1-3-3-5-有序集合对象" class="headerlink" title="1.3.3.5 有序集合对象"></a>1.3.3.5 有序集合对象</h5><p>​    如果TYPE的值是REDIS_RDB_TYPE_ZSET，那么value保存的就是一个有序集合对象，结构如图所示：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/12.png" alt></p>
<ul>
<li>sorted_set_size：记录了有序集合的大小；</li>
<li>member：表示的有序集合对象；</li>
<li>score：表示对应对象的分值；</li>
</ul>
<h5 id="1-3-3-6-intset编码的集合"><a href="#1-3-3-6-intset编码的集合" class="headerlink" title="1.3.3.6 intset编码的集合"></a>1.3.3.6 intset编码的集合</h5><p>​    如果TYPE的值为REDIS_RDB_TYPE_SET_INTSET，那么value保存的就是一个整数集合对象，RDB文件保存这种文件的方法是，先将整数集合后转换为字符串对象，然后将字符串对象保存在RDB文件中。</p>
<h5 id="1-3-3-7-ziplist编码的列表、哈希表或有序集合"><a href="#1-3-3-7-ziplist编码的列表、哈希表或有序集合" class="headerlink" title="1.3.3.7 ziplist编码的列表、哈希表或有序集合"></a>1.3.3.7 ziplist编码的列表、哈希表或有序集合</h5><p>​    如果TYPE的值为REDIS_RDB_TYPE_LIST_ZIPLIST、REDIS_RDB_TYPE_HASH_ZIPLIST或者REDIS_RDB_TYPE_ZSET_ZIPLIST，那么value保存的就是一个压缩列表对象，RDB保存这种文件的方法是，将压缩列表转换为一个字符串对象，将所得的字符串对象保存在RDB文件中。</p>
<h2 id="2-AOF持久化"><a href="#2-AOF持久化" class="headerlink" title="2. AOF持久化"></a>2. AOF持久化</h2><p>​    与RDB持久化通过保存数据库中的键值对来记录数据库的状态不同，AOF持久化是通过保存Redsi服务器所执行的写命令来记录数据库状态的。</p>
<h3 id="2-1-AOF持久化的实现"><a href="#2-1-AOF持久化的实现" class="headerlink" title="2.1 AOF持久化的实现"></a>2.1 AOF持久化的实现</h3><p>​    AOF持久化的实现可以分为三步：命令追加、文件写入、文件同步。</p>
<h4 id="2-1-1-命令追加"><a href="#2-1-1-命令追加" class="headerlink" title="2.1.1 命令追加"></a>2.1.1 命令追加</h4><p>​    在服务器执行完一个命令之后，会以协议格式将被执行的写命令追加到服务器的aof_buf缓冲区的末尾</p>
<h4 id="2-1-2-AOF文件的写入与同步"><a href="#2-1-2-AOF文件的写入与同步" class="headerlink" title="2.1.2 AOF文件的写入与同步"></a>2.1.2 AOF文件的写入与同步</h4><pre><code>Redis服务器在处理文件事件的时候可能回执行写命令，使得一些命令被追加到aof_buf缓冲区里，每当服务器结束一个事件循环之前，会调用flushAppendOnlyFile函数，考虑是否要将aof_buf缓冲区中的内容写入到AOF文件中。</code></pre><p>​    flushAppendOnlyFile函数的行为由服务器配置的appendfsync选项的值来决定</p>
<ol>
<li>always：服务器在每个事件循环的时候都会将aof_buf中的所有内容写入到AOF文件中，安全性最高，但是会影响服务器性能；</li>
<li>everysec【默认选项】：将缓冲区中的所有内容写入到AOF文件中，如果上次同步AOF文件距离现在超过一秒钟，那么再次对AOF文件进行同步，即使服务器出现宕机，也只会丢失一秒的数据；</li>
<li>no：同步的时间交给操作系统来决定，性能最佳，但是安全性最低，如果服务器宕机，会丢失所有的数据。</li>
</ol>
<h3 id="2-2-AOF文件的载入与数据还原"><a href="#2-2-AOF文件的载入与数据还原" class="headerlink" title="2.2 AOF文件的载入与数据还原"></a>2.2 AOF文件的载入与数据还原</h3><p>​    因为AOF文件中包含了重建数据库所需的所有写命令，所以服务器只需要重新执行一遍AOF文件里面保存的写命令，就可以完成数据的加载了，但是因为Redis的写命令只能在客户端执行，因此，AOF还原数据的时候，会创建一个不带网络连接的伪客户端，具体的执行步骤如下：</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/13.png" alt></p>
<h3 id="2-3-AOF文件重写"><a href="#2-3-AOF文件重写" class="headerlink" title="2.3 AOF文件重写"></a>2.3 AOF文件重写</h3><p>​    AOF重写可以产生一个新的AOF文件，这个新的AOF文件和原有的AOF文件所保存的数据库状态一样，但是体积更小。AOF重写是通过读取数据库中的键值对来操作的，不会对现有的AOF文件有读写的操作。</p>
<p>​    通过读取数据库的状态，从而达到精简AOF文件中写命令的目的。为了避免在执行命令时造成客户端输入缓冲区溢出，在处理字符串对象以外的对象时，会先检查键所包含的元素数量，如果超过了默认常量64，将分为多个写命令。</p>
<p>​    服务器将会启动一个子进程来进行AOF后台重写，后台重写期间，如果主进程也进行了写命令，会将这些命令写入AOF重写缓冲区中。子进程重写完毕后，会发出一个信号，父进程在接收到信号后，会执行一个信号处理函数，并将AOF重写缓冲区中的所有数据写入新AOF文件中，然后对新的AOF进行改名，原子地覆盖原来的AOF文件，在此期间，服务器主进程将进入阻塞状态。</p>
<p><img src="/2020/02/19/Redis的持久化功能实现/14.png" alt></p>
<p>​    </p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2020/02/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>​    从左到右不断交换相邻逆序的元素，在一轮的循环之后，可以让未排序的最大元素上浮到右侧。</p>
<p>在一轮循环中，如果没有发生交换，那么说明数组已经是有序的，此时可以直接退出。</p>
<a id="more"></a>

<p>​    思路：</p>
<p><img src="/2020/02/18/排序算法/1.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">false</span>;	<span class="comment">//表示是否进行过交换 -----&gt;对冒泡排序进行优化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    	flag = <span class="keyword">false</span>;	<span class="comment">//重置flag</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            	flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">break</span>; 	<span class="comment">//如果一次交换都没有发生,则退出该次遍历</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>​    从数组中选择最小元素，将它与数组的第一个元素交换位置。再从数组剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。</p>
<p>​    选择排序需要 ~N2/2 次比较和 ~N 次交换，它的运行时间与输入无关，这个特点使得它对一个已经排序的数组也需要这么多的比较和交换操作。</p>
<p>​    思路：</p>
<p><img src="/2020/02/18/排序算法/2.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    	<span class="keyword">int</span> min = arr[i];	</span><br><span class="line">        <span class="keyword">int</span> index = i;	<span class="comment">//这是最小数的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (arr[j] &lt; min) &#123; <span class="comment">//说明假定的最小值，不是最小</span></span><br><span class="line">            	min = arr[j];	<span class="comment">//重置min</span></span><br><span class="line">                index = j;		<span class="comment">//重置index</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != i) &#123;</span><br><span class="line">        	arr[index] = arr[i];</span><br><span class="line">            arr[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>​    插入排序（Insertion Sorting）的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p>
<p>​    思路：</p>
<p><img src="/2020/02/18/排序算法/3.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    	<span class="keyword">int</span> val = arr[i];	<span class="comment">//表示为要插入的这个数</span></span><br><span class="line">        <span class="keyword">int</span> index = i - <span class="number">1</span>;	<span class="comment">//表示为要插入的这个位置的前面那个数的下标</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.index &gt;= 0 ,保证数组脚标不会越界</span></span><br><span class="line">        <span class="comment">//2.val &lt; arr[index] 表示与前面的数依次比较，如果小于，则表示没有找到插入的位置</span></span><br><span class="line">        <span class="comment">//3.此时需要把arr[index]往后移</span></span><br><span class="line">        <span class="comment">//4.当val &gt; arr[index] 则表示找到了插入的位置</span></span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; arr[index] &gt; val) &#123;</span><br><span class="line">        	arr[index+<span class="number">1</span>] = arr[index];</span><br><span class="line">            index--;	<span class="comment">//下标向前移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当没有再进入循环，表示找到了插入的位置</span></span><br><span class="line">        <span class="comment">//因为有个脚标前移，如果当前这个数大于了前面那个数，则位置应该是index+1</span></span><br><span class="line">        <span class="comment">//如果找到了最前面，此时的index变成了-1，所以必须要+1，不然会脚标越界</span></span><br><span class="line">        arr[index+<span class="number">1</span>] = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>​    快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<p>​    思路：</p>
<p><img src="/2020/02/18/排序算法/4.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">int</span> l = left; <span class="comment">//定义一个从左往右走的指针</span></span><br><span class="line">    <span class="keyword">int</span> r = right; <span class="comment">//定义一个从右往左走的指针</span></span><br><span class="line">    <span class="keyword">int</span> pivot = arr[(left+right) / <span class="number">2</span>]; <span class="comment">//找到数组的中间的那个元素</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">//定义一个交换使用的中间介</span></span><br><span class="line">    <span class="comment">//while循环的目的是让比pivot小的在pivot的左边，比pivot大的在pivot的右边</span></span><br><span class="line">    <span class="keyword">while</span> ( l &lt; r )&#123;</span><br><span class="line">    	<span class="comment">//在pivot的左边找，直到找到比pivot大的才退出</span></span><br><span class="line">        <span class="keyword">while</span> ( arr[l] &lt; pivot)&#123;</span><br><span class="line">        	l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在pivot的右边找，直到找到比pivot小的才退出</span></span><br><span class="line">        <span class="keyword">while</span> ( arr[r] &gt; pivot)&#123;</span><br><span class="line">        	r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当 l &gt;= r 说明pivot左边都是比pivot小的数了，右边都是比pivot大的数了</span></span><br><span class="line">        <span class="keyword">if</span> ( l &gt;= r)&#123;</span><br><span class="line">        	<span class="comment">//此时退出循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换</span></span><br><span class="line">        temp = arr[l];</span><br><span class="line">        arr[l] = arr[r];</span><br><span class="line">        arr[r] = temp;</span><br><span class="line">        <span class="comment">//当交换完后</span></span><br><span class="line">        <span class="comment">//这两个判断非常重要！！！！！！！！！！！！！！,如果错误，会出现数据丢失，排序失败</span></span><br><span class="line">        <span class="comment">//如果arr[l]==pivot则，r--</span></span><br><span class="line">        <span class="keyword">if</span> (arr[l]==pivot)&#123;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果arr[r]==pivot则，l++</span></span><br><span class="line">        <span class="keyword">if</span> (arr[r]==pivot)&#123;</span><br><span class="line">        	l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一轮循环结束</span></span><br><span class="line">    <span class="comment">//如果l==r 必须l++，r--，否则会栈溢出</span></span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">    	l++;</span><br><span class="line">    	r--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    <span class="keyword">if</span> (left&lt;r)&#123;</span><br><span class="line">    	quickSort(arr,left,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    <span class="keyword">if</span> (l&lt;right)&#123;</span><br><span class="line">    	quickSort(arr,l,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h2><p>​    归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>
<p>​    思路：</p>
<p><img src="/2020/02/18/排序算法/5.png" alt></p>
<p>​    再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤</p>
<p><img src="/2020/02/18/排序算法/6.png" alt></p>
<p><img src="/2020/02/18/排序算法/7.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分+合的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left , <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( left &lt; right )&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = ( left + right ) / <span class="number">2</span>;<span class="comment">//获取中间值</span></span><br><span class="line">    	<span class="comment">//向左边递归进行分解</span></span><br><span class="line">        mergeSort(arr,left,mid,temp);</span><br><span class="line">        <span class="comment">//向右边递归进行分解</span></span><br><span class="line">        mergeSort(arr,mid + <span class="number">1</span>,right,temp);</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        merge(arr,left,mid,right,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*合并的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> left 左边索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mid   中间索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> temp  作为中转的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = left; <span class="comment">//左边有序序列的索引</span></span><br><span class="line">    <span class="keyword">int</span> j = mid+<span class="number">1</span>; <span class="comment">//右边有序序列的索引</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;  <span class="comment">//中转数组的索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.先把左右两边的有序序列数据按照规则填充到temp数组中</span></span><br><span class="line">    <span class="comment">//直到左边或右边的其中一个有序序列处理完毕</span></span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= mid &amp;&amp; j &lt;= right )&#123;</span><br><span class="line">    <span class="comment">//如果左边有序序列的元素小于右边有序序列的元素</span></span><br><span class="line">    <span class="comment">//将左边的当前元素放入temp数组</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt;= arr[j])&#123;</span><br><span class="line">   	    temp[t] = arr[i];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; <span class="comment">//反之</span></span><br><span class="line">        temp[t] = arr[j];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.当左边或右边其中一列有序序列全部填充到temp数组后</span></span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= mid)&#123; <span class="comment">//表示左边元素还有剩余，剩下的全部填充到temp数组</span></span><br><span class="line">   	    temp[t] = arr[i];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( j &lt;= right)&#123; <span class="comment">//表示右边元素还有剩余，剩下的全部填充到temp数组</span></span><br><span class="line">   	    temp[t] = arr[j];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        j += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.当左右两边的数组全部填充到temp数组后，把temp数组的元素全部复制到arr数组</span></span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tempLeft = left;</span><br><span class="line">    <span class="keyword">while</span> (tempLeft &lt;= right)&#123;</span><br><span class="line">    	arr[tempLeft] = temp[t];</span><br><span class="line">        tempLeft += <span class="number">1</span>;</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6. 堆排序"></a>6. 堆排序</h2><p>​    堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p>
<p>​    堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, 注意 : 没有要求结点的左孩子的值和右孩子的值的大小关系。每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。一般升序采用大顶堆，降序采用小顶堆 。</p>
<p>大顶堆举例说明：</p>
<p><img src="/2020/02/18/排序算法/8.png" alt></p>
<p>我们对堆中的结点按层进行编号，映射到数组中就是下面这个样子: </p>
<p><img src="/2020/02/18/排序算法/9.png" alt></p>
<p>大顶堆特点：arr[i] &gt;= arr[2<em>i+1] &amp;&amp; arr[i] &gt;= arr[2</em>i+2]  // i 对应第几个节点，i从0开始编号。</p>
<p>小顶堆举例说明：</p>
<p><img src="/2020/02/18/排序算法/10.png" alt></p>
<p>小顶堆：arr[i] &lt;= arr[2<em>i+1] &amp;&amp; arr[i] &lt;= arr[2</em>i+2] // i 对应第几个节点，i从0开始编号。</p>
<p>思路：</p>
<ol>
<li>假设给定的无序序列结构如下：</li>
</ol>
<p><img src="/2020/02/18/排序算法/11.png" alt></p>
<ol start="2">
<li>此时，我们从最后一个非叶子节点开始（最后一个非叶子节点：arr.length / 2 - 1 = 5/2 - 1 = 1），从左至右，从下往上调整：</li>
</ol>
<p><img src="/2020/02/18/排序算法/12.png" alt></p>
<ol start="3">
<li>找到第二个非叶子节点4，由于【4，9，8】中9最大，因此4和9交换：</li>
</ol>
<p><img src="/2020/02/18/排序算法/13.png" alt></p>
<ol start="4">
<li>此时，交换导致了【4，5，6】结构混乱，继续调整，其中6最大，交换4和6：</li>
</ol>
<p><img src="/2020/02/18/排序算法/14.png" alt></p>
<p>此时，已经构建好了一个大顶堆，然后，将堆顶元素与末尾元素交换，使末尾元素最大，然后继续调整堆，再将堆顶元素与末尾元素交换</p>
<ol start="5">
<li>将堆顶元素9和末尾元素4交换</li>
</ol>
<p><img src="/2020/02/18/排序算法/15.png" alt></p>
<ol start="6">
<li>重新调整结构，使其继续满足堆的定义</li>
</ol>
<p><img src="/2020/02/18/排序算法/16.png" alt></p>
<ol start="7">
<li>再将堆顶元素8与末尾5交换，得到第二大元素8：</li>
</ol>
<p><img src="/2020/02/18/排序算法/17.png" alt></p>
<ol start="8">
<li>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序：</li>
</ol>
<p><img src="/2020/02/18/排序算法/18.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1.将无序数组构建成一个大顶堆 （这是从左往右，从下往上调整）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span> - <span class="number">1</span> ;  i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">    	adjustHeap(arr,i,arr.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.将堆顶元素与末尾元素交换，将最大元素沉到数组末端</span></span><br><span class="line">    <span class="comment">//3.重新调整结构，使其满足大顶堆的定义，然后继续交换堆顶元素与当前末尾元素交换，反复执行调整+交换步骤，直至有序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span> ; j--)&#123;</span><br><span class="line">    	<span class="comment">//交换</span></span><br><span class="line">        temp = arr[j];</span><br><span class="line">        arr[j] = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = temp;</span><br><span class="line">        adjustHeap(arr,<span class="number">0</span>,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr  表示待调整的数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> i     表示非叶子节点在数组中的索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> length 表示对多少个元素继续调整，length是在逐渐减少的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//先取出当前元素的值，保存在一个临时变量中</span></span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//进行一个for循环，k = i * 2 + 1 表示k这个节点是i节点的左子节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = i * <span class="number">2</span> +<span class="number">1</span> ; k &lt; length ; k = k * <span class="number">2</span> +<span class="number">1</span> )&#123; <span class="comment">//k = k*2+1表示寻找k这个节点的左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (k+<span class="number">1</span>&lt;length &amp;&amp; arr[k]&lt;arr[k+<span class="number">1</span>])&#123; <span class="comment">//表示左子节点如果小于右子节点，则k += 1</span></span><br><span class="line">        	k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       	<span class="keyword">if</span> (arr[k] &gt; temp)&#123; <span class="comment">//如果刚才比较中大的那个节点又大于了temp</span></span><br><span class="line">            arr[i] = arr[k]; <span class="comment">//把较大的值赋给当前节点</span></span><br><span class="line">            i = k; <span class="comment">//i指向k，继续循环遍历</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当for循环结束后，我们已经把以i为父节点的树的最大值放在顶部（只是局部的调整，且i的索引不在指向顶部,因为i在for循环中指向了k)</span></span><br><span class="line">    arr[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="排序算法的比较"><a href="#排序算法的比较" class="headerlink" title="排序算法的比较"></a>排序算法的比较</h1><p><img src="/2020/02/18/排序算法/19.png" alt></p>
<p>相关术语解释：</p>
<ol>
<li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</li>
<li>不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</li>
<li>内排序：所有排序操作都在内存中完成；</li>
<li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li>时间复杂度： 一个算法执行所耗费的时间。</li>
<li>空间复杂度：运行完一个程序所需内存的大小。</li>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place:    不占用额外内存</li>
<li>Out-place: 占用额外内存</li>
</ol>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis中的Sentinel</title>
    <url>/2020/02/17/Redis%E4%B8%AD%E7%9A%84Sentinel/</url>
    <content><![CDATA[<h1 id="Redis中的Sentinel"><a href="#Redis中的Sentinel" class="headerlink" title="Redis中的Sentinel"></a>Redis中的Sentinel</h1><p>​    Sentinel（哨兵）是Redis的高可用解决方案：由一个或多个redis服务器组成Sentinel系统，可以简直任意多个主服务器，以及这些主服务器属下的从服务器，并在被监视的主服务器下线时，自动将下线服务器的某个从服务器升级为主服务器，然后由新的主服务器代替已下线的主服务器处理命令请求。</p>
<a id="more"></a>

<p>下图展示了一个Sentinel系统监视服务器的例子：</p>
<ul>
<li>双环图案表示的是当前的主服务器server1；</li>
<li>单环图案表示的是当前的主服务器的三个从服务器server2、server3、server4；</li>
<li>从服务器正在复制主服务器，Sentinel则在监视四个服务器</li>
</ul>
<p><img src="/2020/02/17/Redis中的Sentinel/1.png" alt></p>
<p>下面三张图展示了主服务器下线，Sentinel挑选出一个新的主服务器的流程：</p>
<p><img src="/2020/02/17/Redis中的Sentinel/2.png" alt></p>
<p><img src="/2020/02/17/Redis中的Sentinel/3.png" alt></p>
<p><img src="/2020/02/17/Redis中的Sentinel/4.png" alt></p>
<h2 id="1-Sentinel的初始化以及获取服务器信息"><a href="#1-Sentinel的初始化以及获取服务器信息" class="headerlink" title="1. Sentinel的初始化以及获取服务器信息"></a>1. Sentinel的初始化以及获取服务器信息</h2><h3 id="1-1-初始化Sentinel"><a href="#1-1-初始化Sentinel" class="headerlink" title="1.1 初始化Sentinel"></a>1.1 初始化Sentinel</h3><p>​    因为Sentinel本质上就是一个运行在特殊模式下的Redis服务器，所以启动Sentinel的第一步就是初始化Redis服务器，不过在和启动普通Redis服务器上有一些不同：</p>
<ul>
<li>Sentinel并不使用数据库，因此初始化的时候不会加载RDB或AOF持久化文件</li>
<li>将一部分普通Redis的代码替换成Sentinel专用代码，并初始化一个sentinelState结构，这个结构保存了服务器中所有和Sentinel功能有关的状态。</li>
<li>用一个字典记录所有被Sentinel监视的主服务器信息，字典的键是被监视主服务器的名字，值是被监视主服务器对应的sentinelRedisInstance结构。该结构代表一个被Sentinel系统监视的服务器实例，可以是主服务器、从服务器、Sentinel</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sentinelRedisInstance</span> &#123;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//标识值，记录了当前这个实例的类型以及状态</span></span><br><span class="line">  <span class="keyword">int</span> flags;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//实例的名字，主服务器的名字由用户在配置文件中设置</span></span><br><span class="line">  <span class="comment">//从服务器以及Sentinel的名字由Sentinel自动设置</span></span><br><span class="line">  <span class="comment">//格式位ip:port</span></span><br><span class="line">  <span class="keyword">char</span> *name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//实例的运行ID</span></span><br><span class="line">  <span class="keyword">char</span> *runid;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//配置纪元，用于实现故障转移</span></span><br><span class="line">  <span class="keyword">uint64_t</span> config_epoch;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//实例的地址</span></span><br><span class="line">  sentinelAddr *addr;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//实例无响应多少毫秒会被判定为主观下线，该值从配置文件中加载</span></span><br><span class="line">  <span class="keyword">mstime_t</span> down_after_period;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//判断这个实例客观下线所需要的支持投票数量</span></span><br><span class="line">  <span class="keyword">int</span> quorum;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建两个连向主服务器的网络连接，一个是命令连接，一个是订阅连接。<ul>
<li>命令连接：专门用于向主服务器发送命令，并接收回复</li>
<li>订阅连接：专门用于订阅主服务的频道。</li>
</ul>
</li>
<li>获取主服务器的信息，默认频率为10秒一次，通过命令连接发送INFO命令。</li>
<li>获取从服务器的信息，Sentinel能够通过主服务器获取其从服务器的名单，创建从服务器的实例，并建立命令连接和订阅连接</li>
</ul>
<h2 id="2-判断主服务器的下线以及故障转移"><a href="#2-判断主服务器的下线以及故障转移" class="headerlink" title="2. 判断主服务器的下线以及故障转移"></a>2. 判断主服务器的下线以及故障转移</h2><h3 id="2-1-判断主服务器主观下线"><a href="#2-1-判断主服务器主观下线" class="headerlink" title="2.1 判断主服务器主观下线"></a>2.1 判断主服务器主观下线</h3><p>​    默认情况下，Sentinel会以每秒一次的频率向所有与它创建了命令连接的实例（包括主从服务器和其它Sentinel）发送PING命令，来判断其是否在线。Sentinel配置文件中的down_after_milliseconds指定了Sentinel判断实例进入主观下线状态所需的时间：如果一个实例在down_after_milliseconds毫秒内，没有回复，那么sentinel就会将实例结构中flags属性的SRI_S_DOWN标识打开，表示这个实例已经进入主观下线状态。</p>
<p>​    下图展示了主服务器被标记为主观下线状态：</p>
<p><img src="/2020/02/17/Redis中的Sentinel/5.png" alt></p>
<h4 id="2-1-1-扩展"><a href="#2-1-1-扩展" class="headerlink" title="2.1.1 扩展"></a>2.1.1 扩展</h4><p>多个Sentinel设置的主观下线时长可能不同，要根据每个Sentinel载入的配置来判断。</p>
<p>举个例子，如果Sentinel1载入了以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds master 50000</span><br></pre></td></tr></table></figure>

<p>而Sentinel2载入了以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds master 10000</span><br></pre></td></tr></table></figure>

<p>那么当master的断线时长超过了10000毫秒，Sentinel2会将master判断为主观下线，而Sentinel1仍然会认为master在线，只有超过了50000毫秒，Sentinel1才会也认为master主观下线</p>
<h3 id="2-2-判断主服务器客观下线"><a href="#2-2-判断主服务器客观下线" class="headerlink" title="2.2 判断主服务器客观下线"></a>2.2 判断主服务器客观下线</h3><p>​    当Sentinel将一个主服务判断为主观下线之后，为了确认这个主服务器是否真的下线，它会向同样监视这一个主服务器的其它Sentinel询问，看它们是否也认为主服务器已经进入下线状态。当Sentinel从其它Sentinel那里接收到足够数量的已下线判断之后，Sentinel就会将该服务器判定为客观下线，并执行故障转移操作。</p>
<ul>
<li>发送SENTINEL is-master-down-by-addr命令：Sentinel会向其它Sentinel发送该命令进行询问；</li>
<li>接收SENTINEL is-master-down-by-addr命令：当一个Sentinel接收到该命令，会检查主服务器是否已下线，然后回复结果；</li>
<li>Sentinel接收到回复，将主服务器判断为客观下线，将主服务器的SRI_O-DOWN标识打开。</li>
</ul>
<h4 id="2-2-1-扩展"><a href="#2-2-1-扩展" class="headerlink" title="2.2.1 扩展"></a>2.2.1 扩展</h4><h5 id="2-2-1-1-客观下线状态的判断条件"><a href="#2-2-1-1-客观下线状态的判断条件" class="headerlink" title="2.2.1.1 客观下线状态的判断条件"></a>2.2.1.1 客观下线状态的判断条件</h5><p>例如，如果Sentinel在启动时载入了以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure>

<p>那么包括当前Sentinel在内，只要总共由两个Sentinel认为主服务已经进入下线状态，那么当前Sentinel就会将主服务器判断为客观下线，将SRI_O_DOWN标识打开。</p>
<p>又如果说Sentinel在启动时载入的以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 5</span><br></pre></td></tr></table></figure>

<p>则需要5个Sentinel认定才行。</p>
<h5 id="2-2-1-2-不同Sentinel判断客观下线的条件可能不同"><a href="#2-2-1-2-不同Sentinel判断客观下线的条件可能不同" class="headerlink" title="2.2.1.2 不同Sentinel判断客观下线的条件可能不同"></a>2.2.1.2 不同Sentinel判断客观下线的条件可能不同</h5><p>当一个Sentinel将主服务器判断为客观下线时，其它的Sentinel可能不会这么认为。</p>
<p>例如，如果Sentinel1载入的是以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure>

<p>而Sentinel2载入的是以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 5</span><br></pre></td></tr></table></figure>

<p>那么仅仅有两个Sentinel将主服务器判断为客观下线时，Sentinel2不会将其判断为客观下线。</p>
<h3 id="2-3-故障转移"><a href="#2-3-故障转移" class="headerlink" title="2.3 故障转移"></a>2.3 故障转移</h3><h4 id="2-3-1-挑选出新的主服务器"><a href="#2-3-1-挑选出新的主服务器" class="headerlink" title="2.3.1 挑选出新的主服务器"></a>2.3.1 挑选出新的主服务器</h4><p>​    领头Sentinel（后面介绍）会将已下线主服务器的所有从服务器保存在一个列表，然后按照以下规则进行过滤：</p>
<ol>
<li>删除列表中所有处于下线状态或者断线状态的从服务器，以此保证列表中剩余的从服务器都是正常在线的。</li>
<li>删除列表中所有最近五秒内没有回复过领头Sentinel的INFO命令的从服务器。</li>
<li>删除所有与已下线服务器连接断开超过down-after-milliseconds * 10毫秒的服务器，down-after-milliseconds选项指定了判断主服务器下线所需的时间，而删除时长超过down-after-milliseconds * 10毫秒的服务器，可以保证列表中剩余的从服务器都没有过早的与主服务器断开连接。</li>
<li>之后，领头Sentinel将根据从服务器的优先级，对列表中剩余的从服务器进行排序，并选出其中优先级最高的从服务器</li>
<li>如果有多个具有相同最高优先级的从服务器，那么领头Sentinel将按照从服务器的复制偏移量，对具有相同最高优先级的从服务器进行排序，并选出偏移量最大的从服务器，以此保证数据是最新的。</li>
<li>如果复制偏移量都相同，则选择运行ID最小的服务器</li>
</ol>
<h4 id="2-3-2-修改从服务器的复制目标"><a href="#2-3-2-修改从服务器的复制目标" class="headerlink" title="2.3.2 修改从服务器的复制目标"></a>2.3.2 修改从服务器的复制目标</h4><p>​    当新的主服务器出现之后，领头Sentinel下一步就是已下线的主服务器的所有从服务器去复制新的主服务器。</p>
<h4 id="2-3-3-将旧的主服务器变为从服务器"><a href="#2-3-3-将旧的主服务器变为从服务器" class="headerlink" title="2.3.3 将旧的主服务器变为从服务器"></a>2.3.3 将旧的主服务器变为从服务器</h4><p>​    故障转移的最后操作就是，当新的主服务器重新上线的时候，领头Sentinel会将其设置为从服务器</p>
<h2 id="3-领头Sentinel的选举"><a href="#3-领头Sentinel的选举" class="headerlink" title="3. 领头Sentinel的选举"></a>3. 领头Sentinel的选举</h2><p>​    当一个主服务器被判断为客观下线时，监视这个下线服务器的各个Sentinel会进行协商，选举一个领头Sentinel，并由领头Sentinel对下线服务器执行故障转移工作。</p>
<p>​    以下是Redis选举领头Sentinel的规则和方法：</p>
<ol>
<li>所有在线的Sentinel都有被选为领头Sentinel的资格，也就是说，只要Sentinel监视了这个已下线的主服务器，那这个Sentinel就有选举机会；</li>
<li>每次进行领头Sentinel选举后，不论选举是否成功，所有Sentinel的配置纪元的值就会自增一次。配置纪元实际上就是一个计数器；</li>
<li>在一个配置纪元里，所有的Sentinel都有一次将某个Sentinel设置为局部领头Sentinel的机会，并且局部领头一旦设置，就不可再更改；</li>
<li>每个发现主服务器进行客观下线的Sentinel都会要求其它Sentinel将自己设置为局部领头Sentinel；</li>
<li>当一个Sentinel（源Sentinel）向另一个Sentinel（目标Sentinel）发送SENTINEL is-master-down-by-addr命令，并且命令中的runid参数不是*而是源Sentinel的运行ID时，这表示源Sentinel要求目标Sentienl将自己设置为局部领头Sentinel；</li>
<li>Sentinel设置局部领头Sentinel的规则是先到先得：最先向目标Sentinel发送设置要求的源Sentinel将称为目标Sentinel的局部领头Sentinel，而之后所有的设置请求都会被拒绝；</li>
<li>目标Sentinel在接收到SENTINEL is-master-down-by-addr命令后，将向源Sentinel返回一条命令回复，回复中的leader_runid参数和leader_epoch参数分别记录源Sentinel的运行ID和配置纪元；</li>
<li>如果源Sentinel收到的两个参数与自己匹配，就表示目标Sentinel将自己设置为了局部领头Sentinel；</li>
<li>如果有某个Sentinel被半数以上的Sentinel设置为局部领头Sentinel，那么这个Sentinel就会成为领头Sentinel；</li>
<li>因为领头Sentinel的产生需要半数以上的Sentinel的支持，并且每个Sentinel在每个配置纪元里只能设置一次局部领头Sentinel，所以一个配置纪元里，只会出现一个领头Sentinel；</li>
<li>如果在给定时间内，没有选举出领头Sentinel，那么各个Sentinel将在一段时间后再次进行选举，直到选出。</li>
</ol>
<p><img src="/2020/02/17/Redis中的Sentinel/6.png" alt></p>
<p><img src="/2020/02/17/Redis中的Sentinel/7.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://redisbook.com/index.html" target="_blank" rel="noopener">黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014.</a></li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis中的数据结构</title>
    <url>/2020/02/16/Redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Redis中的数据结构"><a href="#Redis中的数据结构" class="headerlink" title="Redis中的数据结构"></a>Redis中的数据结构</h1><h2 id="1-简单动态字符串（Simple-Dynamic-String，SDS）"><a href="#1-简单动态字符串（Simple-Dynamic-String，SDS）" class="headerlink" title="1. 简单动态字符串（Simple Dynamic String，SDS）"></a>1. 简单动态字符串（Simple Dynamic String，SDS）</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>​    Redis没有直接使用C语言传统的字符串表示，而是自己构建了一种名为简单动态字符串的结构，并将该结构作为Redis的默认字符串表示。SDS遵循了C字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在len属性里，并且为空字符串额外分配1字节的空间。</p>
<a id="more"></a>

<p><img src="/2020/02/16/Redis中的数据结构/1.png" alt="SDS示例"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span>&#123;</span>	</span><br><span class="line">	<span class="keyword">int</span> len;	<span class="comment">//表示sds记录的字符串的长度，以及字符数组中已使用的数量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">free</span>;	<span class="comment">//表示buf数组中未使用的数量	</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buf[];	<span class="comment">//字节数组，用于保存字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-SDS与C字符串的区别"><a href="#1-2-SDS与C字符串的区别" class="headerlink" title="1.2 SDS与C字符串的区别"></a>1.2 SDS与C字符串的区别</h3><h4 id="1-2-1-以常数的时间复杂度获取字符串长度"><a href="#1-2-1-以常数的时间复杂度获取字符串长度" class="headerlink" title="1.2.1 以常数的时间复杂度获取字符串长度"></a>1.2.1 以常数的时间复杂度获取字符串长度</h4><p>​    因为C字符串并不记录自身的长度信息，所以为了获取一个C字符串的长度，必须遍历整个字符串。由于SDS中的len属性，因此SDS字符串的长度可以直接获取。</p>
<h4 id="1-2-2-杜绝缓冲区溢出"><a href="#1-2-2-杜绝缓冲区溢出" class="headerlink" title="1.2.2 杜绝缓冲区溢出"></a>1.2.2 杜绝缓冲区溢出</h4><p>​    SDS中的free属性记录了该结构的剩余可用空间，杜绝了C字符串中由于没有分配足够的空间，导致C字符串拼接时，导致的缓冲区溢出问题</p>
<h4 id="1-2-3-减少修改字符串时带来的内存重分配次数"><a href="#1-2-3-减少修改字符串时带来的内存重分配次数" class="headerlink" title="1.2.3 减少修改字符串时带来的内存重分配次数"></a>1.2.3 减少修改字符串时带来的内存重分配次数</h4><p>​    为了避免C字符串中修改字符串就会出现内存重分配的问题，SDS通过未使用空间解除了字符串长度和底层数组长度之间的关联。并且SDS实现了空间预分配和惰性空间释放两种优化策略。</p>
<ol>
<li>空间预分配<ol>
<li>如果对SDS进行修改之后，SDS的长度将小于1MB，那么程序将分配和len属性相同大小的未使用空间，例如：SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，buf数组的实际长度将变为13+13+1=27。</li>
<li>如果修改之后SDS大于了1MB，则将再分配1MB，例如：SDS的len将变成30MB，那么程序将再分配1MB的未使用空间。</li>
</ol>
</li>
<li>惰性空间释放：当SDS的API需要缩短SDS字符串时，程序并不立即使用内存重分配来回收缩短后多出的字节，而是使用free来记录这些多余的空间，并等待将来使用。</li>
</ol>
<h2 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2. 双向链表"></a>2. 双向链表</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>链表提供了高效的节点重排能力，以及顺序性的节点访问方式，除了链表键之外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis服务器本身还使用链表来保存多个客户端的状态信息，以及使用链表来构建客户端输出缓冲区。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">链表节点定义</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//节点的值</span></span><br><span class="line">	<span class="keyword">void</span> *values;</span><br><span class="line"></span><br><span class="line">&#125;listNode;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Redis中的数据结构/2.png" alt="由多个listNode组成的双向链表"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">链表定义</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//表头节点</span></span><br><span class="line">	listNode *head;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//表尾节点</span></span><br><span class="line">	listNode *tail;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//链表所包含的节点数</span></span><br><span class="line">	unsinged <span class="keyword">long</span> len;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//节点值赋值函数</span></span><br><span class="line">	<span class="keyword">void</span> *(*dup) (<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//节点释放函数</span></span><br><span class="line">	<span class="keyword">void</span> (*<span class="built_in">free</span>) (<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//节点值对比函数</span></span><br><span class="line">	<span class="keyword">int</span> (*match) (<span class="keyword">void</span> *ptr, vpod *key）;</span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-字典"><a href="#3-字典" class="headerlink" title="3. 字典"></a>3. 字典</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>字典，是一种用于保存键值对的抽象数据结构。除了用来表示数据库之外，字典还是哈希键的底层实现之一，当一个哈希键包含的键值对比较多，又或者键值对中的元素都是比较长的字符串时，Redis就会使用字典作为哈希键的底层实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">哈希表结构</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">	<span class="comment">//哈希表数组</span></span><br><span class="line">	dicEntry **table;</span><br><span class="line">	<span class="comment">//哈希表大小</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">	<span class="comment">//哈希表大小掩码，用于计算索引值，总是等于size-1</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">	<span class="comment">//该哈希表已有的节点的数量</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">	<span class="comment">//键</span></span><br><span class="line">	<span class="keyword">void</span> *key;</span><br><span class="line">	<span class="comment">//值</span></span><br><span class="line">	<span class="keyword">union</span> &#123;</span><br><span class="line">		<span class="keyword">void</span> *val;</span><br><span class="line">		<span class="keyword">uint64_t</span> u64;</span><br><span class="line">		<span class="keyword">int64_t</span> s64;</span><br><span class="line">	&#125; v;</span><br><span class="line">	<span class="comment">//指向下个哈希表节点，形成链表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;dictEntry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字典结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">	<span class="comment">//类型特定函数</span></span><br><span class="line">	dictType *type;</span><br><span class="line">	<span class="comment">//私有数据</span></span><br><span class="line">	<span class="comment">//保存了需要传给那些类型特定函数的可选参数</span></span><br><span class="line">	<span class="keyword">void</span> *privdata;</span><br><span class="line">	<span class="comment">//哈希表</span></span><br><span class="line">	dictht ht[<span class="number">2</span>];</span><br><span class="line">	<span class="comment">//rehash索引，当rehash不在进行时，值为-1</span></span><br><span class="line">	<span class="keyword">int</span> trehashidx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下图展示了一个普通状态下（没有进行rehash）的字典</p>
<p><img src="/2020/02/16/Redis中的数据结构/3.png" alt></p>
<h3 id="3-2-哈希算法"><a href="#3-2-哈希算法" class="headerlink" title="3.2 哈希算法"></a>3.2 哈希算法</h3><p>Redis使用的是MurmurHash2算法。</p>
<h3 id="3-3-解决键冲突"><a href="#3-3-解决键冲突" class="headerlink" title="3.3 解决键冲突"></a>3.3 解决键冲突</h3><p>使用的是链地址法，每个哈希表节点都有一个next指针，多个节点可以用next构成一个链表，新的元素会称为链表头。</p>
<h3 id="3-4-rehash"><a href="#3-4-rehash" class="headerlink" title="3.4  rehash"></a>3.4  rehash</h3><p>字典中的rehash是渐进式的，是为了避免数据过多时，一次性进行rehash会对服务器造成影响，先逐渐的将ht[0]表中的数据复制到ht[1]，再将ht[1]赋值给ht[0]，成为新的ht[0],再重新创建一个ht[1];rehash期间对数据的写操作都会在ht[1]表上进行。</p>
<p>下列图展示了一个字典的rehash过程。</p>
<p><img src="/2020/02/16/Redis中的数据结构/4.png" alt></p>
<p>ht[0]当前的值为4，4*2=8，而8恰好是第一个大于等于4的2倍N次方的数，所以ht[1]哈希表的大小为8。</p>
<p><img src="/2020/02/16/Redis中的数据结构/5.png" alt></p>
<p>将ht[0]包含的4个键值对都rehash到ht[1]。</p>
<p><img src="/2020/02/16/Redis中的数据结构/6.png" alt></p>
<p>释放ht[0],并将ht[1]设置为ht[0]，然后为ht[1]分配一个空白哈希表。</p>
<p><img src="/2020/02/16/Redis中的数据结构/7.png" alt></p>
<h2 id="4-跳表"><a href="#4-跳表" class="headerlink" title="4. 跳表"></a>4. 跳表</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>​    跳表是一种有序的数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。跳表支持平均O(logN)、最坏O(N)复杂度的节点查找，还可以通过顺序性操作来批量处理节点。在大部分情况下，跳表的效率可以和平衡树媲美。Redis只在两个地方使用了跳表，一个是实现有序集合键，另一个是在集群节点中作为内部数据结构。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳表节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//后退指针，用于从表尾向表头方向访问节点，每次只能后退到前一个节点，如果为NULL，则访问结束</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//分值，权重，跳表中的所有对象都按照权重从小到大排序，如果权重相同，则按照对象的字典序进行排序</span></span><br><span class="line">	<span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员对象，是一个指针，指向了一个字符串对象</span></span><br><span class="line">	robj obj;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//层，每次创建一个跳表节点时，根据幂次定律(越大的数，出现的概率越小)，随机生成一个介于1和32之间的值，作为level数组的大小，这个大小就是层的高度</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//前进指针，用于从表头向表尾方向访问节点，</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//跨度，用于记录两个节点间的距离，跨度越大，相距的越远</span></span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> span;</span><br><span class="line">	&#125; llevel[] ;</span><br><span class="line"></span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure>

<p>下图展示了不同层高的跳表节点：</p>
<p><img src="/2020/02/16/Redis中的数据结构/8.png" alt></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//表头节点和表尾节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">skiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//表中节点的数量</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//表中层数最大的节点的层数</span></span><br><span class="line">	<span class="keyword">int</span> level;</span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure>

<p>下图展示了一个跳表结构：</p>
<p><img src="/2020/02/16/Redis中的数据结构/9.png" alt></p>
<h2 id="5-整数集合"><a href="#5-整数集合" class="headerlink" title="5. 整数集合"></a>5. 整数集合</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><p>​    整数集合是集合键的底层实现之一，当一个集合只包含整数元素，并且这个集合的元素数量不多时，itnset就会被使用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//intset的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//编码方式</span></span><br><span class="line">	<span class="keyword">uint32_t</span> encoding;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//集合包含元素的数量</span></span><br><span class="line">	<span class="keyword">uint32_t</span> length;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//保存元素的数组</span></span><br><span class="line">	<span class="keyword">int8_t</span> content[];</span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-1-整数集合的结构"><a href="#5-1-1-整数集合的结构" class="headerlink" title="5.1.1 整数集合的结构"></a>5.1.1 整数集合的结构</h4><ol>
<li>encoding：决定了content数组的编码方式，如果编码方式为INTSET_ENC_INT16，则content数组的每个项都是为int16_t的整数值(最小值为-32768，最大值为32767)；如果为INTSET_ENC_INT32,，则content数组的每个项都是int32_t的整数值（最小值为-2147483648，最大值为2147483647）。</li>
<li>length：表示元素的数量。</li>
<li>content数组：存放元素的数组。</li>
</ol>
<p>下图展示了一个包含5个int16_t类型整数值的整数集合</p>
<p><img src="/2020/02/16/Redis中的数据结构/10.png" alt></p>
<h3 id="5-2-升级"><a href="#5-2-升级" class="headerlink" title="5.2 升级"></a>5.2 升级</h3><p>​    当新存入的元素超过了当前编码方式的范围，会对content进行类型升级，且数组中的全部元素类型为升级后的类型。升级操作为整数集合带来了操作上的灵活性，并且尽可能地节约了内存</p>
<h3 id="5-3-降级"><a href="#5-3-降级" class="headerlink" title="5.3 降级"></a>5.3 降级</h3><p>​    Redis中不支持降级操作。</p>
<h2 id="6-压缩列表"><a href="#6-压缩列表" class="headerlink" title="6. 压缩列表"></a>6. 压缩列表</h2><h3 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h3><p>​    压缩列表是列表键和哈希键的底层实现之一，是由一系列特殊编码的连续内存块组成的顺序性数据结构。当一个列表键只包含少量的列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来作为列表键的底层实现。</p>
<h4 id="6-1-1-压缩列表的实现"><a href="#6-1-1-压缩列表的实现" class="headerlink" title="6.1.1 压缩列表的实现"></a>6.1.1 压缩列表的实现</h4><p><img src="/2020/02/16/Redis中的数据结构/11.png" alt></p>
<ol>
<li><p>zlbytes：记录整个压缩列表占用的内存字节数，在对压缩列表进行内存重分配或者计算zlend的位置时使用。使用十六进制表示。</p>
</li>
<li><p>zltail：记录压缩列表表尾节点距离压缩列表的起始地址有多少字节，通过这个偏移量，无需遍历即可确定表尾节点的地址。如果起始地址的指针为P，偏移量为0x3C，则表尾节点的地址为p+60。</p>
</li>
<li><p>zllen：记录了压缩列表包含的节点数量，当这个值小于65535时，这个数即为压缩列表的节点数，如果等于了65535，则需要遍历整个列表才能计算得出。</p>
</li>
<li><p>entryX：列表节点</p>
<p><img src="/2020/02/16/Redis中的数据结构/12.png" alt></p>
<ol>
<li>previous_entry_length：记录了压缩列表前一个节点的长度。如果前一节的长度小于254字节，那么该属性的长度为1字节，前一节点的长度就保存在该字节中；如果前一节点的长度大于等于254字节，那么该属性的长度为5字节，第一个字节会被设置为0xFE，之后的四个字节用于保存前一节点的长度。</li>
<li>encoding：记录了节点的content属性所保存数据的类型以及长度。一字节、两字节或五字节长，最高位为00、01或者10，数组的长度由除去最高位之后的其他位记录。</li>
<li>content：负责保存节点的值</li>
</ol>
</li>
<li><p>zlend：特殊值0xFF，用于标记压缩列表的末端。</p>
</li>
</ol>
<h3 id="6-2-连锁更新"><a href="#6-2-连锁更新" class="headerlink" title="6.2 连锁更新"></a>6.2 连锁更新</h3><p>​    如果节点的长度都在250~253之间，且头部插入一个254字节的节点后，会引发后面记录的长度都变成5字节，导致所有节点都需要更新。但是出现的几率并不高。</p>
<h2 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h2><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>​    Redis并没有直接使用以上的数据结构来实现数据库功能，而是基于这些数据结构创建了一个对象系统，其中包括字符串对象、列表对象、哈希对象、集合对象、有序集合对象。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">对象的结构</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//对象类型</span></span><br><span class="line">	<span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//编码</span></span><br><span class="line">	<span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指向底层数据结构的指针</span></span><br><span class="line">	<span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//引用计数</span></span><br><span class="line">	<span class="keyword">int</span> refcount;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//空转时长</span></span><br><span class="line">	<span class="keyword">unsigned</span> lru:<span class="number">22</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-对象的类型"><a href="#7-2-对象的类型" class="headerlink" title="7.2 对象的类型"></a>7.2 对象的类型</h3><h4 id="7-2-1-字符串对象"><a href="#7-2-1-字符串对象" class="headerlink" title="7.2.1 字符串对象"></a>7.2.1 字符串对象</h4><p>​    字符串对象的编码可以分为int、raw、embstr。</p>
<p>​    特别说明：在redis中，字符串对象是唯一一个会被其他四种对象嵌套的对象</p>
<p><img src="/2020/02/16/Redis中的数据结构/14.png" alt></p>
<ol>
<li>int：如果一个字符串对象保存的是整数值，并且这个给整数值可以用long，那么字符串对象会将整数值保存在ptr属性中，并将void*转换成long。</li>
<li>raw：如果一个字符串对象保存的是一个字符串，且长度大于等于39字节，那么编码将会是raw。</li>
<li>embstr：如果字符串对象保存的是一个字符串，且长度小于39字节，那么编码将会是embstr</li>
</ol>
<h5 id="embstr与raw的区别："><a href="#embstr与raw的区别：" class="headerlink" title="embstr与raw的区别："></a>embstr与raw的区别：</h5><p>​    embstr与rarw都是i使用redisObject与sds结构来保存字符串对象，但是raw会调用两次内存分配函数分别来创建redisObject与sds对象，而embstr只会调用一次内存分配函数来分配一块连续的内存空间，来依次保存redisObject与sds结构。</p>
<h4 id="7-2-2-列表对象"><a href="#7-2-2-列表对象" class="headerlink" title="7.2.2 列表对象"></a>7.2.2 列表对象</h4><p>​    列表对象的编码可以是ziplist或linkedlist。</p>
<h5 id="7-2-2-1-ziplist编码的列表对象"><a href="#7-2-2-1-ziplist编码的列表对象" class="headerlink" title="7.2.2.1 ziplist编码的列表对象"></a>7.2.2.1 ziplist编码的列表对象</h5><p><img src="/2020/02/16/Redis中的数据结构/13.png" alt></p>
<h5 id="7-2-2-2-linkedlist编码的列表对象"><a href="#7-2-2-2-linkedlist编码的列表对象" class="headerlink" title="7.2.2.2 linkedlist编码的列表对象"></a>7.2.2.2 linkedlist编码的列表对象</h5><p><img src="/2020/02/16/Redis中的数据结构/15.png" alt></p>
<h5 id="7-2-2-3-编码转换"><a href="#7-2-2-3-编码转换" class="headerlink" title="7.2.2.3 编码转换"></a>7.2.2.3 编码转换</h5><p>​    当列表保存的所有字符串对象的长度都小于64字节且列表对象保存的元素数量小于512个时，才会使用ziplist来作为底层数据结构。否则使用linkedlist作为底层数据结构</p>
<h4 id="7-2-3-哈希对象"><a href="#7-2-3-哈希对象" class="headerlink" title="7.2.3 哈希对象"></a>7.2.3 哈希对象</h4><p>​    哈希对象的编码可以是ziplist或hashtable。</p>
<h5 id="7-2-3-1-ziplist编码的哈希对象"><a href="#7-2-3-1-ziplist编码的哈希对象" class="headerlink" title="7.2.3.1 ziplist编码的哈希对象"></a>7.2.3.1 ziplist编码的哈希对象</h5><p>​    同一键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点在后，先添加的键值对在表头方向，后添加的在表尾方向，总是从后往前开始保存。</p>
<p><img src="/2020/02/16/Redis中的数据结构/16.png" alt></p>
<h5 id="7-2-3-2-hashtable编码的对象"><a href="#7-2-3-2-hashtable编码的对象" class="headerlink" title="7.2.3.2 hashtable编码的对象"></a>7.2.3.2 hashtable编码的对象</h5><p>​    字典：每个键都是一个字符串对象，对象中保存的键值对的键；每个值也是一个字符串对象，对象中保存的键值对的值。</p>
<p><img src="/2020/02/16/Redis中的数据结构/17.png" alt></p>
<h5 id="7-2-3-3-编码转换"><a href="#7-2-3-3-编码转换" class="headerlink" title="7.2.3.3 编码转换"></a>7.2.3.3 编码转换</h5><p>​    当哈希对象保存的所有键值对的键和值的字符串长度都小于64字节，且保存的键值对数量小于512时，使用ziplist编码，否则使用hashtable编码。</p>
<h4 id="7-2-4-集合对象"><a href="#7-2-4-集合对象" class="headerlink" title="7.2.4 集合对象"></a>7.2.4 集合对象</h4><p>​    集合对象的编码可以是intset或hashtable。</p>
<h5 id="7-2-4-1-intset编码的集合对象"><a href="#7-2-4-1-intset编码的集合对象" class="headerlink" title="7.2.4.1 intset编码的集合对象"></a>7.2.4.1 intset编码的集合对象</h5><p><img src="/2020/02/16/Redis中的数据结构/18.png" alt></p>
<h5 id="7-2-4-2-hashtable编码的集合对象"><a href="#7-2-4-2-hashtable编码的集合对象" class="headerlink" title="7.2.4.2 hashtable编码的集合对象"></a>7.2.4.2 hashtable编码的集合对象</h5><p>​    hashtable编码的集合对象，每一个键都是一个字符串对象，而值全部设置为NULL。</p>
<p><img src="/2020/02/16/Redis中的数据结构/19.png" alt></p>
<h5 id="7-2-4-3-编码转换"><a href="#7-2-4-3-编码转换" class="headerlink" title="7.2.4.3 编码转换"></a>7.2.4.3 编码转换</h5><p>​    如果集合对象保存的所有元素都是整数值，且元素数量小于512个，使用intset编码，否则使用hashtable编码。</p>
<h4 id="7-2-5-有序集合对象"><a href="#7-2-5-有序集合对象" class="headerlink" title="7.2.5 有序集合对象"></a>7.2.5 有序集合对象</h4><p>​    有序集合的编码可以是ziplist或者skiplist</p>
<h5 id="7-2-5-1-ziplist编码的有序集合对象"><a href="#7-2-5-1-ziplist编码的有序集合对象" class="headerlink" title="7.2.5.1 ziplist编码的有序集合对象"></a>7.2.5.1 ziplist编码的有序集合对象</h5><p>​    每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二节节点保存元素的权重，压缩列表内的集合元素按权重从小到大排序</p>
<p><img src="/2020/02/16/Redis中的数据结构/20.png" alt></p>
<h5 id="7-2-5-2-skiplist编码的有序集合对象"><a href="#7-2-5-2-skiplist编码的有序集合对象" class="headerlink" title="7.2.5.2 skiplist编码的有序集合对象"></a>7.2.5.2 skiplist编码的有序集合对象</h5><p>​    zset：底层使用的是跳表加字典，使用跳表来实现范围操作，使用字典来实现对对象以O（1）时间复杂度的查找，字典和跳表会共享元素的成员与分值，不会造成任何数据的重复，也不会浪费内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line">  </span><br><span class="line">  zskiplist *zsl;</span><br><span class="line">  </span><br><span class="line">  dict *dict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/16/Redis中的数据结构/21.png" alt></p>
<h5 id="7-2-5-3-编码转换"><a href="#7-2-5-3-编码转换" class="headerlink" title="7.2.5.3 编码转换"></a>7.2.5.3 编码转换</h5><p>​    有序集合对象保存的元素数量小于128个，且所有元素的长度都小于64字节，使用ziplist编码，否则使用skiplist编码</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://redisbook.com/index.html" target="_blank" rel="noopener">黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014.</a></li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap的线程安全问题</title>
    <url>/2020/02/15/hashmap%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="HashMap的线程安全问题"><a href="#HashMap的线程安全问题" class="headerlink" title="HashMap的线程安全问题"></a>HashMap的线程安全问题</h1><p>HashMap是线程不安全的，在多线程环境下对键值对进行操作的时候，会产生各种不符合预期的问题</p>
<h2 id="1-多线程的put可能导致元素丢失"><a href="#1-多线程的put可能导致元素丢失" class="headerlink" title="1.多线程的put可能导致元素丢失"></a>1.多线程的put可能导致元素丢失</h2><p>假设当前HashMap中的table状态如下：</p>
<a id="more"></a>

<p><img src="/2020/02/15/hashmap的线程安全问题/1.jpg" alt="1"></p>
<p>假设此时线程1和线程2同时执行put，假设线程1执行了put(key2,value2)，线程2执行了put(key3,value3)，并且key2和key3的hash值与key相同，那么正常情况下，put完成后，table的状态应该是下图中的其中一个：</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/2.jpg" alt="图片2"></p>
<p>接着，假设线程1和线程2都执行到了这个位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure>

<p>且当前状态如下：</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/3.jpg" alt></p>
<p>然后两个线程都来到了这个位置p.next = newNode(hash, key, value, null);</p>
<p>假设线程1先执行，那么table现在的状态会变成如下状态：</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/4.jpg" alt></p>
<p>接着线程1的时间片刚好用完，切换到了线程2，然后线程2也执行了p.next = newNode(hash, key, value, null);</p>
<p>那么table就会变成如下状态：</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/5.jpg" alt></p>
<p>这样一来，key2的元素就丢失了。</p>
<h2 id="2-put和get并发时，可能导致get为null"><a href="#2-put和get并发时，可能导致get为null" class="headerlink" title="2.put和get并发时，可能导致get为null"></a>2.put和get并发时，可能导致get为null</h2><p>再来假设一个场景，线程1执行put时，因为hashmap中元素个数超过了负载因子的大小从而导致了rehash，而此时刚好线程2又执行了get方法。</p>
<p>通过查看HashMap中扩容时使用的resize方法可以得知，该方法在执行的时候，会先计算新的容量和负载因子，再创建一个新的hash表，最后将旧hash表的元素rehash到新的hash表中。</p>
<p>线程1执行了如下操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap]; </span><br><span class="line">table = newTab;</span><br></pre></td></tr></table></figure>

<p>但此时实例变量table是空的，如果又恰好发生了线程上下文切换，线程2执行了get，那么此时就会get出null。</p>
<h2 id="3-HashMap并发put会造成循环链表，导致get一个不存在的key时，出现死循环"><a href="#3-HashMap并发put会造成循环链表，导致get一个不存在的key时，出现死循环" class="headerlink" title="3.HashMap并发put会造成循环链表，导致get一个不存在的key时，出现死循环"></a>3.HashMap并发put会造成循环链表，导致get一个不存在的key时，出现死循环</h2><h3 id="3-1-循环链表的产生"><a href="#3-1-循环链表的产生" class="headerlink" title="3.1 循环链表的产生"></a>3.1 循环链表的产生</h3><p>关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123; <span class="comment">// table变量即为旧hash表</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">            <span class="comment">// #1</span></span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 用元素的hash值计算出这个元素在新hash表中的位置</span></span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            <span class="comment">// #2</span></span><br><span class="line">            e.next = newTable[I];</span><br><span class="line">            <span class="comment">// #3</span></span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            <span class="comment">// #4</span></span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="正常情况下的rehash过程"><a href="#正常情况下的rehash过程" class="headerlink" title="正常情况下的rehash过程"></a>正常情况下的rehash过程</h4><ul>
<li>现在假设hash算法就是key mod 表的size</li>
<li>上面的时旧的hash表，下面的是新的hash表</li>
</ul>
<p><img src="/2020/02/15/hashmap的线程安全问题/6.jpg" alt></p>
<h4 id="并发下的rehash过程"><a href="#并发下的rehash过程" class="headerlink" title="并发下的rehash过程"></a>并发下的rehash过程</h4><p>假设现在还是有2个线程，分别用红色和蓝色标注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; next = e.next; <span class="comment">// &lt;--假设线程一执行到这里就被调度挂起了</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">    e.next = newTable[i];</span><br><span class="line">    newTable[i] = e;</span><br><span class="line">    e = next;</span><br><span class="line">&#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<p>而此时的线程2已经执行完毕了，于是就有了下图的情况：</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/7.jpg" alt></p>
<p>但此时，线程1的e指向的还是key3，next指向的还是key7，其在线程2rehash完毕后，指向了线程2重组的链表，此时可以看到链表的顺序已经被反转</p>
<p>然后，线程1被CPU调度</p>
<ul>
<li>先是执行newTable[i] = e；</li>
<li>然后是e = next；导致e指向了key7；</li>
<li>而下一次循环的next = e.next导致next指向了key3；</li>
</ul>
<p><img src="/2020/02/15/hashmap的线程安全问题/8.jpg" alt></p>
<p>线程1接着工作，把key7又放到了表头，然后直接把e和next往下移：</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/9.jpg" alt></p>
<p>此时newTable[i]已经是key7了，</p>
<p>然后e.next  = newTable[i]，导致key3.next又指向了key7，于是，循环链表就出现了</p>
<p><img src="/2020/02/15/hashmap的线程安全问题/10.jpg" alt></p>
<h3 id="3-2死循环的产生"><a href="#3-2死循环的产生" class="headerlink" title="3.2死循环的产生"></a>3.2死循环的产生</h3><p>查看一下hashmap.get的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> getForNullKey();</span><br><span class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">// 假设这里条件一直不成立</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合源码和上图可知，此时循环中的e = e.next永远不会为空，如果get了一个不存在key，且这个key的位置刚好就在循环链表处，那么死循环就出现了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>链接：<a href="https://juejin.im/post/5c8910286fb9a049ad77e9a3" target="_blank" rel="noopener">https://juejin.im/post/5c8910286fb9a049ad77e9a3</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
